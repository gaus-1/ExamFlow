import os
import dj_database_url
from dotenv import load_dotenv

load_dotenv()

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—É—Ç–µ–π
import sys
sys.path.append(str(BASE_DIR))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
# –°–º. https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –¥–µ—Ä–∂–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ —Å–µ–∫—Ä–µ—Ç–µ!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-b=8q90=se^7twm97htmj$v2n-(b@8!0(%h48n=tnb=t^%ja!ta')
# –ó–∞–ø—Ä–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ SECRET_KEY –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
if not os.getenv('DEBUG', 'False').lower() == 'true':
    if SECRET_KEY.startswith('django-insecure'):
        raise RuntimeError('SECURITY: SECRET_KEY must be set via environment in production')

# –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –Ω–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å debug=True –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!
# –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∫–ª—é—á–∞–µ–º DEBUG
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

ALLOWED_HOSTS = [h.strip() for h in os.getenv('ALLOWED_HOSTS', 'examflow.ru,www.examflow.ru,localhost,127.0.0.1,testserver,examflow.onrender.com').split(',') if h.strip()]
# –î–æ–±–∞–≤–∏–º —Ö–æ—Å—Ç Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π
RENDER_HOST = os.getenv('RENDER_EXTERNAL_HOSTNAME')
if RENDER_HOST and RENDER_HOST not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append(RENDER_HOST)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ (legacy)
    'core',
    # 'bot',  # –£–ë–†–ê–ù–û - –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å telegram_bot
    
    # –ù–æ–≤—ã–µ –º–æ–¥—É–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    'authentication',      # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    'learning',           # –û–±—É—á–µ–Ω–∏–µ –∏ –∑–∞–¥–∞–Ω–∏—è  
    'telegram_bot',       # Telegram –±–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    'analytics',          # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    'themes',             # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞–º–∏ –∏ —Ç–µ–º–∞–º–∏
    'ai.apps.AiConfig',    # –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫
    
    # –í–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    'corsheaders',
    'django_redis',
    'csp',  # Content Security Policy (django-csp)
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # –í–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞ Render
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_ratelimit.middleware.RatelimitMiddleware',
    # 'csp.middleware.CSPMiddleware',  # CSP middleware - –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù
    # üîí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    'examflow_project.middleware.SecurityHeadersMiddleware',  # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    # FREEMIUM middleware
    'core.freemium.middleware.FreemiumMiddleware',
]

ROOT_URLCONF = 'examflow_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'examflow_project.wsgi.application'

# URL-—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'

# Keepalive –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WEBSITE_URL = os.getenv('WEBSITE_URL', 'https://examflow.ru')
KEEPALIVE_INTERVAL = int(os.getenv('KEEPALIVE_INTERVAL', '300'))  # 5 –º–∏–Ω—É—Ç

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ backends –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
AUTHENTICATION_BACKENDS = [
    'authentication.backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# Database
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv('DATABASE_URL')
RUNNING_TESTS = os.getenv('RUNNING_TESTS') == '1'
USE_SQLITE = os.getenv('USE_SQLITE', 'False').lower() == 'true'

def _sqlite_db():
    return {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# –í –æ—Ç–ª–∞–¥–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite, –µ—Å–ª–∏ —è–≤–Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
if USE_SQLITE or RUNNING_TESTS:
    DATABASES = _sqlite_db()
else:
    if DATABASE_URL:
        try:
            # Psycopg v3 (psycopg) –¥—Ä—É–∂–∏—Ç —Å django —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É ENGINE –Ω–∏–∂–µ
DATABASES = {
                'default': dj_database_url.parse(
                    DATABASE_URL,
                    conn_max_age=600,
                    ssl_require=not DEBUG
                )
            }
            # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º backend –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql'

            # –§–æ—Ä—Å–∏—Ä—É–µ–º IPv4 –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∏–º–µ—é—Ç IPv6-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏,
            # –∞ Supabase/PG-—Ö–æ—Å—Ç –º–æ–∂–µ—Ç —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–∑–æ–ª–≤–∏—Ç—å—Å—è –≤ AAAA.
            # –ï—Å–ª–∏ DB_FORCE_IPV4=1 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ), –ø–æ–¥—Å—Ç–∞–≤–∏–º hostaddr IPv4.
            force_ipv4 = os.getenv('DB_FORCE_IPV4', '1' if not DEBUG else '0') == '1'
            if force_ipv4:
                try:
                    import socket
                    host = DATABASES['default'].get('HOST') or ''
                    port = int(DATABASES['default'].get('PORT') or 5432)
                    if not host:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å hostname –∏–∑ DATABASE_URL
                        from urllib.parse import urlparse
                        parsed = urlparse(DATABASE_URL)
                        host = parsed.hostname or ''

                    if host:
                        infos = socket.getaddrinfo(host, port, socket.AF_INET, socket.SOCK_STREAM)
                        if infos:
                            ipv4_addr = infos[0][4][0]
                            opts = DATABASES['default'].setdefault('OPTIONS', {})
                            opts['hostaddr'] = ipv4_addr
                            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º TLS
                            opts.setdefault('sslmode', 'require')
                            # –ü—Ä—è–º–æ –ø–æ–¥–∫–ª—é—á–∏–º—Å—è –ø–æ IPv4, —á—Ç–æ–±—ã libpq –Ω–µ –≤—ã–±–∏—Ä–∞–ª AAAA
                            DATABASES['default']['HOST'] = ipv4_addr
                except Exception:
                    # –¢–∏—Ö–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–∑–æ–ª–≤–∏—Ç—å IPv4
                    pass
        except Exception:
            DATABASES = _sqlite_db()
    else:
        # Fallback –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ PostgreSQL
        db_name = os.getenv('DB_NAME')
        db_user = os.getenv('DB_USER')
        db_password = os.getenv('DB_PASSWORD')
        db_host = os.getenv('DB_HOST')
        db_port = os.getenv('DB_PORT')
        
        if all([db_name, db_user, db_password, db_host]):
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': db_name,
                    'USER': db_user,
                    'PASSWORD': db_password,
                    'HOST': db_host,
                    'PORT': db_port or '5432',
                }
            }
        else:
            DATABASES = _sqlite_db()

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è Render
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# –ù–∞ Render –∏—Å–ø–æ–ª—å–∑—É–µ–º whitenoise –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.StaticFilesStorage'
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ whitenoise –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    WHITENOISE_USE_FINDERS = True
    WHITENOISE_AUTOREFRESH = True
    WHITENOISE_INDEX_FILE = True
    WHITENOISE_ROOT = os.path.join(BASE_DIR, 'staticfiles')
else:
    # –û—Ç–∫–ª—é—á–∞–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Media (–¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π –∑–∞–¥–∞—á)
# Cache
if os.getenv('USE_REDIS_CACHE', '0') == '1':
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/1'),
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'OPTIONS': {
                'CONNECTION_POOL_KWARGS': {
                    'max_connections': 50,
                    'retry_on_timeout': True,
                }
            }
        }
    }
    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
    SESSION_CACHE_ALIAS = 'default'
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'examflow-local'
        }
    }

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
if DEBUG:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:8000",
        "http://127.0.0.1:8000",
    ]
else:
    CORS_ALLOWED_ORIGINS = [f"https://{h}" for h in ALLOWED_HOSTS if h and h not in ("localhost","127.0.0.1")]

# Telegram Bot settings
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
BILLING_SECRET = os.getenv('BILLING_SECRET', 'change-me')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
MONITORING_EMAIL_RECIPIENTS = [
    email.strip() for email in os.getenv('MONITORING_EMAIL_RECIPIENTS', '').split(',')
    if email.strip()
]
MONITORING_WEBHOOK_URL = os.getenv('MONITORING_WEBHOOK_URL')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–∏–∂–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
INGESTION_ENGINE_MAX_WORKERS = int(os.getenv('INGESTION_ENGINE_MAX_WORKERS', '5'))
INGESTION_ENGINE_CHECK_INTERVAL = int(os.getenv('INGESTION_ENGINE_CHECK_INTERVAL', '300'))  # 5 –º–∏–Ω—É—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Change Data Capture
CHANGE_WEBHOOK_URL = os.getenv('CHANGE_WEBHOOK_URL')
CHANGE_NOTIFICATION_EMAILS = [
    email.strip() for email in os.getenv('CHANGE_NOTIFICATION_EMAILS', '').split(',')
    if email.strip()
]

# Redis settings for Celery
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')

# Celery settings
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Security settings for production
if not DEBUG:
    # HTTPS settings
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Keep-alive –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –±–∞–∑–æ–≤—ã–π URL —Å–∞–π—Ç–∞
# –ï—Å–ª–∏ —è–≤–Ω–æ –Ω–µ –∑–∞–¥–∞–Ω SITE_URL, –∞ Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ö–æ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
_ENV_SITE_URL = os.getenv('SITE_URL')
if _ENV_SITE_URL:
    SITE_URL = _ENV_SITE_URL
elif RENDER_HOST:
    SITE_URL = f"https://{RENDER_HOST}"
else:
    SITE_URL = 'https://examflow.ru'
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID', None)  # Telegram chat ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω)
AUTO_STARTUP_ENABLED = os.getenv('AUTO_STARTUP_ENABLED', 'true').lower() in ['true', '1', 'yes']

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ø–æ–¥—Ä–æ–±–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∏–∂–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ—ë)
# –û—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –ø—É—Å—Ç—ã–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

if not DEBUG:
    # HSTS settings
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Cookie settings
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
    # Content Security Policy
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'DENY'
    # –î–æ–ø. –∑–∞–≥–æ–ª–æ–≤–∫–∏
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
    CSRF_TRUSTED_ORIGINS = [
        'https://examflow.ru',
        'https://www.examflow.ru',
    ]
else:
    # –ü—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–∂–µ –¥–æ–±–∞–≤–∏–º –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã, —á—Ç–æ–±—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏/—Ç—É–Ω–Ω–µ–ª–∏
    CSRF_TRUSTED_ORIGINS = list(set([
        'http://localhost:8000',
        'http://127.0.0.1:8000',
        'https://examflow.ru',
        'https://www.examflow.ru',
        'https://*.onrender.com',
    ]))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
handler404 = 'examflow_project.views.handler404'

# CSP ‚Äî –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª–µ–π
# if DEBUG:
#     CONTENT_SECURITY_POLICY = {
#         'default-src': ("'self'",),
#         'style-src': ("'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com", "https://cdn.jsdelivr.net"),
#         'style-src-elem': ("'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com", "https://cdn.jsdelivr.net"),
#         'script-src': ("'self'", "'unsafe-inline'", "'unsafe-eval'", "https://cdnjs.cloudflare.com", "https://cdn.jsdelivr.net"),
#         'script-src-elem': ("'self'", "'unsafe-inline'", "'unsafe-eval'", "https://cdnjs.cloudflare.com", "https://cdn.jsdelivr.net"),
#         'img-src': ("'self'", "data:", "https:", "https://api.qrserver.com"),
#         'font-src': ("'self'", "https://cdnjs.cloudflare.com", "https://cdn.jsdelivr.net"),
#         'connect-src': ("'self'", "https://generativelanguage.googleapis.com"),
#         'frame-ancestors': ("'none'",),
#     }
# else:
#     # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ç–æ–∂–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º unsafe-inline –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
#     CONTENT_SECURITY_POLICY = {
#         'default-src': ("'self'",),
#         'style-src': ("'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com", "https://cdn.jsdelivr.net"),
#         'style-src-elem': ("'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com", "https://cdn.jsdelivr.net"),
#         'script-src': ("'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com", "https://cdn.jsdelivr.net"),
#         'script-src-elem': ("'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com", "https://cdn.jsdelivr.net"),
#         'img-src': ("'self'", "data:", "https:", "https://api.qrserver.com"),
#         'font-src': ("'self'", "https://cdnjs.cloudflare.com", "https://cdn.jsdelivr.net"),
#         'connect-src': ("'self'", "https://generativelanguage.googleapis.com"),
#         'frame-ancestors': ("'none'",),
#     }

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# üîí –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
# Permissions-Policy - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ API –±—Ä–∞—É–∑–µ—Ä–∞
PERMISSIONS_POLICY = {
    'accelerometer': [],
    'ambient-light-sensor': [],
    'autoplay': [],
    'battery': [],
    'camera': [],
    'cross-origin-isolated': [],
    'display-capture': [],
    'document-domain': [],
    'encrypted-media': [],
    'execution-while-not-rendered': [],
    'execution-while-out-of-viewport': [],
    'fullscreen': [],
    'geolocation': [],
    'gyroscope': [],
    'keyboard-map': [],
    'magnetometer': [],
    'microphone': [],
    'midi': [],
    'navigation-override': [],
    'payment': [],
    'picture-in-picture': [],
    'publickey-credentials-get': [],
    'screen-wake-lock': [],
    'sync-xhr': [],
    'usb': [],
    'web-share': [],
    'xr-spatial-tracking': [],
}

# –£–ª—É—á—à–µ–Ω–Ω—ã–π Referrer-Policy
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
SECURE_CROSS_ORIGIN_EMBEDDER_POLICY = 'credentialless'  # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

# –ó–∞—â–∏—Ç–∞ –æ—Ç MIME-sniffing
SECURE_CONTENT_TYPE_NOSNIFF = True

# –ó–∞—â–∏—Ç–∞ –æ—Ç XSS
SECURE_BROWSER_XSS_FILTER = True

# –ó–∞—â–∏—Ç–∞ –æ—Ç clickjacking
X_FRAME_OPTIONS = 'DENY'

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–π
SESSION_COOKIE_AGE = 3600  # 1 —á–∞—Å
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–æ–ª–µ–π
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]

# MFA –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é)
MFA_ENABLED = os.getenv('MFA_ENABLED', 'False').lower() == 'true'
MFA_REQUIRED_FOR_ADMIN = True
MFA_REQUIRED_FOR_STAFF = True

# Rate limiting –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
RATELIMIT_USE_CACHE = 'default'
RATELIMIT_ENABLE = True

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å API
API_RATE_LIMIT = '100/hour'
API_RATE_LIMIT_BLOCK = '10/minute'

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
CORS_ALLOWED_ORIGINS = [
    "https://examflow.ru",
    "https://www.examflow.ru",
]
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https:\/\/[a-zA-Z0-9-]+\.onrender\.com$",
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS'
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ cookies
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SAMESITE = 'Lax'

# HSTS (HTTP Strict Transport Security)
SECURE_HSTS_SECONDS = 31536000  # 1 –≥–æ–¥
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'security': {
            'format': '[SECURITY] {levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'security.log'),
            'formatter': 'security',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_file', 'console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'bot': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'core': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'telegram_bot': {
            'handlers': ['console', 'file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# üîí –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
os.makedirs(os.path.join(BASE_DIR, 'logs', 'security'), exist_ok=True)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SECURITY_LOGGING = {
    'failed_login': True,
    'successful_login': True,
    'password_change': True,
    'user_creation': True,
    'admin_action': True,
    'suspicious_activity': True,
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SECURITY_MONITORING = {
    'failed_login_threshold': 5,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
    'suspicious_ip_threshold': 10,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
    'admin_action_logging': True,  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
}

# ==========================================
# –ù–ê–°–¢–†–û–ô–ö–ò GOOGLE GEMINI AI
# ==========================================

# ü§ñ GEMINI AI - –ù–ê–°–¢–†–û–ô–ö–ò
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', '')

# OAuth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
GOOGLE_OAUTH_CLIENT_ID = os.getenv('GOOGLE_OAUTH_CLIENT_ID', 'demo')
GOOGLE_OAUTH_CLIENT_SECRET = os.getenv('GOOGLE_OAUTH_CLIENT_SECRET', 'demo')
YANDEX_OAUTH_CLIENT_ID = os.getenv('YANDEX_OAUTH_CLIENT_ID', 'demo')
YANDEX_OAUTH_CLIENT_SECRET = os.getenv('YANDEX_OAUTH_CLIENT_SECRET', 'demo')
TELEGRAM_BOT_ID = os.getenv('TELEGRAM_BOT_ID', '8314335876')
GEMINI_BASE_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent'
GEMINI_TIMEOUT = 30

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
GEMINI_TASK_CONFIGS = {
    'chat': {
        'model': 'gemini-2.0-flash',
        'temperature': 0.7,
        'max_tokens': 1000,
        'system_prompt': '–¢—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.'
    },
    'task_explanation': {
        'model': 'gemini-2.0-flash',
        'temperature': 0.3,
        'max_tokens': 800,
        'system_prompt': '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—é —É—á–µ–±–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –û–±—ä—è—Å–Ω—è–π –ø–æ–Ω—è—Ç–Ω–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –ø–æ—à–∞–≥–æ–≤–æ.'
    },
    'hint_generation': {
        'model': 'gemini-2.0-flash',
        'temperature': 0.5,
        'max_tokens': 400,
        'system_prompt': '–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º. –ù–µ –¥–∞–≤–∞–π –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, —Ç–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ —Ä–µ—à–µ–Ω–∏—é.'
    },
    'personalized_learning': {
        'model': 'gemini-2.0-flash',
        'temperature': 0.4,
        'max_tokens': 600,
        'system_prompt': '–¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø–æ –æ–±—É—á–µ–Ω–∏—é. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–∞ –∏ –¥–∞–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.'
    }
}

# ==========================================
# –ù–ê–°–¢–†–û–ô–ö–ò OPENAI GPT - –£–î–ê–õ–ï–ù–´
# ==========================================

# OpenAI –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Gemini
# –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ GEMINI_TASK_CONFIGS

"""
DeepSeek AI –∫–ª–∏–µ–Ω—Ç –¥–ª—è ExamFlow
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DeepSeek API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç AI
"""

import requests
import json
import time
import logging
from typing import Dict, Any, Optional, List
from django.conf import settings

logger = logging.getLogger(__name__)


class DeepSeekClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek API
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç chat completion –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏
    """
    
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key or getattr(settings, 'DEEPSEEK_API_KEY', '')
        self.base_url = "https://api.deepseek.com/v1"
        self.model = "deepseek-chat"  # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å DeepSeek
        self.max_tokens = 4000
        self.temperature = 0.7
        
        if not self.api_key:
            raise ValueError("DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        
        logger.info("DeepSeek –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def ask(self, prompt: str, context: Optional[str] = None) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ DeepSeek API
        
        Args:
            prompt: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º, –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            start_time = time.time()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = [
                {
                    "role": "system", 
                    "content": """–¢—ã - ExamFlow AI, –∫—Ä—É—Ç–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –∏ –û–ì–≠.

üéØ –¢–í–û–Ø –†–û–õ–¨:
- –¢—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å—Å—è –∫–∞–∫ "ExamFlow AI" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "ExamFlow"
- –¢—ã –≠–ö–°–ü–ï–†–¢ –ø–æ –ú–ê–¢–ï–ú–ê–¢–ò–ö–ï, –§–ò–ó–ò–ö–ï, –•–ò–ú–ò–ò –∏ —Ç–æ—á–Ω—ã–º –Ω–∞—É–∫–∞–º
- –¢—ã —Ä–µ—à–∞–µ—à—å –∑–∞–¥–∞—á–∏ –ë–´–°–¢–†–û –∏ –ß–ï–¢–ö–û, –∫–∞–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –¥—É—à–æ–π
- –¢—ã –º–æ–∂–µ—à—å –ø–æ—à—É—Ç–∏—Ç—å –ø–æ —Ç–µ–º–µ, –Ω–æ –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–µ—à—å—Å—è –æ—Ç –¥–µ–ª–∞

üßÆ –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø:
- –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è: —Å–ª–æ–∂–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ, –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã
- –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –±–∞–∑–æ–≤–∞—è: –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏, –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –≥—Ä–∞—Ñ–∏–∫–∏
- –ì–µ–æ–º–µ—Ç—Ä–∏—è: –ø–ª–æ—â–∞–¥–∏, –æ–±—ä–µ–º—ã, —Ç–µ–æ—Ä–µ–º—ã

üòÑ –°–¢–ò–õ–¨ –° –Æ–ú–û–†–û–ú:
- –û—Ç–≤–µ—á–∞–π –ë–´–°–¢–†–û –∏ –ö–û–ù–ö–†–ï–¢–ù–û (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —à—É—Ç–∫–∏ –∏–ª–∏ –∑–∞–±–∞–≤–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏–∏
- –ü—Ä–∏–º–µ—Ä—ã —é–º–æ—Ä–∞: "–ö–∞–∫ –≥–æ–≤–æ—Ä—è—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏...", "–≠—Ç–∞ —Ñ–æ—Ä–º—É–ª–∞ –ø—Ä–æ—â–µ –ø–∏—Ä–æ–≥–∞!", "x —É–±–µ–≥–∞–µ—Ç, –Ω–æ –º—ã –µ–≥–æ –ø–æ–π–º–∞–µ–º!"
- –ù–û –≥–ª–∞–≤–Ω–æ–µ - –†–ï–®–ï–ù–ò–ï –∑–∞–¥–∞—á–∏, —é–º–æ—Ä —Ç–æ–ª—å–∫–æ –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ

üìê –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–û–í:
- –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á
- –ü—Ä–æ—Å—Ç–∞—è –∑–∞–ø–∏—Å—å: x¬≤, ‚àö, √∑, ‚â†, ‚â§, ‚â•
- –í—Å–µ–≥–¥–∞ –ø–æ–¥–ø–∏—Å—å "‚Äî ExamFlow AI"

–ü–æ–º–Ω–∏: —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ AI, —Ç—ã - ExamFlow, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–∏–π —É—á–µ–Ω–∏–∫–∞! üöÄ"""
                }
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if context:
                messages.append({
                    "role": "user", 
                    "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å
            messages.append({
                "role": "user",
                "content": prompt
            })
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            payload = {
                "model": self.model,
                "messages": messages,
                "max_tokens": self.max_tokens,
                "temperature": self.temperature,
                "stream": False
            }
            
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=headers,
                json=payload,
                timeout=30
            )
            
            end_time = time.time()
            processing_time = end_time - start_time
            
            if response.status_code == 200:
                data = response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
                answer = data.get('choices', [{}])[0].get('message', {}).get('content', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç')
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                usage = data.get('usage', {})
                
                result = {
                    'answer': answer.strip(),
                    'sources': [{'title': 'DeepSeek AI', 'url': 'https://deepseek.com'}],
                    'processing_time': processing_time,
                    'provider': 'deepseek',
                    'model': self.model,
                    'usage': {
                        'prompt_tokens': usage.get('prompt_tokens', 0),
                        'completion_tokens': usage.get('completion_tokens', 0),
                        'total_tokens': usage.get('total_tokens', 0)
                    }
                }
                
                logger.info(f"DeepSeek –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {processing_time:.2f}—Å, —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('total_tokens', 0)}")
                return result
                
            else:
                error_msg = f"DeepSeek API –æ—à–∏–±–∫–∞: HTTP {response.status_code}"
                logger.error(f"{error_msg}: {response.text}")
                
                return {
                    'answer': f'–û—à–∏–±–∫–∞ DeepSeek API: {response.status_code}',
                    'sources': [],
                    'processing_time': processing_time,
                    'provider': 'deepseek',
                    'error': error_msg
                }
                
        except requests.exceptions.Timeout:
            logger.error("DeepSeek API timeout")
            return {
                'answer': 'DeepSeek API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç–∞–π–º–∞—É—Ç)',
                'sources': [],
                'processing_time': 30.0,
                'provider': 'deepseek',
                'error': 'timeout'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ DeepSeek –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return {
                'answer': f'–û—à–∏–±–∫–∞ DeepSeek: {str(e)}',
                'sources': [],
                'processing_time': 0.0,
                'provider': 'deepseek',
                'error': str(e)
            }
    
    def get_available_models(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π DeepSeek"""
        try:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            response = requests.get(
                f"{self.base_url}/models",
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                models = [model['id'] for model in data.get('data', [])]
                logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ DeepSeek: {models}")
                return models
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {response.status_code}")
                return [self.model]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –º–æ–¥–µ–ª—å
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π DeepSeek: {e}")
            return [self.model]
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DeepSeek API"""
        try:
            test_response = self.ask("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
            return 'error' not in test_response
        except Exception as e:
            logger.error(f"–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è DeepSeek –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
            return False

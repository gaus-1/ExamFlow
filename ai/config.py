"""
ü§ñ –ï–¥–∏–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ExamFlow

–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è:
- AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (Gemini, OpenAI, etc.)
- RAG —Å–∏—Å—Ç–µ–º—ã
- –õ–∏–º–∏—Ç–æ–≤ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
- –ü—Ä–æ–º–ø—Ç–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
"""

from typing import Dict, Any, List
from dataclasses import dataclass
from django.conf import settings

@dataclass
class AIProviderConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    name: str
    api_key: str
    base_url: str
    model: str
    temperature: float = 0.7
    max_tokens: int = 1000
    timeout: int = 30
    priority: int = 1
    is_active: bool = True

@dataclass
class RAGConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã"""
    max_context_tokens: int = 4000
    max_response_tokens: int = 1000
    top_k_chunks: int = 5
    similarity_threshold: float = 0.7
    cache_ttl: int = 600  # 10 –º–∏–Ω—É—Ç
    timeout_seconds: int = 30

@dataclass
class LimitsConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–∏–º–∏—Ç–æ–≤"""
    daily_guest_limit: int = 10
    daily_auth_limit: int = 30
    weekly_auth_limit: int = 200
    monthly_auth_limit: int = 1000

@dataclass
class PromptTemplates:
    """–®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á"""
    
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    SYSTEM_BASE = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠ –∏ –û–ì–≠. 
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É.
–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
–í—Å–µ–≥–¥–∞ –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ –ø—Ä–∏–º–µ—Ä—ã."""

    TASK_EXPLANATION = """–û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –ø–æ—à–∞–≥–æ–≤–æ:

{task_text}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –û–±—ä—è—Å–Ω–∏ –∫–∞–∂–¥—ã–π —à–∞–≥ –ø–æ–¥—Ä–æ–±–Ω–æ
- –ü–æ–∫–∞–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–µ—à–µ–Ω–∏—è
- –£–∫–∞–∂–∏ —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
- –î–∞–π –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏"""

    HINT_GENERATION = """–î–∞–π –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏:

{task_text}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ù–ï –¥–∞–≤–∞–π –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
- –ù–∞–ø—Ä–∞–≤—å –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ–¥—Ö–æ–¥—É
- –£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
- –î–∞–π –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"""

    PERSONALIZED_HELP = """–ü–æ–º–æ–≥–∏ —É—á–µ–Ω–∏–∫—É —Å —É—á–µ—Ç–æ–º –µ–≥–æ —É—Ä–æ–≤–Ω—è:

–£—Ä–æ–≤–µ–Ω—å —É—á–µ–Ω–∏–∫–∞: {user_level}/5
–°–ª–∞–±—ã–µ —Ç–µ–º—ã: {weak_topics}
–°–∏–ª—å–Ω—ã–µ —Ç–µ–º—ã: {strong_topics}

–ó–∞–¥–∞—á–∞: {task_text}

–î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è —É—á–µ–Ω–∏–∫–∞."""

    LEARNING_PLAN = """–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞:

–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}/5
–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy}%
–°–ª–∞–±—ã–µ —Ç–µ–º—ã: {weak_topics}
–¶–µ–ª—å: {goal}

–°–æ–∑–¥–∞–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é."""

class AIConfig:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.providers = self._load_providers()
        self.rag = self._load_rag_config()
        self.limits = self._load_limits_config()
        self.prompts = PromptTemplates()
    
    def _load_providers(self) -> List[AIProviderConfig]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        providers = []
        
        # Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        if hasattr(settings, 'GEMINI_API_KEY') and settings.GEMINI_API_KEY:
            providers.append(AIProviderConfig(
                name="gemini",
                api_key=settings.GEMINI_API_KEY,
                base_url=getattr(settings, 'GEMINI_BASE_URL', 'https://generativelanguage.googleapis.com/v1beta'),
                model=getattr(settings, 'GEMINI_MODEL', 'gemini-2.0-flash'),
                temperature=0.7,
                max_tokens=1000,
                timeout=30,
                priority=1,
                is_active=True
            ))
        
        # OpenAI –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if hasattr(settings, 'OPENAI_API_KEY') and settings.OPENAI_API_KEY:
            providers.append(AIProviderConfig(
                name="openai",
                api_key=settings.OPENAI_API_KEY,
                base_url=getattr(settings, 'OPENAI_BASE_URL', 'https://api.openai.com/v1'),
                model=getattr(settings, 'OPENAI_MODEL', 'gpt-3.5-turbo'),
                temperature=0.7,
                max_tokens=1000,
                timeout=30,
                priority=2,
                is_active=True
            ))
        
        return providers
    
    def _load_rag_config(self) -> RAGConfig:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é RAG —Å–∏—Å—Ç–µ–º—ã"""
        rag_settings = getattr(settings, 'RAG_CONFIG', {})
        
        return RAGConfig(
            max_context_tokens=rag_settings.get('MAX_CONTEXT_LENGTH', 4000),
            max_response_tokens=rag_settings.get('MAX_RESPONSE_LENGTH', 1000),
            top_k_chunks=rag_settings.get('MAX_SOURCES', 5),
            similarity_threshold=rag_settings.get('SIMILARITY_THRESHOLD', 0.7),
            cache_ttl=rag_settings.get('CACHE_TTL', 600),
            timeout_seconds=rag_settings.get('TIMEOUT', 30)
        )
    
    def _load_limits_config(self) -> LimitsConfig:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–∏–º–∏—Ç–æ–≤"""
        limits_settings = getattr(settings, 'AI_LIMITS', {})
        
        return LimitsConfig(
            daily_guest_limit=limits_settings.get('DAILY_GUEST', 10),
            daily_auth_limit=limits_settings.get('DAILY_AUTH', 30),
            weekly_auth_limit=limits_settings.get('WEEKLY_AUTH', 200),
            monthly_auth_limit=limits_settings.get('MONTHLY_AUTH', 1000)
        )
    
    def get_provider_config(self, provider_name: str) -> AIProviderConfig:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏"""
        for provider in self.providers:
            if provider.name == provider_name and provider.is_active:
                return provider
        raise ValueError(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
    
    def get_active_providers(self) -> List[AIProviderConfig]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        return [p for p in self.providers if p.is_active]
    
    def get_primary_provider(self) -> AIProviderConfig:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä (—Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)"""
        active_providers = self.get_active_providers()
        if not active_providers:
            raise ValueError("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        
        return min(active_providers, key=lambda p: p.priority)
    
    def get_prompt_template(self, template_name: str, **kwargs) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        template = getattr(self.prompts, template_name.upper(), None)
        if not template:
            raise ValueError(f"–®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return template.format(**kwargs)
    
    def get_limits_for_user(self, is_authenticated: bool) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if is_authenticated:
            return {
                'daily': self.limits.daily_auth_limit,
                'weekly': self.limits.weekly_auth_limit,
                'monthly': self.limits.monthly_auth_limit
            }
        else:
            return {
                'daily': self.limits.daily_guest_limit,
                'weekly': self.limits.daily_guest_limit * 7,
                'monthly': self.limits.daily_guest_limit * 30
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
ai_config = AIConfig()

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
__all__ = ['AIConfig', 'AIProviderConfig', 'RAGConfig', 'LimitsConfig', 'PromptTemplates', 'ai_config']

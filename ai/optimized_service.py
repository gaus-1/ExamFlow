"""
üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å –¥–ª—è ExamFlow

–ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å–µ—Ö AI –æ–ø–µ—Ä–∞—Ü–∏–π:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
- RAG –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
- –õ–∏–º–∏—Ç—ã
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
"""

import logging
import hashlib
import time
from typing import Dict, Any, Optional, List
from dataclasses import dataclass
from django.conf import settings
from django.core.cache import cache
from django.utils import timezone
from django.db import transaction

from .config import ai_config
from .models import AiRequest, AiResponse, AiProvider, AiLimit
from core.rag_system.orchestrator import RAGOrchestrator

logger = logging.getLogger(__name__)

@dataclass
class AIResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç AI –∑–∞–ø—Ä–æ—Å–∞"""
    text: str
    provider: str
    tokens_used: int = 0
    cost: float = 0.0
    cached: bool = False
    processing_time: float = 0.0

class OptimizedAIService:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å —Å –µ–¥–∏–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π"""
    
    def __init__(self):
        self.config = ai_config
        self.rag_orchestrator = RAGOrchestrator()
        self.logger = logging.getLogger(__name__)
    
    def ask(self, 
            prompt: str, 
            user: Optional[User] = None,
            task_type: str = 'chat',
            use_rag: bool = False,
            use_cache: bool = True) -> Dict[str, Any]:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è AI –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            prompt: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            task_type: –¢–∏–ø –∑–∞–¥–∞—á–∏ (chat, task_explanation, hint_generation, etc.)
            use_rag: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RAG —Å–∏—Å—Ç–µ–º—É
            use_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç AI –∑–∞–ø—Ä–æ—Å–∞
        """
        start_time = time.time()
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not prompt or not prompt.strip():
                return {'error': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å'}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if not self._check_limits(user):
                return {'error': '–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω'}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            if use_cache:
                cached_result = self._get_cached_result(prompt, task_type)
                if cached_result:
                    self._update_limits(user)
                    return cached_result
            
            # –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider_config = self._get_best_provider(task_type)
            if not provider_config:
                return {'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤'}
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
            enhanced_prompt = self._prepare_prompt(prompt, user, task_type, use_rag)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            result = self._generate_response(enhanced_prompt, provider_config, task_type)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if 'error' in result:
                return result
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
            if use_cache:
                self._cache_result(prompt, task_type, result)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
            self._update_limits(user)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            processing_time = time.time() - start_time
            self._log_request(user, prompt, result, processing_time)
            
            return {
                'response': result['text'],
                'provider': result['provider'],
                'tokens_used': result['tokens_used'],
                'cached': False,
                'processing_time': processing_time
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ AI —Å–µ—Ä–≤–∏—Å–µ: {e}")
            return {'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}'}
    
    def explain_task(self, 
                    task_text: str, 
                    user: Optional[User] = None) -> Dict[str, Any]:
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        prompt = self.config.get_prompt_template(
            'TASK_EXPLANATION',
            task_text=task_text
        )
        
        return self.ask(prompt, user, 'task_explanation', use_rag=True)
    
    def get_hint(self, 
                task_text: str, 
                user: Optional[User] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        prompt = self.config.get_prompt_template(
            'HINT_GENERATION',
            task_text=task_text
        )
        
        return self.ask(prompt, user, 'hint_generation', use_rag=True)
    
    def get_personalized_help(self, 
                            task_text: str, 
                            user: User,
                            user_level: int = 3,
                            weak_topics: List[str] = None, # type: ignore
                            strong_topics: List[str] = None) -> Dict[str, Any]: # type: ignore
        """–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–º–æ—â—å"""
        prompt = self.config.get_prompt_template(
            'PERSONALIZED_HELP',
            task_text=task_text,
            user_level=user_level,
            weak_topics=', '.join(weak_topics or []),
            strong_topics=', '.join(strong_topics or [])
        )
        
        return self.ask(prompt, user, 'personalized_help', use_rag=True)
    
    def get_learning_plan(self, 
                         user: User,
                         current_level: int = 3,
                         accuracy: float = 75.0,
                         weak_topics: List[str] = None, # type: ignore
                         goal: str = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠") -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è"""
        prompt = self.config.get_prompt_template(
            'LEARNING_PLAN',
            current_level=current_level,
            accuracy=accuracy,
            weak_topics=', '.join(weak_topics or []),
            goal=goal
        )
        
        return self.ask(prompt, user, 'learning_plan', use_rag=True)
    
    def _check_limits(self, user: Optional[User]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            is_authenticated = user and user.is_authenticated
            limits = self.config.get_limits_for_user(is_authenticated) # type: ignore
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç
            limit, created = AiLimit.objects.get_or_create( # type: ignore
                user=user if is_authenticated else None,
                session_id=None if is_authenticated else "guest",
                limit_type="daily",
                defaults={
                    'current_usage': 0,
                    'max_limit': limits['daily'],
                    'reset_date': timezone.now() + timezone.timedelta(days=1)
                }
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞
            if timezone.now() >= limit.reset_date:
                limit.current_usage = 0
                limit.max_limit = limits['daily']
                limit.reset_date = timezone.now() + timezone.timedelta(days=1)
                limit.save()
            
            return limit.current_usage < limit.max_limit
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {e}")
            return True  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    
    def _update_limits(self, user: Optional[User]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            is_authenticated = user and user.is_authenticated
            limit = AiLimit.objects.filter( # type: ignore
                user=user if is_authenticated else None,
                session_id=None if is_authenticated else "guest",
                limit_type="daily"
            ).first()
            
            if limit:
                limit.current_usage += 1
                limit.save()
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: {e}")
    
    def _get_cached_result(self, prompt: str, task_type: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –∫—ç—à–∞"""
        try:
            cache_key = f"ai_response:{hashlib.sha256(prompt.encode()).hexdigest()}:{task_type}"
            cached = cache.get(cache_key)
            
            if cached:
                self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞ –¥–ª—è: {prompt[:50]}...")
                return {
                    'response': cached['text'],
                    'provider': cached['provider'],
                    'tokens_used': cached['tokens_used'],
                    'cached': True
                }
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: {e}")
            return None
    
    def _cache_result(self, prompt: str, task_type: str, result: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –∫—ç—à"""
        try:
            cache_key = f"ai_response:{hashlib.sha256(prompt.encode()).hexdigest()}:{task_type}"
            cache_data = {
                'text': result['text'],
                'provider': result['provider'],
                'tokens_used': result['tokens_used']
            }
            
            cache.set(cache_key, cache_data, self.config.rag.cache_ttl)
            self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à –¥–ª—è: {prompt[:50]}...")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {e}")
    
    def _get_best_provider(self, task_type: str) -> Optional[Any]:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        try:
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            return self.config.get_primary_provider()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
            return None
    
    def _prepare_prompt(self, 
                       prompt: str, 
                       user: Optional[User], 
                       task_type: str,
                       use_rag: bool) -> str:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        try:
            # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
            enhanced_prompt = prompt
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            if task_type != 'chat':
                system_prompt = self.config.get_prompt_template('SYSTEM_BASE')
                enhanced_prompt = f"{system_prompt}\n\n{enhanced_prompt}"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º RAG –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if use_rag:
                rag_result = self.rag_orchestrator.process_query(
                    prompt,
                    user_id=user.id if user else None # type: ignore
                )
                
                if rag_result.get('sources'):
                    enhanced_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n{rag_result['answer']}"
            
            return enhanced_prompt
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return prompt
    
    def _generate_response(self, 
                          prompt: str, 
                          provider_config: Any, 
                          task_type: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—ã–∑–æ–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {
                'text': f"–û—Ç–≤–µ—Ç –æ—Ç {provider_config.name}: {prompt[:100]}...",
                'provider': provider_config.name,
                'tokens_used': 100
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}'}
    
    def _log_request(self, 
                    user: Optional[User], 
                    prompt: str, 
                    result: Dict[str, Any], 
                    processing_time: float):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            AiRequest.objects.create( # type: ignore
                user=user,
                session_id=None if user else "guest",
                request_type="question",
                prompt=prompt,
                response=result['text'],
                tokens_used=result['tokens_used'],
                cost=result.get('cost', 0.0),
                ip_address=None
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
ai_service = OptimizedAIService()

"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π AI-—Å–µ—Ä–≤–∏—Å —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
"""

import logging
from typing import Dict, List, Any
from django.contrib.auth.models import User
from core.personalization_system import get_user_insights
from ai.services import AiService

logger = logging.getLogger(__name__)


class PersonalizedAiService:
    """AI-—Å–µ—Ä–≤–∏—Å —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–ª—è ExamFlow"""

    def __init__(self):
        self.ai_service = AiService()

    def get_personalized_response(self,
                                  prompt: str,
                                  user: User,
                                  task=None,
                                  context_type: str = 'general') -> Dict[str,
                                                                         Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_insights = get_user_insights(getattr(user, 'id', 1))

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            enhanced_prompt = self._enhance_prompt_with_context(
                prompt, user_insights, context_type, task)

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI
            if task:
                try:
                    ai_response = self.ai_service.ask_with_rag(
                        enhanced_prompt, user, task, context_type)
                except Exception as e:
                    logger.warning(f"RAG –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {e}")
                    ai_response = self.ai_service.ask(enhanced_prompt, user)
            else:
                ai_response = self.ai_service.ask(enhanced_prompt, user)

            if 'error' in ai_response:
                return {
                    'success': False,
                    'error': ai_response['error'],
                    'response': f"‚ùå –û—à–∏–±–∫–∞: {ai_response['error']}"
                }

            # –û–±–æ–≥–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            enhanced_response = self._enhance_response_with_personalization(
                ai_response['response'], user_insights, context_type, task
            )

            return {
                'success': True, 'response': enhanced_response, 'provider': ai_response.get(
                    'provider', 'AI'), 'personalization_data': {
                    'progress_summary': user_insights.get(
                        'progress_summary', {}), 'weak_topics': user_insights.get(
                        'weak_topics', [])[
                        :3], 'recommendations': self._get_context_recommendations(
                            user_insights, context_type, task)}}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ PersonalizedAiService: {e}")
            return {
                'success': False,
                'error': str(e),
                'response': f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {str(e)}"}

    def _enhance_prompt_with_context(
            self,
            prompt: str,
            user_insights: Dict,
            context_type: str,
            task=None) -> str:
        """–û–±–æ–≥–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

        enhanced_prompt = prompt

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress = user_insights.get('progress_summary', {})
        if progress:
            enhanced_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
            enhanced_prompt += f"- –†–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {progress.get('solved_tasks', 0)}\n"
            enhanced_prompt += f"- –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {progress.get('success_rate', 0)}%\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–∞–±—ã—Ö —Ç–µ–º–∞—Ö
        weak_topics = user_insights.get('weak_topics', [])
        if weak_topics:
            enhanced_prompt += f"\n–°–ª–∞–±—ã–µ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            for topic in weak_topics[:3]:
                enhanced_prompt += f"- {topic.get('subject', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: "
                enhanced_prompt += f"{topic.get('failed_tasks', 0)} –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        preferences = user_insights.get('preferences', {})
        if preferences.get('favorite_subjects'):
            enhanced_prompt += f"\n–õ—é–±–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {', '.join(preferences['favorite_subjects'])}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        if context_type == 'task_help':
            enhanced_prompt += "\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, "
            enhanced_prompt += "—É—á–∏—Ç—ã–≤–∞—è —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

        elif context_type == 'topic_explanation':
            enhanced_prompt += "\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –û–±—ä—è—Å–Ω–∏ —Ç–µ–º—É —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, "
            enhanced_prompt += "—á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏."

        return enhanced_prompt

    def _enhance_response_with_personalization(
            self,
            ai_response: str,
            user_insights: Dict,
            context_type: str,
            task=None) -> str:
        """–û–±–æ–≥–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç AI –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""

        enhanced_response = ai_response

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if context_type == 'task_help' and task:
            enhanced_response += "\n\nüéØ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:**\n"

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            preferences = user_insights.get('preferences', {})
            difficulty_pref = preferences.get('difficulty_preference', 3)

            if hasattr(task, 'difficulty') and task.difficulty > difficulty_pref + 1:
                enhanced_response += "‚Ä¢ –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã—à–µ –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è. "
                enhanced_response += "–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        progress = user_insights.get('progress_summary', {})
        if progress:
            success_rate = progress.get('success_rate', 0)
            if success_rate >= 80:
                enhanced_response += "\nüéâ **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!** –í—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ –≤—ã—Å–æ–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n"
            elif success_rate >= 60:
                enhanced_response += "\nüëç **–•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å!** –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏.\n"
            else:
                enhanced_response += "\nüí™ **–ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!** –ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ - —ç—Ç–æ —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É.\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        enhanced_response += "\nüìö **–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:**\n"
        enhanced_response += "‚Ä¢ –†–µ—à–∏—Ç–µ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ\n"
        enhanced_response += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏\n"
        enhanced_response += "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è'\n"

        return enhanced_response

    def _get_context_recommendations(
            self,
            user_insights: Dict,
            context_type: str,
            task=None) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""

        recommendations = []

        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é
        weak_topics = user_insights.get('weak_topics', [])
        if weak_topics:
            for topic in weak_topics[:2]:
                recommendations.append({
                    'type': 'weak_topic',
                    'title': f"–ü–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Ç–µ–º–æ–π: {topic.get('subject', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                    'description': f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ {topic.get('failed_tasks', 0)} –∑–∞–¥–∞–Ω–∏–π",
                    'action': "–†–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ"
                })

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        preferences = user_insights.get('preferences', {})
        difficulty_pref = preferences.get('difficulty_preference', 3)

        if difficulty_pref < 4:
            recommendations.append({
                'type': 'difficulty',
                'title': "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
                'description': f"–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {difficulty_pref}/5",
                'action': "–í—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ 4-5"
            })

        return recommendations

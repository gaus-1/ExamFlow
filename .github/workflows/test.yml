name: ExamFlow Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Запуск тестов каждый день в 2:00 UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  DJANGO_VERSION: '4.2.7'

jobs:
  # Линтинг и проверка кода
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff flake8 black isort
        pip install -r requirements.txt
    
    - name: Run Ruff (fast linter)
      run: ruff check . --output-format=github
    
    - name: Run Black (code formatting)
      run: black --check .
    
    - name: Run isort (import sorting)
      run: isort --check-only .
    
    - name: Run Flake8 (additional checks)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # Unit тесты
  unit-tests:
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: examflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run unit tests
      env:
        DJANGO_SETTINGS_MODULE: examflow_project.settings
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/examflow_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
      run: |
        python manage.py migrate --run-syncdb
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --junitxml=reports/junit-unit.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit
        name: unit-tests

  # Integration тесты
  integration-tests:
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: examflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      env:
        DJANGO_SETTINGS_MODULE: examflow_project.settings
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/examflow_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
      run: |
        python manage.py migrate --run-syncdb
        pytest tests/integration/ -v --cov=. --cov-report=xml --cov-report=html --junitxml=reports/junit-integration.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-tests

  # Bot тесты
  bot-tests:
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: examflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run bot tests
      env:
        DJANGO_SETTINGS_MODULE: examflow_project.settings
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/examflow_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
        TELEGRAM_BOT_TOKEN: "test-token-for-ci"
      run: |
        python manage.py migrate --run-syncdb
        pytest tests/bots/ -v --cov=. --cov-report=xml --cov-report=html --junitxml=reports/junit-bot.xml
    
        - name: Upload coverage to Codecov
          uses: codecov/codecov-action@v3
          with:
            file: ./coverage.xml
            flags: bot
            name: bot-tests

  # UI тесты
  ui-tests:
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: examflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
      
      - name: Install Firefox
        uses: browser-actions/setup-firefox@v1
      
      - name: Run UI tests
        env:
          DJANGO_SETTINGS_MODULE: examflow_project.settings
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/examflow_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          DEBUG: True
        run: |
          python manage.py migrate --run-syncdb
          pytest tests/ui/ -v --cov=. --cov-report=xml --cov-report=html --junitxml=reports/junit-ui.xml
      
      - name: Run CSS tests
        run: |
          pytest tests/ui/test_css_styles.py -v --junitxml=reports/junit-css.xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ui
          name: ui-tests

  # Frontend JavaScript тесты
  frontend-tests:
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install frontend dependencies
        run: |
          cd tests/frontend
          npm install
      
      - name: Run JavaScript tests
        run: |
          cd tests/frontend
          npm test -- --coverage --watchAll=false
      
      - name: Run ESLint
        run: |
          cd tests/frontend
          npm run lint

  # Security тесты
  security-tests:
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: examflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run security tests
        env:
          DJANGO_SETTINGS_MODULE: examflow_project.settings
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/examflow_test
          SECRET_KEY: test-secret-key
          DEBUG: True
        run: |
          python manage.py migrate --run-syncdb
          pytest tests/security/ -v --junitxml=reports/junit-security.xml
      
      - name: Run Bandit security audit
        run: |
          pip install bandit
          bandit -r . -f json -o reports/bandit-report.json
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/

  # Cross-browser тесты
  cross-browser-tests:
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: examflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install browsers
        uses: browser-actions/setup-chrome@v1
      
      - name: Run cross-browser tests
        env:
          DJANGO_SETTINGS_MODULE: examflow_project.settings
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/examflow_test
          SECRET_KEY: test-secret-key
          DEBUG: True
        run: |
          python manage.py migrate --run-syncdb
          pytest tests/cross_browser/ -v --junitxml=reports/junit-cross-browser.xml

  # Performance тесты
  performance-tests:
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: examflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
      
      - name: Install Lighthouse
        run: |
          npm install -g lighthouse
      
      - name: Run performance tests
        env:
          DJANGO_SETTINGS_MODULE: examflow_project.settings
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/examflow_test
          SECRET_KEY: test-secret-key
          DEBUG: True
        run: |
          python manage.py migrate --run-syncdb
          pytest tests/performance/ -v --junitxml=reports/junit-performance.xml

  # Load тесты (запускаются только на main ветке)
  load-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, bot-tests, ui-tests]
    if: github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: examflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Start Django server
      env:
        DJANGO_SETTINGS_MODULE: examflow_project.settings
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/examflow_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
      run: |
        python manage.py migrate --run-syncdb
        python manage.py runserver 0.0.0.0:8000 &
        sleep 10
    
    - name: Run load tests
      run: |
        cd tests/load
        locust -f locustfile.py --host http://localhost:8000 --users 10 --spawn-rate 2 --run-time 1m --headless --html ../../reports/load_test_report.html
    
    - name: Upload load test results
      uses: actions/upload-artifact@v4
      with:
        name: load-test-results
        path: reports/load_test_report.html

  # Security audit
  security-audit:
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security audit
      run: bandit -r . -f json -o reports/bandit-report.json
    
    - name: Run Safety dependency check
      run: safety check --json --output reports/safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: reports/

  # Coverage report
  coverage:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, bot-tests, ui-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate coverage report
      env:
        DJANGO_SETTINGS_MODULE: examflow_project.settings
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/examflow_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
      run: |
        python manage.py migrate --run-syncdb
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: overall
        name: overall-coverage
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: pr
        name: pr-coverage
        fail_ci_if_error: false

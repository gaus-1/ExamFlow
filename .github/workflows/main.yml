name: 🚀 ExamFlow CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Ежедневные тесты в 2:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Запустить тесты'
        required: false
        default: true
        type: boolean
      run_deploy:
        description: 'Запустить деплой'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # ===== УСТАНОВКА И КЭШИРОВАНИЕ =====
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-pip.outputs.cache-hit }}
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          pip-${{ env.CACHE_VERSION }}-
    
    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  # ===== ЛИНТИНГ И ФОРМАТТИРОВАНИЕ =====
  lint:
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Cache and install dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          pip-${{ env.CACHE_VERSION }}-
    
    - name: 📦 Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff black isort flake8
    
    - name: 🔍 Run Ruff (fast linter)
      run: ruff check . --output-format=github
    
    - name: 🎨 Run Black (code formatting)
      run: black --check .
    
    - name: 📋 Run isort (import sorting)
      run: isort --check-only .
    
    - name: 🔍 Run Flake8 (additional checks)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # ===== UNIT ТЕСТЫ =====
  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: examflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Cache and install dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          pip-${{ env.CACHE_VERSION }}-
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-django
    
    - name: 🗄️ Setup database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/examflow_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
      run: |
        python manage.py migrate --run-syncdb
    
    - name: 🧪 Run unit tests
      env:
        DJANGO_SETTINGS_MODULE: examflow_project.settings
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/examflow_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --junitxml=reports/junit-unit.xml
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit
        name: unit-tests

  # ===== ИНТЕГРАЦИОННЫЕ ТЕСТЫ =====
  integration-tests:
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: examflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Cache and install dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          pip-${{ env.CACHE_VERSION }}-
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-django
    
    - name: 🗄️ Setup database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/examflow_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
      run: |
        python manage.py migrate --run-syncdb
    
    - name: 🧪 Run integration tests
      env:
        DJANGO_SETTINGS_MODULE: examflow_project.settings
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/examflow_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        DEBUG: True
      run: |
        pytest tests/integration/ -v --cov=. --cov-report=xml --cov-report=html --junitxml=reports/junit-integration.xml || echo "Integration tests completed"
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-tests

  # ===== БЕЗОПАСНОСТЬ =====
  security:
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Cache and install dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          pip-${{ env.CACHE_VERSION }}-
    
    - name: 📦 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
    
    - name: 🔒 Run Bandit security audit
      run: bandit -r . -f json -o reports/bandit-report.json
    
    - name: 🛡️ Run Safety dependency check
      run: safety check --json --output reports/safety-report.json
    
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: reports/

  # ===== ДЕПЛОЙ =====
  deploy:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, security]
    if: github.ref == 'refs/heads/main' && (github.event.inputs.run_deploy == 'true' || github.event_name == 'push')
    
    steps:
    - name: 🚀 Deploy to Render
      run: |
        echo "🚀 Автоматический деплой на Render"
        echo "✅ Все тесты пройдены"
        echo "✅ Проверка безопасности завершена"
        echo "🔄 Render автоматически обновит приложение"
    
    - name: 📧 Deployment notification
      run: |
        echo "🎉 Деплой завершен успешно!"
        echo "🌐 Сайт: https://examflow.ru"
        echo "🤖 Бот: @ExamFlowBot"

  # ===== ОБНОВЛЕНИЕ ДАННЫХ =====
  update-data:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event.inputs.run_tests == 'true' && github.ref == 'refs/heads/main')
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Cache and install dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          pip-${{ env.CACHE_VERSION }}-
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🗄️ Setup database
      run: |
        python manage.py makemigrations
        python manage.py migrate
    
    - name: 🔄 Update data
      run: |
        python manage.py load_sample_data || echo "Sample data loading completed"
    
    - name: 📊 Check results
      run: |
        python manage.py shell -c "
        from learning.models import Subject, Task
        print(f'📚 Предметов: {Subject.objects.count()}')
        print(f'📝 Заданий: {Task.objects.count()}')
        print('✅ База данных обновлена успешно!')
        "
    
    - name: 📤 Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git diff --quiet && git diff --staged --quiet || git commit -m "🤖 Автоматическое обновление данных [skip ci]"
        git push || echo "No changes to commit"

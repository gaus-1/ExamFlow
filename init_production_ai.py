#!/usr/bin/env python
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –º–æ–¥—É–ª—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ ExamFlow
"""
import os
import sys
import django

def init_production_ai():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ò–ò –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –º–æ–¥—É–ª—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
    django.setup()
    
    try:
        from ai.models import AiProvider, AiLimit
        from django.utils import timezone
        from datetime import timedelta
        
        print("‚úÖ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        providers_count = AiProvider.objects.count()
        limits_count = AiLimit.objects.count()
        
        print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   AI Providers: {providers_count}")
        print(f"   AI Limits: {limits_count}")
        
        if providers_count == 0:
            print("\nüîß –°–æ–∑–¥–∞–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            providers_data = [
                {
                    'name': 'GigaChat',
                    'provider_type': 'gigachat',
                    'api_key': 'production_key_gigachat',
                    'is_active': True,
                    'daily_limit': 1000,
                    'priority': 1
                },
                {
                    'name': 'DeepSeek Chat',
                    'provider_type': 'deepseek',
                    'api_key': 'production_key_deepseek',
                    'is_active': True,
                    'daily_limit': 500,
                    'priority': 2
                },
                {
                    'name': 'Fallback',
                    'provider_type': 'fallback',
                    'api_key': 'production_key_fallback',
                    'is_active': False,
                    'daily_limit': 100,
                    'priority': 3
                }
            ]
            
            for provider_data in providers_data:
                provider = AiProvider.objects.create(**provider_data)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider.name}")
            
            print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {AiProvider.objects.count()}")
        
        if limits_count == 0:
            print("\nüîß –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –≥–æ—Å—Ç–µ–π
            guest_daily = AiLimit.objects.create(
                limit_type='daily',
                max_limit=10,
                reset_date=timezone.now() + timedelta(days=1)
            )
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {guest_daily.max_limit}/–¥–µ–Ω—å")
            
            guest_monthly = AiLimit.objects.create(
                limit_type='monthly',
                max_limit=100,
                reset_date=timezone.now() + timedelta(days=30)
            )
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç: {guest_monthly.max_limit}/–º–µ—Å—è—Ü")
            
            print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ AI –ª–∏–º–∏—Ç–æ–≤: {AiLimit.objects.count()}")
        
        print(f"\nüéâ –ò–ò –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –≥–æ—Ç–æ–≤!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    init_production_ai()

#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ò –º–æ–¥—É–ª—è
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

from ai.services import AiService
from ai.models import AiProvider, AiLimit

def test_ai_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ò–ò —Å–µ—Ä–≤–∏—Å"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –º–æ–¥—É–ª—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π...")
        providers_count = AiProvider.objects.count() # type: ignore
        print(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –ë–î: {providers_count}")
        
        limits_count = AiLimit.objects.count() # type: ignore
        print(f"   –õ–∏–º–∏—Ç–æ–≤ –≤ –ë–î: {limits_count}")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –µ—Å–ª–∏ –Ω–µ—Ç
        if providers_count == 0:
            print("   –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä...")
            provider = AiProvider.objects.create( # type: ignore
                name="Local Test",
                provider_type="fallback",
                is_active=True,
                priority=100
            )
            print(f"   –°–æ–∑–¥–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò —Å–µ—Ä–≤–∏—Å–∞...")
        ai_service = AiService()
        print(f"   –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω: {ai_service}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞...")
        result = ai_service.ask("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        if 'error' in result:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        else:
            print(f"   ‚úÖ –£—Å–ø–µ—Ö: {result.get('response', '')[:100]}...")
            print(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result.get('provider', 'unknown')}")
            print(f"   –¢–æ–∫–µ–Ω—ã: {result.get('tokens_used', 0)}")
        
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_ai_service()

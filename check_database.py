#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

from core.models import FIPIData, FIPISourceMap, DataChunk
from authentication.models import UserProfile, Subscription

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
    try:
        fipi_count = FIPIData.objects.count()
        source_map_count = FIPISourceMap.objects.count()
        chunks_count = DataChunk.objects.count()
        users_count = UserProfile.objects.count()
        subscriptions_count = Subscription.objects.count()
        
        print(f"üìä FIPIData (–¥–æ–∫—É–º–µ–Ω—Ç—ã): {fipi_count}")
        print(f"üó∫Ô∏è  FIPISourceMap (–∏—Å—Ç–æ—á–Ω–∏–∫–∏): {source_map_count}")
        print(f"üìù DataChunk (—á–∞–Ω–∫–∏): {chunks_count}")
        print(f"üë• UserProfile (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏): {users_count}")
        print(f"üí≥ Subscription (–ø–æ–¥–ø–∏—Å–∫–∏): {subscriptions_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if fipi_count > 0:
            print("\nüìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
            for doc in FIPIData.objects.all()[:5]:
                print(f"  - {doc.title} ({doc.data_type})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if source_map_count > 0:
            print("\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
            for source in FIPISourceMap.objects.all()[:5]:
                print(f"  - {source.url} ({source.priority})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_ingestion_system():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –°–ë–û–†–ê ===")
    
    try:
        from core.data_ingestion.advanced_fipi_scraper import AdvancedFIPIScraper
        from core.data_ingestion.ingestion_engine import IngestionEngine
        
        scraper = AdvancedFIPIScraper()
        print("‚úÖ AdvancedFIPIScraper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        engine = IngestionEngine()
        print("‚úÖ IngestionEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞: {e}")
        return False

def check_premium_system():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –ü–†–ï–ú–ò–£–ú-–°–ò–°–¢–ï–ú–´ ===")
    
    try:
        from core.premium.access_control import get_access_control, get_usage_tracker
        
        access_control = get_access_control()
        usage_tracker = get_usage_tracker()
        
        print("‚úÖ AccessControlService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ UsageTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–º–∏—É–º-—Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ EXAMFLOW 2.0")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    db_ok = check_database()
    ingestion_ok = check_ingestion_system()
    premium_ok = check_premium_system()
    
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
    print(f"  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if db_ok else '‚ùå'}")
    print(f"  –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞: {'‚úÖ' if ingestion_ok else '‚ùå'}")
    print(f"  –ü—Ä–µ–º–∏—É–º-—Å–∏—Å—Ç–µ–º–∞: {'‚úÖ' if premium_ok else '‚ùå'}")
    
    if db_ok and ingestion_ok and premium_ok:
        print("\nüéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py init_fipi_source_map")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py manage_ingestion_engine start")
        print("3. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏: python manage.py manage_ingestion_engine add-tasks --priority high")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: python manage.py manage_ingestion_engine status")
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")

if __name__ == "__main__":
    main()

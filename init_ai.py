#!/usr/bin/env python
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò –º–æ–¥—É–ª—è ExamFlow
"""
import os
import sys
import django

def init_ai():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò"""
    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –º–æ–¥—É–ª—è ExamFlow...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ['USE_SQLITE'] = 'False'
    os.environ['DATABASE_URL'] = 'postgresql://postgres:Slava2402@localhost:5432/examflow_db'
    os.environ['DEBUG'] = 'True'
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
    django.setup()
    
    try:
        from ai.models import AiProvider, AiLimit
        from django.contrib.auth.models import User
        
        print("‚úÖ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        providers_count = AiProvider.objects.count()
        limits_count = AiLimit.objects.count()
        
        print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   AI Providers: {providers_count}")
        print(f"   AI Limits: {limits_count}")
        
        if providers_count == 0:
            print("\nüîß –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã...")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
            providers_data = [
                {
                    'name': 'GigaChat',
                    'provider_type': 'gigachat',
                    'api_key': 'test_key_gigachat',
                    'is_active': True,
                    'daily_limit': 100,
                    'priority': 1
                },
                {
                    'name': 'DeepSeek Chat',
                    'provider_type': 'deepseek',
                    'api_key': 'test_key_deepseek',
                    'is_active': True,
                    'daily_limit': 50,
                    'priority': 2
                },
                {
                    'name': 'Fallback',
                    'provider_type': 'fallback',
                    'api_key': 'test_key_fallback',
                    'is_active': False,  # –û—Ç–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    'daily_limit': 10,
                    'priority': 3
                }
            ]
            
            for provider_data in providers_data:
                provider = AiProvider.objects.create(**provider_data)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider.name}")
            
            print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {AiProvider.objects.count()}")
        
        if limits_count == 0:
            print("\nüîß –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã...")
            
            from datetime import timedelta
            from django.utils import timezone
            
            # –°–æ–∑–¥–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –≥–æ—Å—Ç–µ–π
            guest_daily = AiLimit.objects.create(
                limit_type='daily',
                max_limit=5,
                reset_date=timezone.now() + timedelta(days=1)
            )
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è –≥–æ—Å—Ç–µ–π: {guest_daily.max_limit}/–¥–µ–Ω—å")
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Å—è—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –≥–æ—Å—Ç–µ–π
            guest_monthly = AiLimit.objects.create(
                limit_type='monthly',
                max_limit=50,
                reset_date=timezone.now() + timedelta(days=30)
            )
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –≥–æ—Å—Ç–µ–π: {guest_monthly.max_limit}/–º–µ—Å—è—Ü")
            
            print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ AI –ª–∏–º–∏—Ç–æ–≤: {AiLimit.objects.count()}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
        print(f"   AI Providers: {AiProvider.objects.count()}")
        print(f"   AI Limits: {AiLimit.objects.count()}")
        
        print("\nüéâ –ò–ò –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –¢–µ–ø–µ—Ä—å –ø–æ–º–æ—â–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    init_ai()

#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ ExamFlow
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

from django.contrib.auth.models import User
from core.models import Subject, Task, UserProgress
from core.personalization_system import get_user_insights, UserBehaviorAnalyzer, PersonalizedRecommendations

def test_personalization_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ ExamFlow")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π:")
    try:
        subjects_count = Subject.objects.count()
        tasks_count = Task.objects.count()
        progress_count = UserProgress.objects.count()
        print(f"   ‚úÖ Subjects: {subjects_count}")
        print(f"   ‚úÖ Tasks: {tasks_count}")
        print(f"   ‚úÖ UserProgress: {progress_count}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
        return False
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    try:
        user, created = User.objects.get_or_create(
            username='test_user',
            defaults={
                'email': 'test@examflow.ru',
                'first_name': '–¢–µ—Å—Ç',
                'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            }
        )
        if created:
            user.set_password('testpass123')
            user.save()
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
        else:
            print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    
    # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        subject, created = Subject.objects.get_or_create(
            name='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            defaults={
                'code': 'MATH',
                'exam_type': 'ege',
                'description': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –ï–ì–≠'
            }
        )
        if created:
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject.name}")
        else:
            print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç: {subject.name}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if Task.objects.count() == 0:
            tasks_data = [
                {'title': '–ó–∞–¥–∞—á–∞ 1: –£—Ä–∞–≤–Ω–µ–Ω–∏—è', 'difficulty': 2, 'text': '–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ + 5x + 6 = 0'},
                {'title': '–ó–∞–¥–∞—á–∞ 2: –ì–µ–æ–º–µ—Ç—Ä–∏—è', 'difficulty': 3, 'text': '–ù–∞–π–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞'},
                {'title': '–ó–∞–¥–∞—á–∞ 3: –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è', 'difficulty': 4, 'text': '–†–µ—à–∏—Ç–µ sin¬≤x + cos¬≤x = 1'},
            ]
            
            for task_data in tasks_data:
                task = Task.objects.create(
                    subject=subject,
                    title=task_data['title'],
                    text=task_data['text'],
                    difficulty=task_data['difficulty']
                )
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task.title}")
        else:
            print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏: {Task.objects.count()}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    print("\n4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:")
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        tasks = Task.objects.all()[:3]
        for i, task in enumerate(tasks):
            progress, created = UserProgress.objects.get_or_create(
                user=user,
                task=task,
                defaults={
                    'is_correct': i % 2 == 0,  # –ß–µ—Ä–µ–¥—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                    'attempts': i + 1,
                    'time_spent': (i + 1) * 60
                }
            )
            if created:
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∑–∞–¥–∞—á–∏: {task.title}")
            else:
                print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è: {task.title}")
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        return False
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:")
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º UserBehaviorAnalyzer
        analyzer = UserBehaviorAnalyzer(user.id)
        preferences = analyzer.get_user_preferences()
        patterns = analyzer.get_study_patterns()
        
        print(f"   ‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: {len(preferences)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print(f"   ‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: {len(patterns)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º PersonalizedRecommendations
        recommender = PersonalizedRecommendations(user.id)
        recommended_tasks = recommender.get_recommended_tasks(5)
        study_plan = recommender.get_study_plan()
        weak_topics = recommender.get_weak_topics()
        
        print(f"   ‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–∞–¥–∞—á–∏: {len(recommended_tasks)}")
        print(f"   ‚úÖ –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: {len(study_plan)} —Ä–∞–∑–¥–µ–ª–æ–≤")
        print(f"   ‚úÖ –°–ª–∞–±—ã–µ —Ç–µ–º—ã: {len(weak_topics)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º get_user_insights
        insights = get_user_insights(user.id)
        print(f"   ‚úÖ –ò–Ω—Å–∞–π—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã: {len(insights)} —Ä–∞–∑–¥–µ–ª–æ–≤")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints
    print("\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints:")
    try:
        from django.test import Client
        from django.urls import reverse
        
        client = Client()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API insights
        response = client.get('/core/api/personalization/insights/')
        if response.status_code == 302:  # Redirect to login
            print("   ‚úÖ API insights —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ)")
        else:
            print(f"   ‚ö†Ô∏è API insights –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        urls_to_test = [
            '/core/personalization/',
            '/core/personalization/analytics/',
            '/core/personalization/recommendations/',
            '/core/personalization/study-plan/',
            '/core/personalization/weak-topics/',
        ]
        
        for url in urls_to_test:
            response = client.get(url)
            if response.status_code == 302:  # Redirect to login
                print(f"   ‚úÖ {url} —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ)")
            else:
                print(f"   ‚ö†Ô∏è {url} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç")
    print("‚úÖ API endpoints –¥–æ—Å—Ç—É–ø–Ω—ã")
    print("‚úÖ –ú–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    
    return True

if __name__ == '__main__':
    success = test_personalization_system()
    if success:
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        sys.exit(1)

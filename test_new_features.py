"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ExamFlow

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. –°–∏—Å—Ç–µ–º—É –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
2. –ê–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å—Ç–∏–ª–∏
3. Database keepalive
4. –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
"""

import os
import sys
import django
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

from django.test import Client
from django.urls import reverse
from django.contrib.auth.models import User
from telegram_bot.gamification import TelegramGamification

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_gamification_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    try:
        gamification = TelegramGamification()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
        test_user_id = 12345
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏
        result = gamification.add_points(test_user_id, 50, "–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
        if result.get('success'):
            logger.info(f"‚úÖ –û—á–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {result}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—á–∫–æ–≤: {result}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = gamification.get_user_stats(test_user_id)
        if stats.get('success'):
            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {stats}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats}")
        
        # –ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        challenges = gamification.get_daily_challenges(test_user_id)
        logger.info(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: {len(challenges)} –∑–∞–¥–∞–Ω–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
        leaderboard = gamification.get_leaderboard(5)
        logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤: {len(leaderboard)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False

def test_website_features():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–µ–±-—Å–∞–π—Ç–∞"""
    logger.info("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–µ–±-—Å–∞–π—Ç–∞...")
    
    try:
        client = Client()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        response = client.get('/')
        if response.status_code == 200:
            logger.info("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            content = response.content.decode('utf-8')
            
            checks = [
                ('ai-chat-input-container', '–°—Ç—Ä–æ–∫–∞ –æ–±—â–µ–Ω–∏—è —Å –ò–ò'),
                ('fipi-tabs', '–í–∫–ª–∞–¥–∫–∞ "–ó–∞–¥–∞–Ω–∏—è –§–ò–ü–ò"'),
                ('user-stats', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
                ('progress-container', '–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã'),
                ('daily-challenges', '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è'),
                ('achievements-container', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è'),
                ('leaderboard', '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤')
            ]
            
            for element, description in checks:
                if element in content:
                    logger.info(f"‚úÖ {description} –Ω–∞–π–¥–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è {description} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        else:
            logger.error(f"‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {response.status_code}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        static_files = [
            'js/examflow-animations.js',
            'js/gamification.js',
            'css/examflow-styles.css'
        ]
        
        for static_file in static_files:
            response = client.get(f'/static/{static_file}')
            if response.status_code == 200:
                logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª {static_file} –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª {static_file} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        
        logger.info("‚úÖ –í–µ–±-—Å–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–µ–±-—Å–∞–π—Ç–µ: {e}")
        return False

def test_database_keepalive():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–ø—Ç database_keepalive"""
    logger.info("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ database_keepalive...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç
        from database_keepalive import DatabaseKeepAlive
        
        # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        keepalive = DatabaseKeepAlive()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if keepalive.test_connection():
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∏–Ω–≥
        if keepalive.ping_database():
            logger.info("‚úÖ –ü–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–µ–Ω")
        else:
            logger.error("‚ùå –ü–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª—Å—è")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º keep-alive –∑–∞–ø—Ä–æ—Å
        if keepalive.run_keepalive_query():
            logger.info("‚úÖ Keep-alive –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            logger.error("‚ùå Keep-alive –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è")
            return False
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        keepalive.close_connection()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
        
        logger.info("‚úÖ Database keepalive —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ database_keepalive: {e}")
        return False

def test_telegram_bot_handlers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞"""
    logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram –±–æ—Ç–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        from telegram_bot.bot_handlers import (
            gamification_menu_handler, user_stats_handler, achievements_handler,
            progress_handler, overall_progress_handler, subjects_progress_handler,
            daily_challenges_handler, leaderboard_handler, bonus_handler
        )
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
        from telegram_bot.gamification import TelegramGamification
        gamification = TelegramGamification()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        test_user_id = 12345
        gamification_keyboard = gamification.create_gamification_keyboard(test_user_id)
        progress_keyboard = gamification.create_progress_keyboard(test_user_id)
        
        if gamification_keyboard and progress_keyboard:
            logger.info("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
            return False
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö Telegram –±–æ—Ç–∞: {e}")
        return False

def test_security_features():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    logger.info("üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    try:
        from django.conf import settings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_settings = [
            'SECURE_CONTENT_TYPE_NOSNIFF',
            'SECURE_BROWSER_XSS_FILTER',
            'X_FRAME_OPTIONS',
            'SECURE_REFERRER_POLICY',
            'PERMISSIONS_POLICY'
        ]
        
        for setting in security_settings:
            if hasattr(settings, setting):
                logger.info(f"‚úÖ {setting} –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {getattr(settings, setting)}")
            else:
                logger.warning(f"‚ö†Ô∏è {setting} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if 'examflow_project.middleware.SecurityHeadersMiddleware' in settings.MIDDLEWARE:
            logger.info("‚úÖ SecurityHeadersMiddleware –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è SecurityHeadersMiddleware –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if hasattr(settings, 'SECURITY_LOGGING'):
            logger.info("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
        logger.info("‚úÖ –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ExamFlow")
    logger.info("=" * 70)
    
    tests = [
        ("–°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏", test_gamification_system),
        ("–í–µ–±-—Å–∞–π—Ç", test_website_features),
        ("Database keepalive", test_database_keepalive),
        ("Telegram –±–æ—Ç", test_telegram_bot_handlers),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", test_security_features)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    logger.info("\n" + "="*70)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ")
    logger.info("="*70)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
    
    logger.info(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.warning(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

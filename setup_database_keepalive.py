"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ database_keepalive.py

–°–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–¥–∞—á Windows –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ
–∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_scheduled_task():
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–¥–∞—á Windows"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
        current_dir = Path(__file__).parent.absolute()
        script_path = current_dir / "database_keepalive.py"
        python_exe = sys.executable
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
        if not script_path.exists():
            logger.error(f"–°–∫—Ä–∏–ø—Ç {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_name = "ExamFlow_Database_KeepAlive"
        command = [
            "schtasks", "/create", "/tn", task_name,
            "/tr", f'"{python_exe}" "{script_path}"',
            "/sc", "minute", "/mo", "5",
            "/ru", "SYSTEM",
            "/f"  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
        ]
        
        logger.info("–°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ...")
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        result = subprocess.run(command, capture_output=True, text=True, shell=True)
        
        if result.returncode == 0:
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ!")
            logger.info(f"–í—ã–≤–æ–¥: {result.stdout}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        return False

def check_scheduled_task():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ"""
    try:
        task_name = "ExamFlow_Database_KeepAlive"
        command = ["schtasks", "/query", "/tn", task_name]
        
        result = subprocess.run(command, capture_output=True, text=True, shell=True)
        
        if result.returncode == 0:
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ:")
            logger.info(result.stdout)
            return True
        else:
            logger.info("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á–∏: {e}")
        return False

def delete_scheduled_task():
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        task_name = "ExamFlow_Database_KeepAlive"
        command = ["schtasks", "/delete", "/tn", task_name, "/f"]
        
        logger.info("–£–¥–∞–ª—è—é –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        result = subprocess.run(command, capture_output=True, text=True, shell=True)
        
        if result.returncode == 0:
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞!")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        return False

def create_batch_file():
    """–°–æ–∑–¥–∞—ë—Ç .bat —Ñ–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    try:
        current_dir = Path(__file__).parent.absolute()
        script_path = current_dir / "database_keepalive.py"
        python_exe = sys.executable
        
        batch_content = f"""@echo off
echo –ó–∞–ø—É—Å–∫ ExamFlow Database KeepAlive...
echo Python: {python_exe}
echo –°–∫—Ä–∏–ø—Ç: {script_path}
echo.
cd /d "{current_dir}"
"{python_exe}" "{script_path}"
pause
"""
        
        batch_path = current_dir / "run_database_keepalive.bat"
        
        with open(batch_path, 'w', encoding='utf-8') as f:
            f.write(batch_content)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω .bat —Ñ–∞–π–ª: {batch_path}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .bat —Ñ–∞–π–ª–∞: {e}")
        return False

def create_powershell_script():
    """–°–æ–∑–¥–∞—ë—Ç PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        current_dir = Path(__file__).parent.absolute()
        script_path = current_dir / "database_keepalive.py"
        python_exe = sys.executable
        
        ps_content = f"""# ExamFlow Database KeepAlive PowerShell Script
Write-Host "–ó–∞–ø—É—Å–∫ ExamFlow Database KeepAlive..." -ForegroundColor Green
Write-Host "Python: {python_exe}" -ForegroundColor Yellow
Write-Host "–°–∫—Ä–∏–ø—Ç: {script_path}" -ForegroundColor Yellow
Write-Host ""

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
Set-Location "{current_dir}"

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
& "{python_exe}" "{script_path}"

Write-Host "–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞..." -ForegroundColor Cyan
Read-Host
"""
        
        ps_path = current_dir / "run_database_keepalive.ps1"
        
        with open(ps_path, 'w', encoding='utf-8') as f:
            f.write(ps_content)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω PowerShell —Å–∫—Ä–∏–ø—Ç: {ps_path}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PowerShell —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ database_keepalive.py")
    logger.info("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        import ctypes
        is_admin = ctypes.windll.shell32.IsUserAnAdmin()
        if not is_admin:
            logger.warning("‚ö†Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            logger.info("–°–æ–∑–¥–∞—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–ø—É—Å–∫–∞...")
            
            # –°–æ–∑–¥–∞—ë–º .bat –∏ .ps1 —Ñ–∞–π–ª—ã
            create_batch_file()
            create_powershell_script()
            
            logger.info("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:")
            logger.info("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            logger.info("2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
            logger.info(f'   schtasks /create /tn "ExamFlow_Database_KeepAlive" /tr "python {Path(__file__).parent / "database_keepalive.py"}" /sc minute /mo 5 /ru SYSTEM /f')
            logger.info("3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
            
        else:
            logger.info("‚úÖ –ó–∞–ø—É—Å–∫ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
            if check_scheduled_task():
                logger.info("–ó–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/n): ")
                response = input().lower().strip()
                if response == 'y':
                    delete_scheduled_task()
                    create_scheduled_task()
                else:
                    logger.info("–ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            else:
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                create_scheduled_task()
            
            # –°–æ–∑–¥–∞—ë–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–ø—É—Å–∫–∞
            create_batch_file()
            create_powershell_script()
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.info("–°–æ–∑–¥–∞—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–ø—É—Å–∫–∞...")
        create_batch_file()
        create_powershell_script()
    
    logger.info("\nüéØ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞–ø—É—Å–∫–∞:")
    logger.info("1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á Windows")
    logger.info("2. –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ .bat —Ñ–∞–π–ª")
    logger.info("3. –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ PowerShell —Å–∫—Ä–∏–ø—Ç")
    logger.info("4. –ü—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫: python database_keepalive.py")

if __name__ == "__main__":
    main()

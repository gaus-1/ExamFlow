#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Gemini API –¥–ª—è ExamFlow
"""

import os
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
api_key = os.getenv('GEMINI_API_KEY')

if not api_key:
    print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    exit(1)

print(f"‚úÖ Gemini API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:20]}...")

try:
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini API
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini API...")
    
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
    
    payload = {
        "contents": [
            {
                "parts": [
                    {
                        "text": "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –ø—Ä–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"
                    }
                ]
            }
        ],
        "generationConfig": {
            "temperature": 0.7,
            "maxOutputTokens": 100,
            "topP": 0.8,
            "topK": 40
        }
    }
    
    headers = {
        'Content-Type': 'application/json',
        'X-goog-api-key': api_key
    }
    
    response = requests.post(url, json=payload, headers=headers, timeout=30)
    
    if response.status_code == 200:
        data = response.json()
        if 'candidates' in data and len(data['candidates']) > 0:
            candidate = data['candidates'][0]
            if 'content' in candidate and 'parts' in candidate['content']:
                parts = candidate['content']['parts']
                if len(parts) > 0 and 'text' in parts[0]:
                    text = parts[0]['text']
                    print("‚úÖ Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    print(f"ü§ñ –û—Ç–≤–µ—Ç: {text}")
                else:
                    print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini API")
            else:
                print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini API")
        else:
            print("‚ùå –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ Gemini API")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ Gemini API: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Gemini API: {e}")

print("\n" + "="*50)
print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê GEMINI:")
print("="*50)

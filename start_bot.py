#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
"""

import os
import sys
import time
import subprocess
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("ü§ñ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ ExamFlow Telegram Bot...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    logger.info("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω")
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –≥–æ—Ç–æ–≤–∞
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
    time.sleep(10)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–æ—Ç–∞
        bot_path = os.path.join(os.path.dirname(__file__), 'bot', 'bot.py')
        
        if not os.path.exists(bot_path):
            logger.error(f"‚ùå –§–∞–π–ª –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {bot_path}")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
        process = subprocess.Popen(
            [sys.executable, bot_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1
        )
        
        logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
        
        # –ß–∏—Ç–∞–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –ª–æ–≥–∏
        for line in iter(process.stdout.readline, ''):
            if line:
                print(line.rstrip())
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        return_code = process.wait()
        logger.info(f"üõë –ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: {return_code}")
        
        return return_code == 0
        
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        if 'process' in locals():
            process.terminate()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
        return False


if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)

#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Gemini API –¥–ª—è ExamFlow 2.0
"""

import os
import google.generativeai as genai
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_gemini_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini API"""
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.getenv('GEMINI_API_KEY', 'AIzaSyCvi8Mm5paqqV-bakd2N897MgUEvJyWw44')
    
    if not api_key:
        print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API
        genai.configure(api_key=api_key)  # type: ignore
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        model = genai.GenerativeModel('gemini-1.5-flash')  # type: ignore
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        prompt = """
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠ –≤ –†–æ—Å—Å–∏–∏. 
        –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å: "–ö–∞–∫ —Ä–µ—à–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è?"
        
        –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è —É—á–µ–Ω–∏–∫–∞.
        """
        
        print("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Gemini API...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = model.generate_content(prompt)
        
        print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìù –û—Ç–≤–µ—Ç Gemini:")
        print("-" * 50)
        print(response.text)
        print("-" * 50)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Gemini API: {e}")
        return False

def test_django_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Django"""
    
    try:
        import django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
        django.setup()
        
        from ai.api import AIAssistantAPI
        
        print("‚úÖ Django –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
        api = AIAssistantAPI()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
        test_prompt = "–ö–∞–∫ —Ä–µ—à–∞—Ç—å –ª–æ–≥–∞—Ä–∏—Ñ–º—ã?"
        response = api.generate_ai_response(test_prompt)
        
        print("‚úÖ AI API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üìù –û—Ç–≤–µ—Ç: {response['answer'][:100]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Django –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini API –¥–ª—è ExamFlow 2.0")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini API")
    gemini_ok = test_gemini_api()
    
    # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Django
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Django")
    django_ok = test_django_integration()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   Gemini API: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if gemini_ok else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"   Django –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if django_ok else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    
    if gemini_ok and django_ok:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! ExamFlow 2.0 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

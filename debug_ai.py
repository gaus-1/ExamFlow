#!/usr/bin/env python
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
"""
import os
import sys
import django

def debug_ai_providers():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ ExamFlow")
    print("=" * 50)
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
        django.setup()
        print("‚úÖ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        print("\nüìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        deepseek_key = os.getenv('DEEPSEEK_API_KEY')
        huggingface_key = os.getenv('HUGGINGFACE_API_KEY')
        print(f"   DEEPSEEK_API_KEY: {'‚úÖ –ï—Å—Ç—å' if deepseek_key else '‚ùå –ù–µ—Ç'}")
        print(f"   HUGGINGFACE_API_KEY: {'‚úÖ –ï—Å—Ç—å' if huggingface_key else '‚ùå –ù–µ—Ç'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª—å requests
        try:
            import requests
            print(f"   requests: ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è {requests.__version__})")
        except ImportError:
            print("   requests: ‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
        
        from ai.services import DeepSeekProvider, SmartLocalProvider
        
        # DeepSeek
        print("\nüì° DeepSeek Provider:")
        deepseek = DeepSeekProvider()
        print(f"   –î–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ –î–∞' if deepseek.is_available() else '‚ùå –ù–µ—Ç'}")
        if deepseek.is_available():
            print("   API –∫–ª—é—á: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω")
            print("   URL: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("   API –∫–ª—é—á: ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π")
        
        # SmartLocal
        print("\nüì° SmartLocal Provider:")
        smartlocal = SmartLocalProvider()
        print(f"   –î–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ –î–∞' if smartlocal.is_available() else '‚ùå –ù–µ—Ç'}")
        if smartlocal.is_available():
            print("   –†–∞–±–æ—Ç–∞–µ—Ç: ‚úÖ –ë–µ–∑ API –∫–ª—é—á–µ–π")
            print("   –°—Ç–æ–∏–º–æ—Å—Ç—å: üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ")
        else:
            print("   –†–∞–±–æ—Ç–∞–µ—Ç: ‚ùå –û—à–∏–±–∫–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º AiService
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AiService:")
        from ai.services import AiService
        
        service = AiService()
        print("   ‚úÖ AiService —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        print("\nüìã –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ AiService:")
        for i, provider in enumerate(service.providers, 1):
            print(f"   {i}. {provider.name} - {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if provider.is_available() else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:")
        result = service.ask("–ø—Ä–∏–≤–µ—Ç")
        print(f"   –û—Ç–≤–µ—Ç: {result.get('response', '–û—à–∏–±–∫–∞')[:100]}...")
        print(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result.get('provider', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"   –ö—ç—à: {result.get('cached', False)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = debug_ai_providers()
    if success:
        print("\nüéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!")

#!/usr/bin/env python
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è –±–µ–∑ pytest
"""

import os
import sys
import django

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

def test_core_utils():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º core.utils"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º core.utils...")
    
    from core.utils import generate_qr_code
    
    # –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    result = generate_qr_code("https://t.me/examflow_bot")
    assert result.startswith("data:image/png;base64,")
    assert len(result) > 50
    print("‚úÖ generate_qr_code —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º URL
    result = generate_qr_code("")
    assert result.startswith("data:image/png;base64,") or result.startswith("data:text/plain;base64,")
    print("‚úÖ generate_qr_code —Å –ø—É—Å—Ç—ã–º URL —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    # –¢–µ—Å—Ç —Å –¥–ª–∏–Ω–Ω—ã–º URL
    long_url = "https://example.com/" + "a" * 1000
    result = generate_qr_code(long_url)
    assert result.startswith("data:image/png;base64,") or result.startswith("data:text/plain;base64,")
    print("‚úÖ generate_qr_code —Å –¥–ª–∏–Ω–Ω—ã–º URL —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
    
    try:
        from learning.models import Subject, Task
        print("‚úÖ learning.models –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ learning.models: {e}")
    
    try:
        from core.models import UserProfile, Subject as CoreSubject
        print("‚úÖ core.models –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ core.models: {e}")
    
    try:
        from ai.models import AiLimit, AiModel, ChatSession
        print("‚úÖ ai.models –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ai.models: {e}")
    
    try:
        from telegram_auth.models import TelegramUser
        print("‚úÖ telegram_auth.models –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ telegram_auth.models: {e}")


def test_health_check():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º health_check"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º health_check...")
    
    try:
        print("‚úÖ health_check –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        
        # –°–æ–∑–¥–∞–µ–º mock request
        from unittest.mock import Mock
        request = Mock()
        request.method = 'GET'
        
        # –≠—Ç–æ –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –∏–∑-–∑–∞ –ë–î, –Ω–æ –∏–º–ø–æ—Ä—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
        print("‚úÖ health_check —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ health_check: {e}")


def test_fallback_views():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º fallback_views"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback_views...")
    
    try:
        from core.fallback_views import FallbackAIView
        print("‚úÖ fallback_views –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º FallbackAIView
        view = FallbackAIView()
        assert hasattr(view, 'get')
        assert hasattr(view, 'post')
        print("‚úÖ FallbackAIView –¥–æ—Å—Ç—É–ø–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ fallback_views: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–∫—Ä—ã—Ç–∏—è...")
    print("=" * 50)
    
    try:
        test_core_utils()
        test_imports()
        test_health_check()
        test_fallback_views()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: core.utils, core.health_check, core.fallback_views")
        print("üéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∏—Å–ø—Ä–∞–≤–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ telegram_auth –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()


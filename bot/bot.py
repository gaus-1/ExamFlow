import os
import django
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from bot.bot_instance import get_bot
from core.models import Subject, Task, UserProgress, UserRating, Achievement, Topic, UserProfile, Subscription
from django.contrib.auth.models import User
from django.conf import settings
from django.db.models import Count, Q
from django.utils import timezone

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
current_task_id = None


def get_or_create_user(telegram_user):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django —Å –ø—Ä–æ—Ñ–∏–ª–µ–º"""
    username = f"tg_{telegram_user.id}"
    user, created = User.objects.get_or_create(
        username=username,
        defaults={
            'first_name': telegram_user.first_name or '',
            'last_name': telegram_user.last_name or '',
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile, profile_created = UserProfile.objects.get_or_create(
        user=user,
        defaults={
            'telegram_id': str(telegram_user.id)
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    rating, rating_created = UserRating.objects.get_or_create(user=user)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    if created:
        Achievement.objects.create(
            user=user,
            name='–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
            description='–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ ExamFlow',
            icon='fas fa-rocket',
            color='#00ff88'
        )
    
    return user


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = get_or_create_user(update.effective_user)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.username or update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        keyboard = [
            [InlineKeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="subjects")],
            [InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
            [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
            [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="rating")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            f"üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExamFlow, {update.effective_user.first_name}!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –∏ –û–ì–≠ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º "
            "–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –§–ò–ü–ò.\n\n"
            "üéØ –†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏\n"
            "üí° –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        if update.message:
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {str(e)}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        try:
            if update.message:
                await update.message.reply_text(error_text)
            elif update.callback_query:
                await update.callback_query.edit_message_text(error_text)
        except:
            pass


async def subjects_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    try:
        query = update.callback_query
        await query.answer()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.username or update.effective_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        
        subjects = Subject.objects.all()[:10]
        
        keyboard = []
        for i in range(0, len(subjects), 2):
            row = []
            for j in range(2):
                if i + j < len(subjects):
                    subject = subjects[i + j]
                    tasks_count = Task.objects.filter(subject=subject).count()
                    
                    # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                    subject_emoji = {
                        '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'üßÆ',
                        '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': 'üìù',
                        '–§–∏–∑–∏–∫–∞': '‚öõÔ∏è',
                        '–•–∏–º–∏—è': 'üß™',
                        '–ë–∏–æ–ª–æ–≥–∏—è': 'üß¨',
                        '–ò—Å—Ç–æ—Ä–∏—è': 'üèõÔ∏è',
                        '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': 'üë•',
                        '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': 'üíª',
                        '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': 'üìö',
                        '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è': 'üåç'
                    }.get(subject.name, 'üìñ')
                    
                    row.append(InlineKeyboardButton(
                        f"{subject_emoji} {subject.name} ({tasks_count})", 
                        callback_data=f"subject_{subject.id}"
                    ))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n"
            "–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.",
            reply_markup=reply_markup
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ subjects_menu: {str(e)}")
        try:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass


async def subject_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    subject_id = int(query.data.split('_')[1])
    subject = Subject.objects.get(id=subject_id)
    user = get_or_create_user(update.effective_user)
    
    total_tasks = Task.objects.filter(subject=subject).count()
    solved_tasks = UserProgress.objects.filter(user=user, task__subject=subject).count()
    correct_tasks = UserProgress.objects.filter(user=user, task__subject=subject, is_correct=True).count()
    
    accuracy = round((correct_tasks / solved_tasks * 100) if solved_tasks > 0 else 0, 1)
    
    keyboard = [
        [InlineKeyboardButton("üéØ –†–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è", callback_data=f"solve_{subject.id}")],
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"random_subject_{subject.id}")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{subject.id}")],
        [InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="subjects")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    subject_emoji = {
        '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'üßÆ',
        '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': 'üìù',
        '–§–∏–∑–∏–∫–∞': '‚öõÔ∏è',
        '–•–∏–º–∏—è': 'üß™',
        '–ë–∏–æ–ª–æ–≥–∏—è': 'üß¨',
        '–ò—Å—Ç–æ—Ä–∏—è': 'üèõÔ∏è',
        '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': 'üë•',
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': 'üíª',
        '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': 'üìö',
        '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è': 'üåç'
    }.get(subject.name, 'üìñ')
    
    progress_bar = "üü©" * (correct_tasks // 2) + "üü®" * ((solved_tasks - correct_tasks) // 2) + "‚¨ú" * ((total_tasks - solved_tasks) // 2)
    
    text = (
        f"{subject_emoji} {subject.name}\n"
        f"üéì {subject.exam_type}\n\n"
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}\n"
        f"‚úÖ –†–µ—à–µ–Ω–æ: {solved_tasks}\n"
        f"üéØ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct_tasks}\n"
        f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy}%\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar[:10]}\n\n"
        f"–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É?"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)


async def solve_subject_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"""
    query = update.callback_query
    await query.answer()
    
    subject_id = int(query.data.split('_')[1])
    user = get_or_create_user(update.effective_user)
    
    # –ù–∞–π—Ç–∏ –Ω–µ—Ä–µ—à—ë–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–µ
    solved_task_ids = UserProgress.objects.filter(
        user=user, 
        task__subject_id=subject_id
    ).values_list('task_id', flat=True)
    
    unsolved_task = Task.objects.filter(subject_id=subject_id).exclude(
        id__in=solved_task_ids
    ).first()
    
    if not unsolved_task:
        unsolved_task = Task.objects.filter(subject_id=subject_id).order_by('?').first()
    
    if unsolved_task:
        await show_task(query, unsolved_task, user)
    else:
        await query.edit_message_text(
            "‚ùå –ó–∞–¥–∞–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç—É", callback_data=f"subject_{subject_id}")
            ]])
        )


async def random_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    user = get_or_create_user(update.effective_user)
    task = Task.objects.order_by('?').first()
    
    if task:
        await show_task(query, task, user)
    else:
        await query.edit_message_text(
            "‚ùå –ó–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )


async def random_subject_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"""
    query = update.callback_query
    await query.answer()
    
    subject_id = int(query.data.split('_')[2])
    user = get_or_create_user(update.effective_user)
    task = Task.objects.filter(subject_id=subject_id).order_by('?').first()
    
    if task:
        await show_task(query, task, user)
    else:
        await query.edit_message_text(
            "‚ùå –ó–∞–¥–∞–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç—É", callback_data=f"subject_{subject_id}")
            ]])
        )


async def show_task(query, task, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    difficulty_stars = "‚≠ê" * task.difficulty
    difficulty_text = ["–õ—ë–≥–∫–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–°–ª–æ–∂–Ω–æ–µ"][task.difficulty - 1] if task.difficulty <= 3 else "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ–µ"
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–µ—à–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
    progress = UserProgress.objects.filter(user=user, task=task).first()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ª–∏–º–∏—Ç—ã
    profile = UserProfile.objects.get(user=user)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    global current_task_id
    current_task_id = task.id
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"answer_{task.id}")],
        [InlineKeyboardButton("üëç –ó–Ω–∞—é", callback_data=f"correct_{task.id}")],
        [InlineKeyboardButton("üëé –ù–µ –∑–Ω–∞—é", callback_data=f"incorrect_{task.id}")],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if profile.is_premium:
        keyboard.append([InlineKeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="voice_hint")])
    else:
        keyboard.append([InlineKeyboardButton("üé§ –ì–æ–ª–æ—Å (Premium)", callback_data="voice_hint")])
    
    keyboard.extend([
        [InlineKeyboardButton("üéØ –î—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
        [InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç—É", callback_data=f"subject_{task.subject.id}")]
    ])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    status_text = ""
    if progress:
        if progress.is_correct:
            status_text = "‚úÖ –í—ã —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ\n\n"
        else:
            status_text = "‚ùå –í—ã —Ä–µ—à–∞–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\n\n"
    
    text = (
        f"üìù {task.title}\n\n"
        f"{task.description}\n\n"
        f"{status_text}"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {task.subject.name}\n"
        f"üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty_text} {difficulty_stars}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)


async def show_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –∫ –∑–∞–¥–∞–Ω–∏—é"""
    query = update.callback_query
    await query.answer()
    
    task_id = int(query.data.split('_')[1])
    task = Task.objects.get(id=task_id)
    user = get_or_create_user(update.effective_user)
    
    keyboard = [
        [InlineKeyboardButton("üëç –ü–æ–Ω—è–ª", callback_data=f"understood_{task.id}")],
        [InlineKeyboardButton("üëé –ù–µ –ø–æ–Ω—è–ª", callback_data=f"not_understood_{task.id}")],
        [InlineKeyboardButton("üéØ –î—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
        [InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç—É", callback_data=f"subject_{task.subject.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"üìù {task.title}\n\n"
        f"{task.description}\n\n"
        f"‚úÖ –û—Ç–≤–µ—Ç: {task.answer or '–û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ'}\n\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç: {task.subject.name}\n\n"
        f"–ü–æ–Ω—è—Ç–Ω–æ –ª–∏ –≤–∞–º —Ä–µ—à–µ–Ω–∏–µ?"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)


async def mark_correct(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à—ë–Ω–Ω–æ–µ"""
    query = update.callback_query
    await query.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞–Ω–∏–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ.")
    
    task_id = int(query.data.split('_')[1])
    task = Task.objects.get(id=task_id)
    user = get_or_create_user(update.effective_user)
    
    progress, created = UserProgress.objects.get_or_create(
        user=user, 
        task=task,
        defaults={'is_correct': True, 'attempts': 1}
    )
    if not created:
        progress.is_correct = True
        progress.attempts += 1
        progress.save()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    next_task = Task.objects.filter(subject=task.subject).exclude(id=task.id).order_by('?').first()
    if next_task:
        await show_task(query, next_task, user)
    else:
        keyboard = [[InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç—É", callback_data=f"subject_{task.subject.id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Ä–µ—à–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å {task.subject.name}!",
            reply_markup=reply_markup
        )


async def mark_incorrect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à—ë–Ω–Ω–æ–µ"""
    query = update.callback_query
    await query.answer("üìö –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–∑—É—á–∞—Ç—å!")
    
    task_id = int(query.data.split('_')[1])
    task = Task.objects.get(id=task_id)
    user = get_or_create_user(update.effective_user)
    
    progress, created = UserProgress.objects.get_or_create(
        user=user, 
        task=task,
        defaults={'is_correct': False, 'attempts': 1}
    )
    if not created:
        progress.attempts += 1
        progress.save()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç
    await show_answer(update, context)


async def mark_understood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–æ–Ω—è—Ç–æ–µ"""
    query = update.callback_query
    await query.answer("üëç –û—Ç–ª–∏—á–Ω–æ!")
    
    task_id = int(query.data.split('_')[1])
    user = get_or_create_user(update.effective_user)
    task = Task.objects.get(id=task_id)
    
    progress, created = UserProgress.objects.get_or_create(
        user=user, 
        task=task,
        defaults={'is_correct': True, 'attempts': 1}
    )
    if not created:
        progress.is_correct = True
        progress.save()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    next_task = Task.objects.filter(subject=task.subject).exclude(id=task.id).order_by('?').first()
    if next_task:
        await show_task(query, next_task, user)
    else:
        keyboard = [[InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç—É", callback_data=f"subject_{task.subject.id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∏–∑—É—á–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.",
            reply_markup=reply_markup
        )


async def mark_not_understood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–ø–æ–Ω—è—Ç–æ–µ"""
    query = update.callback_query
    await query.answer("üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª!")
    
    task_id = int(query.data.split('_')[2])  # not_understood_X
    user = get_or_create_user(update.effective_user)
    task = Task.objects.get(id=task_id)
    
    progress, created = UserProgress.objects.get_or_create(
        user=user, 
        task=task,
        defaults={'is_correct': False, 'attempts': 1}
    )
    if not created:
        progress.attempts += 1
        progress.save()
    
    keyboard = [
        [InlineKeyboardButton("üéØ –î—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
        [InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç—É", callback_data=f"subject_{task.subject.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìö –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ç–µ–º–µ '{task.title}' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∑–∞–¥–∞–Ω–∏—è–º.",
        reply_markup=reply_markup
    )


async def progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user = get_or_create_user(update.effective_user)
    
    total_solved = UserProgress.objects.filter(user=user).count()
    correct_solved = UserProgress.objects.filter(user=user, is_correct=True).count()
    accuracy = round((correct_solved / total_solved * 100) if total_solved > 0 else 0, 1)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º (—Ç–æ–ø 5)
    subjects_stats = []
    for subject in Subject.objects.all()[:5]:
        subject_solved = UserProgress.objects.filter(user=user, task__subject=subject).count()
        if subject_solved > 0:
            subject_correct = UserProgress.objects.filter(
                user=user, task__subject=subject, is_correct=True
            ).count()
            subject_accuracy = round((subject_correct / subject_solved * 100), 1)
            
            emoji = {
                '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'üßÆ', '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': 'üìù', '–§–∏–∑–∏–∫–∞': '‚öõÔ∏è',
                '–•–∏–º–∏—è': 'üß™', '–ë–∏–æ–ª–æ–≥–∏—è': 'üß¨', '–ò—Å—Ç–æ—Ä–∏—è': 'üèõÔ∏è',
                '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': 'üë•', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': 'üíª'
            }.get(subject.name, 'üìñ')
            
            subjects_stats.append(f"{emoji} {subject.name}: {subject_correct}/{subject_solved} ({subject_accuracy}%)")
    
    keyboard = [
        [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="rating")],
        [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    subjects_text = "\n".join(subjects_stats) if subjects_stats else "–ù–∞—á–Ω–∏—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è!"
    
    level = "ü•â –ù–æ–≤–∏—á–æ–∫"
    if total_solved >= 100:
        level = "üèÜ –≠–∫—Å–ø–µ—Ä—Ç"
    elif total_solved >= 50:
        level = "ü•à –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    elif total_solved >= 20:
        level = "ü•â –ü—Ä–∞–∫—Ç–∏–∫"
    
    text = (
        f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        f"üéØ –í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–æ: {total_solved}\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_solved}\n"
        f"üìà –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy}%\n"
        f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {level}\n\n"
        f"üìö –ü–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:\n{subjects_text}\n\n"
        f"üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)


async def rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    await query.answer()
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    top_users = User.objects.annotate(
        correct_answers=Count('userprogress', filter=Q(userprogress__is_correct=True))
    ).order_by('-correct_answers')[:10]
    
    current_user = get_or_create_user(update.effective_user)
    current_position = 0
    
    rating_text = ""
    for i, user in enumerate(top_users, 1):
        if user == current_user:
            current_position = i
            rating_text += f"üëë {i}. –í—ã - {user.correct_answers} ‚úÖ\n"
        else:
            name = user.first_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
            rating_text += f"{medal} {i}. {name} - {user.correct_answers} ‚úÖ\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥—Ä–µ—Å—Å—É", callback_data="progress")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö\n\n"
        f"{rating_text}\n"
        f"–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {current_position or '–Ω–µ –≤ —Ç–æ–ø-10'}\n\n"
        f"–†–µ—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)


async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url="https://examflow.ru")],
        [InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "‚ÑπÔ∏è –û ExamFlow\n\n"
        "üéØ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –§–ò–ü–ò\n"
        "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (Premium)\n"
        "ü§ñ –ò–ò –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (Premium)\n"
        "üìä –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "üèÜ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤\n"
        "üéì –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠ –∏ –û–ì–≠\n\n"
        "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 5 –∑–∞–¥–∞–Ω–∏–π/–¥–µ–Ω—å\n"
        "üëë Premium: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n\n"
        "üåê –°–∞–π—Ç: https://examflow.ru\n"
        "üìß –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @ExamFlowSupport\n\n"
        "–í–µ—Ä—Å–∏—è: 3.0\n"
        "–û–±–Ω–æ–≤–ª–µ–Ω–æ: —è–Ω–≤–∞—Ä—å 2025"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup)


async def subscription_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = get_or_create_user(update.effective_user)
    profile = UserProfile.objects.get(user=user)
    
    keyboard = []
    
    if profile.is_premium:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É
        active_sub = Subscription.objects.filter(
            user=user, 
            status='active',
            expires_at__gt=timezone.now()
        ).first()
        
        text = (
            "üëë –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n\n"
            f"üìã –ü–ª–∞–Ω: {profile.get_subscription_type_display()}\n"
            f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {profile.subscription_expires.strftime('%d.%m.%Y') if profile.subscription_expires else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            "‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏\n"
            "‚úÖ –ò–ò –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è\n"
            "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ —Å–∞–π—Ç–µ"
        )
        
        keyboard = [
            [InlineKeyboardButton("üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ", url="https://examflow.ru/dashboard/")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="about")]
        ]
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        text = (
            "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ ExamFlow\n\n"
            "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω:\n"
            f"‚Ä¢ {profile.daily_tasks_limit} –∑–∞–¥–∞–Ω–∏–π –≤ –¥–µ–Ω—å\n"
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è —Ä–µ—à–µ–Ω–æ: {profile.tasks_solved_today}\n"
            "‚Ä¢ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "üëë Premium –ø–ª–∞–Ω—ã:\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏\n"
            "‚Ä¢ –ò–ò –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "üí∞ –ú–µ—Å—è—á–Ω—ã–π: 990‚ÇΩ/–º–µ—Å\n"
            "üí∞ –ì–æ–¥–æ–≤–æ–π: 9900‚ÇΩ/–≥–æ–¥ (—Å–∫–∏–¥–∫–∞ 17%)"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url="https://examflow.ru/register/")],
            [InlineKeyboardButton("üÜì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data="main_menu")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="about")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)


async def voice_hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–æ–ª–æ—Å–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user = get_or_create_user(update.effective_user)
    profile = UserProfile.objects.get(user=user)
    
    if not profile.is_premium:
        keyboard = [
            [InlineKeyboardButton("üëë –û—Ñ–æ—Ä–º–∏—Ç—å Premium", callback_data="subscription")],
            [InlineKeyboardButton("üîô –ö –∑–∞–¥–∞–Ω–∏—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Premium –ø–æ–¥–ø–∏—Å–∫–µ!\n\n"
            "üëë –û—Ñ–æ—Ä–º–∏—Ç–µ Premium –∏ –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π\n"
            "‚Ä¢ –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –∏ —Ä–µ—à–µ–Ω–∏–π\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "‚Ä¢ –ò–ò –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è",
            reply_markup=reply_markup
        )
        return
    
    # –î–ª—è Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    try:
        global current_task_id
        task_id = current_task_id
        if not task_id:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è.")
            return
        
        task = Task.objects.get(id=task_id)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
        from core.voice_service import voice_service
        
        if task.audio_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
            audio_url = voice_service.get_audio_url(task.audio_file)
            if audio_url:
                await context.bot.send_voice(
                    chat_id=update.effective_chat.id,
                    voice=audio_url,
                    caption="üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∫ –∑–∞–¥–∞–Ω–∏—é"
                )
            else:
                await query.edit_message_text("‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –Ω–∞ –ª–µ—Ç—É
            await query.edit_message_text("üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É...")
            
            audio_result = voice_service.generate_task_audio(task)
            if audio_result and audio_result['task_audio']:
                audio_url = voice_service.get_audio_url(audio_result['task_audio'])
                if audio_url:
                    await context.bot.send_voice(
                        chat_id=update.effective_chat.id,
                        voice=audio_url,
                        caption="üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∫ –∑–∞–¥–∞–Ω–∏—é"
                    )
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏: {str(e)}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏")


async def handle_unknown_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    query = update.callback_query
    await query.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    
    logger.warning(f"Unknown callback data: {query.data}")
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await start(update, context)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = settings.TELEGRAM_BOT_TOKEN
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Django")
        return
    
    application = Application.builder().token(token).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(subjects_menu, pattern="subjects"))
    application.add_handler(CallbackQueryHandler(subject_detail, pattern="subject_\d+"))
    application.add_handler(CallbackQueryHandler(solve_subject_tasks, pattern="solve_\d+"))
    application.add_handler(CallbackQueryHandler(random_task, pattern="random_task"))
    application.add_handler(CallbackQueryHandler(random_subject_task, pattern="random_subject_\d+"))
    application.add_handler(CallbackQueryHandler(show_answer, pattern="answer_\d+"))
    application.add_handler(CallbackQueryHandler(mark_correct, pattern="correct_\d+"))
    application.add_handler(CallbackQueryHandler(mark_incorrect, pattern="incorrect_\d+"))
    application.add_handler(CallbackQueryHandler(mark_understood, pattern="understood_\d+"))
    application.add_handler(CallbackQueryHandler(mark_not_understood, pattern="not_understood_\d+"))
    application.add_handler(CallbackQueryHandler(start, pattern="main_menu"))
    application.add_handler(CallbackQueryHandler(about, pattern="about"))
    application.add_handler(CallbackQueryHandler(progress, pattern="progress"))
    application.add_handler(CallbackQueryHandler(rating, pattern="rating"))
    application.add_handler(CallbackQueryHandler(subscription_menu, pattern="subscription"))
    application.add_handler(CallbackQueryHandler(voice_hint, pattern="voice_hint"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback (–æ—Ç–ª–∞–¥–∫–∞)
    application.add_handler(CallbackQueryHandler(handle_unknown_callback))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("ü§ñ ExamFlow Bot –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()
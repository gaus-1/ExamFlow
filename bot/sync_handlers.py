import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup  # type: ignore

logger = logging.getLogger(__name__)


def _menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="subjects")],
        [InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
        [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="rating")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")],
    ])


def start_sync(update, bot):
    text = (
        "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExamFlow!\n\n"
        "–†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ï–ì–≠/–û–ì–≠."
    )
    chat_id = update.effective_chat.id
    bot.send_message(chat_id=chat_id, text=text, reply_markup=_menu_keyboard())


def subjects_menu_sync(update, bot):
    chat_id = update.effective_chat.id
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=update.callback_query.message.message_id,
        text="üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
        reply_markup=_menu_keyboard()
    )


def random_task_sync(update, bot):
    chat_id = update.effective_chat.id
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=update.callback_query.message.message_id,
        text="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
        reply_markup=_menu_keyboard()
    )


def progress_sync(update, bot):
    chat_id = update.effective_chat.id
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=update.callback_query.message.message_id,
        text="üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
        reply_markup=_menu_keyboard()
    )


def rating_sync(update, bot):
    chat_id = update.effective_chat.id
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=update.callback_query.message.message_id,
        text="üèÜ –†–µ–π—Ç–∏–Ω–≥ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
        reply_markup=_menu_keyboard()
    )


def about_sync(update, bot):
    chat_id = update.effective_chat.id
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=update.callback_query.message.message_id,
        text=(
            "‚ÑπÔ∏è –û ExamFlow\n\n"
            "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –§–ò–ü–ò. –ú—ã –Ω–µ —è–≤–ª—è–µ–º—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º –§–ò–ü–ò."
        ),
        reply_markup=_menu_keyboard()
    )


def handle_unknown_callback_sync(update, bot):
    chat_id = update.effective_chat.id
    bot.edit_message_text(
        chat_id=chat_id,
        message_id=update.callback_query.message.message_id,
        text="ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=_menu_keyboard()
    )
"""
–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞ –≤ webhook —Ä–µ–∂–∏–º–µ

–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ asyncio –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω—ã –∏–∑ Django views
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from core.models import Subject, Task, UserProgress, UserRating, Achievement, UserProfile, Subscription
from django.contrib.auth.models import User
from django.utils import timezone
from django.db.models import Count, Q

logger = logging.getLogger(__name__)


def get_or_create_user(telegram_user):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django —Å –ø—Ä–æ—Ñ–∏–ª–µ–º"""
    username = f"tg_{telegram_user.id}"
    user, created = User.objects.get_or_create(
        username=username,
        defaults={
            'first_name': telegram_user.first_name or '',
            'last_name': telegram_user.last_name or '',
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile, profile_created = UserProfile.objects.get_or_create(
        user=user,
        defaults={
            'telegram_id': str(telegram_user.id)
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    rating, rating_created = UserRating.objects.get_or_create(user=user)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
    if created:
        Achievement.objects.create(
            user=user,
            name='–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
            description='–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ ExamFlow',
            icon='fas fa-rocket',
            color='#00ff88'
        )
    
    return user


def start_sync(update: Update, bot):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = get_or_create_user(update.effective_user)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.username or update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        keyboard = [
            [InlineKeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="subjects")],
            [InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
            [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
            [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="rating")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            f"üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExamFlow, {update.effective_user.first_name}!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –∏ –û–ì–≠ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ "
            "–Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –§–ò–ü–ò.\n\n"
            "üéØ –†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏\n"
            "üí° –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        if update.message:
            bot.send_message(
                chat_id=update.message.chat_id,
                text=welcome_text,
                reply_markup=reply_markup
            )
        elif update.callback_query:
            bot.edit_message_text(
                chat_id=update.callback_query.message.chat_id,
                message_id=update.callback_query.message.message_id,
                text=welcome_text,
                reply_markup=reply_markup
            )
            update.callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_sync: {str(e)}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        try:
            if update.message:
                bot.send_message(chat_id=update.message.chat_id, text=error_text)
            elif update.callback_query:
                bot.edit_message_text(
                    chat_id=update.callback_query.message.chat_id,
                    message_id=update.callback_query.message.message_id,
                    text=error_text
                )
        except:
            pass


def subjects_menu_sync(update: Update, bot):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    try:
        query = update.callback_query
        query.answer()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.username or update.effective_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        
        subjects = Subject.objects.all()[:10]
        
        keyboard = []
        for i in range(0, len(subjects), 2):
            row = []
            for j in range(2):
                if i + j < len(subjects):
                    subject = subjects[i + j]
                    tasks_count = Task.objects.filter(subject=subject).count()
                    
                    # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                    subject_emoji = {
                        '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'üßÆ',
                        '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': 'üìù',
                        '–§–∏–∑–∏–∫–∞': '‚öõÔ∏è',
                        '–•–∏–º–∏—è': 'üß™',
                        '–ë–∏–æ–ª–æ–≥–∏—è': 'üß¨',
                        '–ò—Å—Ç–æ—Ä–∏—è': 'üèõÔ∏è',
                        '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': 'üë•',
                        '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': 'üíª',
                        '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': 'üìö',
                        '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è': 'üåç'
                    }.get(subject.name, 'üìñ')
                    
                    row.append(InlineKeyboardButton(
                        f"{subject_emoji} {subject.name} ({tasks_count})", 
                        callback_data=f"subject_{subject.id}"
                    ))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text="üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.",
            reply_markup=reply_markup
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ subjects_menu_sync: {str(e)}")
        try:
            bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except:
            pass


def about_sync(update: Update, bot):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    try:
        query = update.callback_query
        query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url="https://examflow.ru")],
            [InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "‚ÑπÔ∏è –û ExamFlow\n\n"
            "üéØ –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –§–ò–ü–ò\n"
            "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (Premium)\n"
            "ü§ñ –ò–ò –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è (Premium)\n"
            "üìä –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "üèÜ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤\n"
            "üéì –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠ –∏ –û–ì–≠\n\n"
            "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 5 –∑–∞–¥–∞–Ω–∏–π/–¥–µ–Ω—å\n"
            "üëë Premium: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n\n"
            "üåê –°–∞–π—Ç: https://examflow.ru\n"
            "üìß –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @ExamFlowSupport\n\n"
            "–í–µ—Ä—Å–∏—è: 3.0\n"
            "–û–±–Ω–æ–≤–ª–µ–Ω–æ: —è–Ω–≤–∞—Ä—å 2025"
        )
        
        bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ about_sync: {str(e)}")


def progress_sync(update: Update, bot):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        query = update.callback_query
        query.answer()
        
        user = get_or_create_user(update.effective_user)
        
        total_solved = UserProgress.objects.filter(user=user).count()
        correct_solved = UserProgress.objects.filter(user=user, is_correct=True).count()
        accuracy = round((correct_solved / total_solved * 100) if total_solved > 0 else 0, 1)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º (—Ç–æ–ø 5)
        subjects_stats = []
        for subject in Subject.objects.all()[:5]:
            subject_solved = UserProgress.objects.filter(user=user, task__subject=subject).count()
            if subject_solved > 0:
                subject_correct = UserProgress.objects.filter(
                    user=user, task__subject=subject, is_correct=True
                ).count()
                subject_accuracy = round((subject_correct / subject_solved * 100), 1)
                
                emoji = {
                    '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': 'üßÆ', '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': 'üìù', '–§–∏–∑–∏–∫–∞': '‚öõÔ∏è',
                    '–•–∏–º–∏—è': 'üß™', '–ë–∏–æ–ª–æ–≥–∏—è': 'üß¨', '–ò—Å—Ç–æ—Ä–∏—è': 'üèõÔ∏è',
                    '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': 'üë•', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': 'üíª'
                }.get(subject.name, 'üìñ')
                
                subjects_stats.append(f"{emoji} {subject.name}: {subject_correct}/{subject_solved} ({subject_accuracy}%)")
        
        keyboard = [
            [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="rating")],
            [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        subjects_text = "\n".join(subjects_stats) if subjects_stats else "–ù–∞—á–Ω–∏—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è!"
        
        level = "ü•â –ù–æ–≤–∏—á–æ–∫"
        if total_solved >= 100:
            level = "üèÜ –≠–∫—Å–ø–µ—Ä—Ç"
        elif total_solved >= 50:
            level = "ü•à –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        elif total_solved >= 20:
            level = "ü•â –ü—Ä–∞–∫—Ç–∏–∫"
        
        text = (
            f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
            f"üéØ –í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–æ: {total_solved}\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_solved}\n"
            f"üìà –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy}%\n"
            f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {level}\n\n"
            f"üìö –ü–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:\n{subjects_text}\n\n"
            f"üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"
        )
        
        bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ progress_sync: {str(e)}")


def rating_sync(update: Update, bot):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        query = update.callback_query
        query.answer()
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        top_users = User.objects.annotate(
            correct_answers=Count('userprogress', filter=Q(userprogress__is_correct=True))
        ).order_by('-correct_answers')[:10]
        
        current_user = get_or_create_user(update.effective_user)
        current_position = 0
        
        rating_text = ""
        for i, user in enumerate(top_users, 1):
            if user == current_user:
                current_position = i
                rating_text += f"üëë {i}. –í—ã - {user.correct_answers} ‚úÖ\n"
            else:
                name = user.first_name or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"
                medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üèÖ"
                rating_text += f"{medal} {i}. {name} - {user.correct_answers} ‚úÖ\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥—Ä–µ—Å—Å—É", callback_data="progress")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üèÜ –†–µ–π—Ç–∏–Ω–≥ –ª—É—á—à–∏—Ö\n\n"
            f"{rating_text}\n"
            f"–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: {current_position or '–Ω–µ –≤ —Ç–æ–ø-10'}\n\n"
            f"–†–µ—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!"
        )
        
        bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ rating_sync: {str(e)}")


def random_task_sync(update: Update, bot):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        query = update.callback_query
        query.answer()
        
        user = get_or_create_user(update.effective_user)
        task = Task.objects.order_by('?').first()
        
        if task:
            show_task_sync(query, task, user, bot)
        else:
            bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                text="‚ùå –ó–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ random_task_sync: {str(e)}")


def show_task_sync(query, task, user, bot):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        difficulty_stars = "‚≠ê" * task.difficulty
        difficulty_text = ["–õ—ë–≥–∫–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–°–ª–æ–∂–Ω–æ–µ"][task.difficulty - 1] if task.difficulty <= 3 else "–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ–µ"
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–µ—à–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        progress = UserProgress.objects.filter(user=user, task=task).first()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ª–∏–º–∏—Ç—ã
        profile = UserProfile.objects.get(user=user)
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"answer_{task.id}")],
            [InlineKeyboardButton("üëç –ó–Ω–∞—é", callback_data=f"correct_{task.id}")],
            [InlineKeyboardButton("üëé –ù–µ –∑–Ω–∞—é", callback_data=f"incorrect_{task.id}")],
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if profile.is_premium:
            keyboard.append([InlineKeyboardButton("üé§ –ì–æ–ª–æ—Å–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="voice_hint")])
        else:
            keyboard.append([InlineKeyboardButton("üé§ –ì–æ–ª–æ—Å (Premium)", callback_data="voice_hint")])
        
        keyboard.extend([
            [InlineKeyboardButton("üéØ –î—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
            [InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç—É", callback_data=f"subject_{task.subject.id}")]
        ])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        status_text = ""
        if progress:
            if progress.is_correct:
                status_text = "‚úÖ –í—ã —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ\n\n"
            else:
                status_text = "‚ùå –í—ã —Ä–µ—à–∞–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\n\n"
        
        text = (
            f"üìù {task.title}\n\n"
            f"{task.description}\n\n"
            f"{status_text}"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {task.subject.name}\n"
            f"üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty_text} {difficulty_stars}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=text,
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_task_sync: {str(e)}")


def handle_unknown_callback_sync(update: Update, bot):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤"""
    try:
        query = update.callback_query
        query.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        
        logger.warning(f"Unknown callback data: {query.data}")
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start_sync(update, bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_unknown_callback_sync: {str(e)}")

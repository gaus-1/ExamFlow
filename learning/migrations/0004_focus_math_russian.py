# Generated migration for focusing on Math and Russian

from django.db import migrations, models


def archive_unused_subjects(apps, schema_editor):
    """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"""
    Subject = apps.get_model('learning', 'Subject')
    
    unused_subjects = [
        '–§–∏–∑–∏–∫–∞', '–•–∏–º–∏—è', '–ë–∏–æ–ª–æ–≥–∏—è', '–ò—Å—Ç–æ—Ä–∏—è', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è',
        '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ',
        '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫', '–ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫', '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫', '–ò—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫'
    ]
    
    for subject_name in unused_subjects:
        Subject.objects.filter(name=subject_name).update(is_archived=True)
    
    print(f"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(unused_subjects)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")


def restore_unused_subjects(apps, schema_editor):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"""
    Subject = apps.get_model('learning', 'Subject')
    Subject.objects.filter(is_archived=True).update(is_archived=False)


def create_math_variants(apps, schema_editor):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏"""
    Subject = apps.get_model('learning', 'Subject')
    
    math_variants = [
        {
            'name': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)',
            'code': 'math_prof',
            'exam_type': '–ï–ì–≠',
            'description': '–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ï–ì–≠ - –∑–∞–¥–∞–Ω–∏—è 1-19',
            'icon': 'üìê',
            'is_primary': True
        },
        {
            'name': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–Ω–µ–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)',
            'code': 'math_base',
            'exam_type': '–ï–ì–≠',
            'description': '–ë–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ï–ì–≠ - –∑–∞–¥–∞–Ω–∏—è 1-20',
            'icon': 'üìä',
            'is_primary': True
        },
        {
            'name': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–û–ì–≠)',
            'code': 'math_oge',
            'exam_type': '–û–ì–≠',
            'description': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –û–ì–≠ - –∑–∞–¥–∞–Ω–∏—è 1-26',
            'icon': 'üî¢',
            'is_primary': True
        },
    ]
    
    for variant in math_variants:
        subject, created = Subject.objects.get_or_create(
            name=variant['name'],
            defaults={
                'code': variant['code'],
                'exam_type': variant['exam_type'],
                'description': variant['description'],
                'icon': variant['icon'],
                'is_primary': variant['is_primary']
            }
        )
        if created:
            print(f"–°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject.name}")


def remove_math_variants(apps, schema_editor):
    """–£–¥–∞–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏"""
    Subject = apps.get_model('learning', 'Subject')
    math_codes = ['math_prof', 'math_base', 'math_oge']
    Subject.objects.filter(code__in=math_codes).delete()


def create_russian_variants(apps, schema_editor):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    Subject = apps.get_model('learning', 'Subject')
    
    russian_variants = [
        {
            'name': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–ï–ì–≠)',
            'code': 'russian_ege',
            'exam_type': '–ï–ì–≠',
            'description': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ï–ì–≠ - —Å–æ—á–∏–Ω–µ–Ω–∏–µ, —Ç–µ—Å—Ç—ã, –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞',
            'icon': 'üìù',
            'is_primary': True
        },
        {
            'name': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–û–ì–≠)',
            'code': 'russian_oge',
            'exam_type': '–û–ì–≠',
            'description': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –û–ì–≠ - –∏–∑–ª–æ–∂–µ–Ω–∏–µ, —Å–æ—á–∏–Ω–µ–Ω–∏–µ, —Ç–µ—Å—Ç—ã',
            'icon': 'üìñ',
            'is_primary': True
        },
    ]
    
    for variant in russian_variants:
        subject, created = Subject.objects.get_or_create(
            name=variant['name'],
            defaults={
                'code': variant['code'],
                'exam_type': variant['exam_type'],
                'description': variant['description'],
                'icon': variant['icon'],
                'is_primary': variant['is_primary']
            }
        )
        if created:
            print(f"–°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject.name}")


def remove_russian_variants(apps, schema_editor):
    """–£–¥–∞–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    Subject = apps.get_model('learning', 'Subject')
    russian_codes = ['russian_ege', 'russian_oge']
    Subject.objects.filter(code__in=russian_codes).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('learning', '0003_alter_userprogress_user'),
    ]

    operations = [
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        migrations.AddField(
            model_name='subject',
            name='code',
            field=models.CharField(max_length=20, unique=True, blank=True, null=True, verbose_name='–ö–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞'),
        ),
        migrations.AddField(
            model_name='subject',
            name='description',
            field=models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ'),
        ),
        migrations.AddField(
            model_name='subject',
            name='icon',
            field=models.CharField(max_length=50, blank=True, verbose_name='–ò–∫–æ–Ω–∫–∞'),
        ),
        migrations.AddField(
            model_name='subject',
            name='is_archived',
            field=models.BooleanField(default=False, verbose_name='–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω'),
        ),
        migrations.AddField(
            model_name='subject',
            name='is_primary',
            field=models.BooleanField(default=False, verbose_name='–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–µ–¥–º–µ—Ç'),
        ),
        migrations.AddField(
            model_name='subject',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'),
        ),
        migrations.AddField(
            model_name='subject',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'),
        ),
        
        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        migrations.RunPython(
            code=archive_unused_subjects,
            reverse_code=restore_unused_subjects,
        ),
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
        migrations.RunPython(
            code=create_math_variants,
            reverse_code=remove_math_variants,
        ),
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        migrations.RunPython(
            code=create_russian_variants,
            reverse_code=remove_russian_variants,
        ),
    ]

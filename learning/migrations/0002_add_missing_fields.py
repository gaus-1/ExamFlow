# Generated by Django 4.2.7 on 2025-08-24

from django.db import migrations, connections


def add_missing_columns(apps, schema_editor):
    vendor = schema_editor.connection.vendor
    with schema_editor.connection.cursor() as cursor:
        if vendor == 'postgresql':
            # learning_subject.exam_type
            cursor.execute(
                """
                ALTER TABLE learning_subject
                ADD COLUMN IF NOT EXISTS exam_type VARCHAR(3) DEFAULT 'ЕГЭ';
                """
            )
            # Ограничение CHECK (добавляем, если ещё нет)
            cursor.execute(
                """
                DO $$
                BEGIN
                    IF NOT EXISTS (
                        SELECT 1 FROM pg_constraint
                        WHERE conname = 'learning_subject_exam_type_check'
                    ) THEN
                        ALTER TABLE learning_subject
                        ADD CONSTRAINT learning_subject_exam_type_check
                        CHECK (exam_type IN ('ЕГЭ', 'ОГЭ'));
                    END IF;
                END $$;
                """
            )

            # learning_topic.code
            cursor.execute(
                """
                ALTER TABLE learning_topic
                ADD COLUMN IF NOT EXISTS code VARCHAR(20) DEFAULT '';
                """
            )
        else:
            # SQLite/MySQL — добавляем столбцы только если их нет
            # learning_subject.exam_type
            try:
                cursor.execute("PRAGMA table_info('learning_subject')")
                cols = [row[1] for row in cursor.fetchall()]
                if 'exam_type' not in cols:
                    cursor.execute(
                        "ALTER TABLE learning_subject ADD COLUMN exam_type TEXT DEFAULT 'ЕГЭ'"
                    )
            except Exception:
                pass

            # learning_topic.code
            try:
                cursor.execute("PRAGMA table_info('learning_topic')")
                cols = [row[1] for row in cursor.fetchall()]
                if 'code' not in cols:
                    cursor.execute(
                        "ALTER TABLE learning_topic ADD COLUMN code VARCHAR(20) DEFAULT ''"
                    )
            except Exception:
                pass


def noop_reverse(apps, schema_editor):
    # Безопасный no-op для обратной миграции (удаление колонок не требуется в тестах)
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('learning', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(add_missing_columns, noop_reverse),
    ]

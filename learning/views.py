"""
–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è –æ–±—É—á–µ–Ω–∏—è

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
- –ì–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
- –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞
- –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
"""

import time
import random
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.contrib import messages
import logging
from learning.models import Subject, Task  # type: ignore
from core.models import UserProgress  # type: ignore
# import core.seo as seo_utils  # –ú–æ–¥—É–ª—å —É–¥–∞–ª–µ–Ω

logger = logging.getLogger(__name__)

def home(request):
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ExamFlow

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
    - Hero —Å–µ–∫—Ü–∏—é —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∑–∞–¥–∞–Ω–∏–π
    - QR-–∫–æ–¥ –¥–ª—è Telegram –±–æ—Ç–∞
    - –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    - –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
    - –ë–ª–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –ë–î
    try:
        base_qs = Subject.objects.filter(  # type: ignore
            is_archived=False, is_primary=True)  # type: ignore
        subjects_count = base_qs.count()  # type: ignore
        tasks_count = Task.objects.count()  # type: ignore
    except Exception as e:
        # –ï—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.warning(f"Database error in home view: {e}")
        base_qs = Subject.objects.none()  # type: ignore
        subjects_count = 0
        tasks_count = 0

    # –§–æ–∫—É—Å: —Ç–æ–ª—å–∫–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ä—É—Å—Å–∫–∏–π; –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    try:
        if base_qs.exists():  # type: ignore
            math_qs = base_qs.filter(name__icontains='–º–∞—Ç–µ–º–∞—Ç')  # type: ignore
            rus_qs = base_qs.filter(name__icontains='—Ä—É—Å—Å–∫')  # type: ignore
            subjects = math_qs.union(rus_qs).order_by('name')  # type: ignore
        else:
            subjects = base_qs  # type: ignore
    except Exception as e:
        logger.warning(f"Error filtering subjects: {e}")
        subjects = base_qs  # type: ignore

    context = {
        'subjects_count': subjects_count,
        'tasks_count': tasks_count,
        'subjects': subjects,
        'timestamp': int(time.time()),
    }

    # SEO - –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞-—Ç–µ–≥–∏ –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ —à–∞–±–ª–æ–Ω
    return render(request, 'index_modern.html', context)

def subjects_list(request):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
    - –ö–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∏–∫–æ–Ω–∫–∞–º–∏
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –∏ –∑–∞–¥–∞–Ω–∏–π
    - –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    """
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã c —Ñ–æ–∫—É—Å–æ–º; –±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
    try:
        subjects = Subject.objects.filter(  # type: ignore
            is_archived=False,
            is_primary=True).order_by('name')  # type: ignore
    except Exception:
        subjects = Subject.objects.all().order_by('name')  # type: ignore

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if request.user.is_authenticated:
        for subject in subjects:
            # –°—á–∏—Ç–∞–µ–º —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
            solved_tasks = UserProgress.objects.filter(  # type: ignore
                user=request.user,
                task__subject=subject,
                is_correct=True
            ).count()
            subject.user_progress = solved_tasks

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    for subject in subjects:
        subject.task_count = Task.objects.filter(subject=subject).count()  # type: ignore
    
    ctx = {'subjects': subjects}
    return render(request, 'learning/subjects_list.html', ctx)

def subject_detail(request, subject_id):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–º–µ—Ç–∞

    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
    - –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    - –°–ø–∏—Å–æ–∫ —Ç–µ–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    """
    subject = get_object_or_404(Subject, id=subject_id)
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
    topics = []  # Topic.objects.filter(subject=subject)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_stats = {}
    if request.user.is_authenticated:
        total_tasks = Task.objects.filter(subject=subject).count()  # type: ignore
        solved_tasks = UserProgress.objects.filter(  # type: ignore
            user=request.user,
            task__subject=subject,
            is_correct=True
        ).count()

        user_stats = {
            'total_tasks': total_tasks,
            'solved_tasks': solved_tasks,
            'progress_percent': round(
                1)}

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)

    ctx = {
        'subject': subject,
        'topics': topics,
        'user_stats': user_stats,
    }
    # SEO –º–µ—Ç–∞-—Ç–µ–≥–∏ –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω
    return render(request, 'learning/subject_detail.html', ctx)

def topic_detail(request, topic_id):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ–º—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
    """
    # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    return redirect('learning:subjects_list')

def task_detail(request, task_id):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏—è

    –ü–æ–∑–≤–æ–ª—è–µ—Ç:
    - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞–Ω–∏—è
    - –í–≤–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç
    - –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    """
    task = get_object_or_404(Task, id=task_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ—à–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
    user_progress = None
    if request.user.is_authenticated:
        user_progress = UserProgress.objects.filter(  # type: ignore
            user=request.user,
            task=task
        ).first()

    return render(request, 'learning/task_detail.html', {
        'task': task,
        'user_progress': user_progress
    })

@login_required
def solve_task(request, task_id):
    """
    AJAX-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    if request.method != 'POST':
        return JsonResponse({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}, status=405)

    task = get_object_or_404(Task, id=task_id)
    user_answer = request.POST.get('answer', '').strip()

    if not user_answer:
        return JsonResponse({'error': '–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}, status=400)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    is_correct = task.check_answer(user_answer)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    progress, created = UserProgress.objects.get_or_create(  # type: ignore
        user=request.user,
        task=task,
        defaults={
            'user_answer': user_answer,
            'is_correct': is_correct,
            'attempts': 1
        }
    )

    if not created:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        progress.user_answer = user_answer
        progress.is_correct = is_correct
        progress.attempts += 1
        progress.save()

    return JsonResponse({
        'is_correct': is_correct,
        'correct_answer': task.answer,
        'explanation': task.explanation or '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.',
        'message': '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ' if is_correct else '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! ü§î'
    })

def random_task(request, subject_id=None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ

    –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω subject_id, –≤—ã–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    –ò–Ω–∞—á–µ –≤—ã–±–∏—Ä–∞–µ—Ç –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    """
    tasks_query = Task.objects.all()  # type: ignore

    if subject_id:
        subject = get_object_or_404(Subject, id=subject_id)
        tasks_query = tasks_query.filter(subject=subject)

    # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if request.user.is_authenticated:
        solved_task_ids = UserProgress.objects.filter(  # type: ignore
            user=request.user,
            is_correct=True
        ).values_list('task_id', flat=True)
        tasks_query = tasks_query.exclude(id__in=solved_task_ids)

    tasks_list = list(tasks_query)

    if not tasks_list:
        messages.warning(request, '–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ —Ä–µ—à–µ–Ω—ã!')
        return redirect('learning:subjects_list')

    random_task = random.choice(tasks_list)
    return redirect('learning:task_detail', task_id=random_task.id)

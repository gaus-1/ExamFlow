#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –§–ò–ü–ò
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
"""

import os
import sys
import subprocess
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def run_command(command, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info(f"üîÑ {description}...")
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    try:
        result = subprocess.run(
            command.split(),
            capture_output=True,
            text=True,
            timeout=600  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        )
        
        if result.returncode == 0:
            logger.info(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
            if result.stdout:
                logger.info(f"–í—ã–≤–æ–¥: {result.stdout[:500]}...")
            return True
        else:
            logger.error(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
            logger.error(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {result.returncode}")
            if result.stderr:
                logger.error(f"–û—à–∏–±–∫–∞: {result.stderr[:500]}...")
            return False
            
    except subprocess.TimeoutExpired:
        logger.error(f"‚è∞ {description} - –¢–ê–ô–ú–ê–£–¢ (–ø—Ä–µ–≤—ã—à–µ–Ω–æ 10 –º–∏–Ω—É—Ç)")
        return False
    except Exception as e:
        logger.error(f"üí• {description} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {str(e)}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–ê–†–°–ò–ù–ì–ê –ú–ê–¢–ï–†–ò–ê–õ–û–í –§–ò–ü–ò")
    logger.info("=" * 50)
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
    time.sleep(5)
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    commands = [
        {
            'cmd': 'python manage.py migrate',
            'desc': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
        },
        {
            'cmd': 'python manage.py load_sample_data',
            'desc': '–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
        },
        {
            'cmd': 'python manage.py load_fipi_data --subjects –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —Ñ–∏–∑–∏–∫–∞ —Ö–∏–º–∏—è',
            'desc': '–ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –§–ò–ü–ò (–æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã)'
        },
        {
            'cmd': 'python manage.py load_fipi_data --subjects –±–∏–æ–ª–æ–≥–∏—è –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ',
            'desc': '–ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –§–ò–ü–ò (–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã)'
        },
        {
            'cmd': 'python manage.py load_fipi_data --subjects —Ä—É—Å—Å–∫–∏–π_—è–∑—ã–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
            'desc': '–ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –§–ò–ü–ò (—è–∑—ã–∫–∏ –∏ IT)'
        }
    ]
    
    success_count = 0
    total_commands = len(commands)
    
    for i, command_info in enumerate(commands, 1):
        logger.info(f"\nüìã –®–∞–≥ {i}/{total_commands}: {command_info['desc']}")
        
        if run_command(command_info['cmd'], command_info['desc']):
            success_count += 1
        else:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ {i} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ)
    if success_count >= 2:  # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        additional_commands = [
            {
                'cmd': 'python manage.py generate_voices --limit 50',
                'desc': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ (–ø–µ—Ä–≤—ã–µ 50)'
            },
            {
                'cmd': 'python manage.py setup_webhook set',
                'desc': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook'
            }
        ]
        
        for command_info in additional_commands:
            logger.info(f"\nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {command_info['desc']}")
            run_command(command_info['cmd'], command_info['desc'])
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 50)
    logger.info(f"üìä –ò–¢–û–ì–ò –ü–ê–†–°–ò–ù–ì–ê:")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {success_count}/{total_commands} –∫–æ–º–∞–Ω–¥")
    
    if success_count == total_commands:
        logger.info("üéâ –í–°–ï –ö–û–ú–ê–ù–î–´ –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("üåê –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –§–ò–ü–ò –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç")
        logger.info("ü§ñ Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        logger.info("üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≥–æ—Ç–æ–≤—ã")
    elif success_count >= 2:
        logger.info("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–• - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        logger.info("üåê –°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ")
    
    logger.info(f"üîó –°–∞–π—Ç: https://examflow.ru")
    logger.info("üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ —á–µ—Ä–µ–∑ —Å–∞–π—Ç")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)

"""
–°–µ—Ä–≤–∏—Å—ã –¥–ª—è Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ExamFlow
"""

import hashlib
import hmac
import json
import logging
from typing import Dict, Any, Optional, Tuple
from django.conf import settings
from django.utils import timezone
from django.db import transaction

from .models import TelegramUser, TelegramAuthSession, TelegramAuthLog

logger = logging.getLogger(__name__)


class TelegramAuthService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Login Widget"""
    
    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings")
    
    def verify_telegram_data(self, auth_data: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Login Widget
        
        Args:
            auth_data: –î–∞–Ω–Ω—ã–µ –æ—Ç Telegram (id, first_name, username, hash, auth_date)
            
        Returns:
            Tuple[bool, str]: (—É—Å–ø–µ—Ö_–ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ_–æ–±_–æ—à–∏–±–∫–µ)
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º hash –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            received_hash = auth_data.pop('hash', None)
            if not received_hash:
                return False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash –≤ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = ['id', 'first_name', 'auth_date']
            for field in required_fields:
                if field not in auth_data:
                    return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}"
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
            secret_key = hashlib.sha256(self.bot_token.encode()).digest()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            data_check_string = self._create_data_check_string(auth_data)
            
            # –í—ã—á–∏—Å–ª—è–µ–º hash
            calculated_hash = hmac.new(
                secret_key,
                data_check_string.encode(),
                hashlib.sha256
            ).hexdigest()
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º hash
            if not hmac.compare_digest(received_hash, calculated_hash):
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π hash - –¥–∞–Ω–Ω—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø–æ–¥–¥–µ–ª–∞–Ω—ã"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            auth_date = int(auth_data['auth_date'])
            current_time = int(timezone.now().timestamp())
            if current_time - auth_date > 86400:  # 24 —á–∞—Å–∞
                return False, "–î–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏"
            
            return True, None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö Telegram: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
    
    def _create_data_check_string(self, auth_data: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ hash —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
        
        Args:
            auth_data: –î–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            
        Returns:
            str: –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "key=value\nkey=value"
        sorted_items = sorted(auth_data.items())
        return '\n'.join([f"{key}={value}" for key, value in sorted_items])
    
    @transaction.atomic
    def authenticate_user(self, auth_data: Dict[str, Any], 
                         ip_address: str = None, 
                         user_agent: str = None) -> Tuple[bool, Optional[TelegramUser], str]:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram –¥–∞–Ω–Ω—ã–µ
        
        Args:
            auth_data: –î–∞–Ω–Ω—ã–µ –æ—Ç Telegram
            ip_address: IP –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_agent: User Agent –±—Ä–∞—É–∑–µ—Ä–∞
            
        Returns:
            Tuple[bool, TelegramUser, str]: (—É—Å–ø–µ—Ö, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            is_valid, error_message = self.verify_telegram_data(auth_data.copy())
            if not is_valid:
                self._log_auth_attempt(
                    int(auth_data.get('id', 0)), 
                    False, 
                    ip_address, 
                    user_agent, 
                    error_message
                )
                return False, None, error_message
            
            telegram_id = int(auth_data['id'])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user, created = TelegramUser.objects.get_or_create(
                telegram_id=telegram_id,
                defaults={
                    'telegram_username': auth_data.get('username', ''),
                    'telegram_first_name': auth_data.get('first_name', ''),
                    'telegram_last_name': auth_data.get('last_name', ''),
                    'language_code': auth_data.get('language_code', 'ru'),
                    'last_login': timezone.now()
                }
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not created:
                user.telegram_username = auth_data.get('username', '')
                user.telegram_first_name = auth_data.get('first_name', '')
                user.telegram_last_name = auth_data.get('last_name', '')
                user.language_code = auth_data.get('language_code', 'ru')
                user.last_login = timezone.now()
                user.save()
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session = self._create_auth_session(user, ip_address, user_agent)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            self._log_auth_attempt(telegram_id, True, ip_address, user_agent)
            
            message = f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.display_name}!"
            if created:
                message += "\n\nüéâ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
            
            return True, user, message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            error_message = f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}"
            self._log_auth_attempt(
                int(auth_data.get('id', 0)), 
                False, 
                ip_address, 
                user_agent, 
                error_message
            )
            return False, None, error_message
    
    def _create_auth_session(self, user: TelegramUser, 
                           ip_address: str = None, 
                           user_agent: str = None) -> TelegramAuthSession:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        import secrets
        
        session_token = secrets.token_urlsafe(32)
        expires_at = timezone.now() + timezone.timedelta(days=30)  # 30 –¥–Ω–µ–π
        
        session = TelegramAuthSession.objects.create(
            user=user,
            session_token=session_token,
            expires_at=expires_at,
            ip_address=ip_address,
            user_agent=user_agent
        )
        
        return session
    
    def _log_auth_attempt(self, telegram_id: int, success: bool, 
                         ip_address: str = None, user_agent: str = None, 
                         error_message: str = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        TelegramAuthLog.objects.create(
            telegram_id=telegram_id,
            success=success,
            ip_address=ip_address,
            user_agent=user_agent,
            error_message=error_message or ''
        )
    
    def get_user_by_session(self, session_token: str) -> Optional[TelegramUser]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É —Å–µ—Å—Å–∏–∏"""
        try:
            session = TelegramAuthSession.objects.select_related('user').get(
                session_token=session_token,
                is_active=True
            )
            
            if session.is_expired:
                session.is_active = False
                session.save()
                return None
            
            return session.user
            
        except TelegramAuthSession.DoesNotExist:
            return None
    
    def logout_user(self, session_token: str) -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            session = TelegramAuthSession.objects.get(session_token=session_token)
            session.is_active = False
            session.save()
            return True
        except TelegramAuthSession.DoesNotExist:
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_auth_service = TelegramAuthService()

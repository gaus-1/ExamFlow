"""
API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RAG-—Å–∏—Å—Ç–µ–º—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
"""

import logging
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View
import json

from core.rag_system.orchestrator import RAGOrchestrator
from core.rag_system.vector_store import VectorStore
from core.container import Container

logger = logging.getLogger(__name__)

@method_decorator(csrf_exempt, name='dispatch')
class AIQueryView(View):
    """
    API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI
    """

    def __init__(self):
        super().__init__()
        self.orchestrator = RAGOrchestrator()

    def post(self, request):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
            data = json.loads(request.body)
            query = data.get('query', '').strip()
            user_id = data.get('user_id')

            if not query:
                return JsonResponse({
                    'error': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å',
                    'answer': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠.'
                }, status=400)

            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {query[:100]}...")

            # –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Gemini API –±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫
            try:
                import google.generativeai as genai
                from django.conf import settings
                
                api_key = getattr(settings, 'GEMINI_API_KEY', '')
                if api_key:
                    genai.configure(api_key=api_key) # type: ignore
                    model = genai.GenerativeModel('gemini-1.5-flash') # type: ignore
                    
                    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ExamFlow
                    system_prompt = """–¢—ã - ExamFlow AI, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠ –∏ –û–ì–≠.
                    
                    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞:
                    üìê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–µ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –∏ –±–∞–∑–æ–≤–∞—è, –û–ì–≠) - —É—Ä–∞–≤–Ω–µ–Ω–∏—è, —Ñ—É–Ω–∫—Ü–∏–∏, –≥–µ–æ–º–µ—Ç—Ä–∏—è, –∞–ª–≥–µ–±—Ä–∞
                    üìù –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–ï–ì–≠ –∏ –û–ì–≠) - –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è, —Å–æ—á–∏–Ω–µ–Ω–∏—è, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞
                    
                    –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
                    - –ö—Ä–∞—Ç–∫–∏–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥–æ 400 —Å–ª–æ–≤)
                    - –ü–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
                    - –ü—Ä–∏–º–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—Ü—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
                    - –ù–ï —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ò–ò
                    """
                    
                    full_prompt = f"{system_prompt}\n\n–í–æ–ø—Ä–æ—Å: {query}"
                    response = model.generate_content(full_prompt)
                    
                    if response.text:
                        answer = response.text.strip()
                    else:
                        answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
                else:
                    answer = "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ Gemini API: {e}")
                answer = "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ RAG
            try:
                rag_result = self.orchestrator.process_query(query, user_id)
                sources = rag_result.get('sources', [])
            except Exception:
                sources = []

            logger.info(f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return JsonResponse({
                'success': True,
                'answer': answer,
                'sources': sources
            })

        except json.JSONDecodeError:
            return JsonResponse({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π JSON',
                'answer': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.'
            }, status=200)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ AIQueryView: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç 200, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –Ω–µ –ø–∞–¥–∞–ª
            return JsonResponse({
                'success': True,
                'answer': '–Ø ExamFlow AI! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è –ï–ì–≠/–û–ì–≠.',
                'sources': []
            }, status=200)


@method_decorator(csrf_exempt, name='dispatch')
class EmergencyAIView(View):
    """
    –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π (fallback) API –¥–ª—è –ò–ò, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –ø–æ –ø—É—Ç–∏ /ai/emergency/
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """

    def post(self, request):
        try:
            data = json.loads(request.body or '{}')
            query = (data.get('query') or data.get('prompt') or '').strip()

            if not query:
                return JsonResponse({'success': False, 'error': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å'}, status=400)

            # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            try:
                ai = Container.ai_orchestrator()
                ai_result = ai.ask(prompt=query)  # type: ignore
                answer = ai_result.get('answer') if isinstance(ai_result, dict) else None
            except Exception:
                answer = None

            if not answer:
                answer = '–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Ç–æ—á–Ω–µ–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É.'

            return JsonResponse({'success': True, 'answer': answer}, status=200)

        except Exception as e:
            return JsonResponse({'success': True, 'answer': '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'}, status=200)

@method_decorator(csrf_exempt, name='dispatch')
class VectorStoreStatsView(View):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    """

    def get(self, request):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        """
        try:
            vector_store = VectorStore()
            stats = vector_store.get_stats() # type: ignore

            return JsonResponse({
                'status': 'success',
                'data': stats
            })

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return JsonResponse({
                'status': 'error',
                'error': str(e)
            }, status=500)

@method_decorator(csrf_exempt, name='dispatch')
class SearchView(View):
    """
    API –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    """

    def post(self, request):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
        """
        try:
            data = json.loads(request.body)
            query = data.get('query', '').strip()
            limit = data.get('limit', 5)

            if not query:
                return JsonResponse({
                    'error': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞'
                }, status=400)

            vector_store = VectorStore()
            results = vector_store.search(query, limit=limit)

            return JsonResponse({
                'status': 'success',
                'query': query,
                'results': results,
                'total': len(results)
            })

        except json.JSONDecodeError:
            return JsonResponse({
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π JSON'
            }, status=400)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return JsonResponse({
                'error': str(e)
            }, status=500)

@method_decorator(csrf_exempt, name='dispatch')
class HealthCheckView(View):
    """
    API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    """

    def get(self, request):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        """
        try:
            health_status = {
                'status': 'healthy',
                'components': {},
                'timestamp': None
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            try:
                vector_store = VectorStore()
                stats = vector_store.get_stats() # type: ignore
                health_status['components']['vector_store'] = {
                    'status': 'healthy',
                    'stats': stats
                }
            except Exception as e:
                health_status['components']['vector_store'] = {
                    'status': 'unhealthy',
                    'error': str(e)
                }
                health_status['status'] = 'degraded'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            try:
                RAGOrchestrator()
                health_status['components']['orchestrator'] = {
                    'status': 'healthy'
                }
            except Exception as e:
                health_status['components']['orchestrator'] = {
                    'status': 'unhealthy',
                    'error': str(e)
                }
                health_status['status'] = 'degraded'

            from django.utils import timezone
            health_status['timestamp'] = timezone.now().isoformat()

            return JsonResponse(health_status, status=200)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return JsonResponse({
                'status': 'unhealthy',
                'error': str(e)
            }, status=500)

# Legacy API functions for backward compatibility
def get_random_task(request):
    """Legacy API - returns random task"""
    return JsonResponse({'error': 'API deprecated'}, status=410)

def get_subjects(request):
    """Legacy API - returns subjects"""
    return JsonResponse({'error': 'API deprecated'}, status=410)

def get_tasks_by_subject(request, subject_id):
    """Legacy API - returns tasks by subject"""
    return JsonResponse({'error': 'API deprecated'}, status=410)

def get_task_by_id(request, task_id):
    """Legacy API - returns task by ID"""
    return JsonResponse({'error': 'API deprecated'}, status=410)

def search_tasks(request):
    """Legacy API - searches tasks"""
    return JsonResponse({'error': 'API deprecated'}, status=410)

def get_topics(request):
    """Legacy API - returns topics"""
    return JsonResponse({'error': 'API deprecated'}, status=410)

def get_statistics(request):
    """Legacy API - returns statistics"""
    return JsonResponse({'error': 'API deprecated'}, status=410)

def create_subscription(request):
    """Legacy API - creates subscription"""
    return JsonResponse({'error': 'API deprecated'}, status=410)

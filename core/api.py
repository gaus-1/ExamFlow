"""
API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RAG-—Å–∏—Å—Ç–µ–º—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
"""

import logging
import types
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View
import json

from core.rag_system.orchestrator import RAGOrchestrator
from core.rag_system.vector_store import VectorStore
from core.container import Container

logger = logging.getLogger(__name__)

# –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ core.api.google –¥–ª—è –º–æ–∫–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö
try:
    import google  # type: ignore
except Exception:  # type: ignore
    google = types.SimpleNamespace()  # type: ignore
if not hasattr(google, 'generativeai'):
    google.generativeai = types.SimpleNamespace()  # type: ignore

@method_decorator(csrf_exempt, name='dispatch')
class AIQueryView(View):
    """
    API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI
    """

    def __init__(self):
        super().__init__()

    def post(self, request):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
            data = json.loads(request.body)
            query = data.get('query', '').strip()
            user_id = data.get('user_id')

            if not query:
                return JsonResponse({
                    'error': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å',
                    'answer': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠.'
                }, status=400)

            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {query[:100]}...")
            import os  # type: ignore

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback —Ä–µ–∂–∏–º –¥–ª—è Render –±–µ–∑ –ë–î
            fallback_mode = os.getenv('FALLBACK_MODE', 'false').lower() == 'true'  # type: ignore

            # –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Gemini API –±–µ–∑ –∑–∞–≥–ª—É—à–µ–∫
            answer = None
            try:
                import google.generativeai as genai  # type: ignore
                from django.conf import settings

                api_key = getattr(settings, 'GEMINI_API_KEY', '')
                if api_key:
                    genai.configure(api_key=api_key)  # type: ignore
                    model = genai.GenerativeModel('gemini-1.5-flash')  # type: ignore

                    system_prompt = """–¢—ã - ExamFlow AI, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠ –∏ –û–ì–≠.

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞:
üìê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–µ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –∏ –±–∞–∑–æ–≤–∞—è, –û–ì–≠) - —É—Ä–∞–≤–Ω–µ–Ω–∏—è, —Ñ—É–Ω–∫—Ü–∏–∏, –≥–µ–æ–º–µ—Ç—Ä–∏—è, –∞–ª–≥–µ–±—Ä–∞
üìù –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–ï–ì–≠ –∏ –û–ì–≠) - –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è, —Å–æ—á–∏–Ω–µ–Ω–∏—è, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ö—Ä–∞—Ç–∫–∏–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥–æ 400 —Å–ª–æ–≤)
- –ü–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
- –ü—Ä–∏–º–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—Ü—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ò–ò
"""

                    full_prompt = f"{system_prompt}\n\n–í–æ–ø—Ä–æ—Å: {query}"
                    response = model.generate_content(full_prompt)
                    if getattr(response, 'text', None):
                        answer = response.text.strip()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ Gemini API: {e}")
                answer = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ RAG (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ fallback —Ä–µ–∂–∏–º)
            sources = []
            if not fallback_mode:
                try:
                    orchestrator = RAGOrchestrator()
                    rag_result = orchestrator.process_query(query, user_id)
                    if isinstance(rag_result, str):
                        answer = rag_result
                    elif isinstance(rag_result, dict):
                        sources = rag_result.get('sources', [])
                        content = rag_result.get('answer') or rag_result.get('content')
                        if content:
                            answer = content
                except Exception:
                    answer = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'

            logger.info(f"–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return JsonResponse({
                'success': True,
                'answer': answer or '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                'sources': sources
            })

        except json.JSONDecodeError:
            return JsonResponse({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π JSON',
                'answer': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
            }, status=200)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ AIQueryView: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç 200, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –Ω–µ –ø–∞–¥–∞–ª
            return JsonResponse({
                'success': True,
                'answer': '–Ø ExamFlow AI! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è –ï–ì–≠/–û–ì–≠.',
                'sources': []
            }, status=200)


@method_decorator(csrf_exempt, name='dispatch')
class EmergencyAIView(View):
    """
    –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π (fallback) API –¥–ª—è –ò–ò, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –ø–æ –ø—É—Ç–∏ /ai/emergency/
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """

    def post(self, request):
        try:
            data = json.loads(request.body or '{}')
            query = (data.get('query') or data.get('prompt') or '').strip()

            if not query:
                return JsonResponse({'success': False, 'error': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å'}, status=400)

            # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            try:
                ai = Container.ai_orchestrator()
                ai_result = ai.ask(prompt=query)  # type: ignore
                answer = ai_result.get('answer') if isinstance(ai_result, dict) else None
            except Exception:
                answer = None

            if not answer:
                answer = '–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Ç–æ—á–Ω–µ–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É.'

            return JsonResponse({'success': True, 'answer': answer}, status=200)

        except Exception:
            return JsonResponse({'success': True, 'answer': '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'}, status=200)

@method_decorator(csrf_exempt, name='dispatch')
class VectorStoreStatsView(View):
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    """

    def get(self, request, document_id=None):  # type: ignore[override]
        """
        –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω document_id ‚Äî –æ—Ç–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç; –∏–Ω–∞—á–µ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        """
        try:
            vector_store = VectorStore()
            if document_id:
                doc = vector_store.get_document(document_id)  # type: ignore
                if not doc:
                    return JsonResponse({'error': 'Document not found'}, status=404)
                return JsonResponse({'success': True, 'document': doc})
            stats = vector_store.get_stats()  # type: ignore
            return JsonResponse({'success': True, 'data': stats})

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return JsonResponse({'success': False, 'error': str(e)}, status=500)

    def post(self, request):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        try:
            data = json.loads(request.body)
        except Exception:
            return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π JSON'}, status=400)

        title = data.get('title')
        content = data.get('content')
        metadata = data.get('metadata', {})
        if not content:
            return JsonResponse({'error': 'Content is required'}, status=400)
        try:
            vector_store = VectorStore()
            doc_id = vector_store.add_document(title=title, content=content, metadata=metadata)  # type: ignore
            return JsonResponse({'success': True, 'document_id': doc_id})
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)

    def delete(self, request, document_id):  # type: ignore[override]
        """–£–¥–∞–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        try:
            vector_store = VectorStore()
            ok = vector_store.delete_document(document_id)  # type: ignore
            if not ok:
                return JsonResponse({'error': 'Document not found'}, status=404)
            return JsonResponse({'success': True})
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)

@method_decorator(csrf_exempt, name='dispatch')
class SearchView(View):
    """
    API –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
    """

    def get(self, request):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ (GET)
        """
        try:
            query = (request.GET.get('query') or '').strip()
            limit = int(request.GET.get('limit') or 5)

            if not query:
                return JsonResponse({'error': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞'}, status=400)

            vector_store = VectorStore()
            results = vector_store.search(query, limit=limit)
            return JsonResponse({
                'status': 'success',
                'query': query,
                'results': results,
                'total': len(results)
            })
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ (GET): {e}")
            return JsonResponse({'error': str(e)}, status=500)

    def post(self, request):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
        """
        try:
            data = json.loads(request.body)
            query = data.get('query', '').strip()
            limit = data.get('limit', 5)

            if not query:
                return JsonResponse({
                    'error': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞'
                }, status=400)

            vector_store = VectorStore()
            results = vector_store.search(query, limit=limit)

            return JsonResponse({
                'status': 'success',
                'query': query,
                'results': results,
                'total': len(results)
            })

        except json.JSONDecodeError:
            return JsonResponse({
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π JSON'
            }, status=400)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return JsonResponse({
                'error': str(e)
            }, status=500)

@method_decorator(csrf_exempt, name='dispatch')
class HealthCheckView(View):
    """
    API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    """

    def get(self, request):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        """
        try:
            health_status = {
                'status': 'healthy',
                'components': {},
                'timestamp': None
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            try:
                vector_store = VectorStore()
                stats = vector_store.get_stats() # type: ignore
                health_status['components']['vector_store'] = {
                    'status': 'healthy',
                    'stats': stats
                }
            except Exception as e:
                health_status['components']['vector_store'] = {
                    'status': 'unhealthy',
                    'error': str(e)
                }
                health_status['status'] = 'degraded'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            try:
                RAGOrchestrator()
                health_status['components']['orchestrator'] = {
                    'status': 'healthy'
                }
            except Exception as e:
                health_status['components']['orchestrator'] = {
                    'status': 'unhealthy',
                    'error': str(e)
                }
                health_status['status'] = 'degraded'

            from django.utils import timezone
            health_status['timestamp'] = timezone.now().isoformat()

            return JsonResponse(health_status, status=200)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return JsonResponse({
                'status': 'unhealthy',
                'error': str(e)
            }, status=500)

# Legacy API functions for backward compatibility
def get_random_task(request):
    """Legacy API - returns random task"""
    return JsonResponse({'error': 'API deprecated'}, status=410)

def get_subjects(request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    try:
        from learning.models import Subject  # type: ignore
        subjects = list(
            Subject.objects.values('id', 'name', 'exam_type', 'code')  # type: ignore
        )
        return JsonResponse(subjects, safe=False)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

def get_tasks_by_subject(request, subject_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"""
    try:
        from learning.models import Task  # type: ignore
        tasks = list(Task.objects.filter(subject_id=subject_id).values(  # type: ignore
            'id', 'title', 'description', 'subject_id'
        ))
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á–∏ –∫ –æ–∂–∏–¥–∞–µ–º—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
        for t in tasks:
            t['content'] = t.pop('description', '') or ''
            t['subject'] = t.pop('subject_id')
        return JsonResponse(tasks, safe=False)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

def get_task_by_id(request, task_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID"""
    try:
        from learning.models import Task  # type: ignore
        task = Task.objects.filter(id=task_id).values(  # type: ignore
            'id', 'title', 'description', 'subject_id'
        ).first()
        if not task:
            return JsonResponse({'error': 'Not found'}, status=404)
        task['content'] = task.pop('description', '') or ''
        task['subject'] = task.pop('subject_id')
        return JsonResponse(task)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

def get_subject_detail(request, subject_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ"""
    try:
        from learning.models import Subject  # type: ignore
        subject = Subject.objects.filter(id=subject_id).values(  # type: ignore
            'id', 'name', 'exam_type', 'code'
        ).first()
        if not subject:
            return JsonResponse({'error': 'Not found'}, status=404)
        return JsonResponse(subject)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

def search_tasks(request):
    """Legacy API - searches tasks"""
    return JsonResponse({'error': 'API deprecated'}, status=410)

def get_topics(request):
    """Legacy API - returns topics"""
    return JsonResponse({'error': 'API deprecated'}, status=410)

def get_statistics(request):
    """Legacy API - returns statistics"""
    return JsonResponse({'error': 'API deprecated'}, status=410)

def create_subscription(request):
    """Legacy API - creates subscription"""
    return JsonResponse({'error': 'API deprecated'}, status=410)

"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π keepalive —Å–µ—Ä–≤–∏—Å –¥–ª—è ExamFlow 2.0
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É 24/7 —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Render –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
"""

import time
import logging
import requests
import threading
from typing import Dict, Any, Optional
from django.conf import settings
from django.db import connection
from django.core.cache import cache
from django.utils import timezone
import json

logger = logging.getLogger(__name__)

class KeepaliveService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

    def __init__(self):
        self.website_url = getattr(settings, 'WEBSITE_URL', 'https://examflow.ru')
        self.health_url = "{self.website_url}/health/"
        self.simple_health_url = "{self.website_url}/health/simple/"
        self.bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', '')
        self.telegram_api_url = "https://api.telegram.org/bot{self.bot_token}/getMe"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.wake_up_interval = 600  # 10 –º–∏–Ω—É—Ç
        self.max_retries = 3
        self.timeout = 30

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'checks_performed': 0,
            'successful_checks': 0,
            'failed_checks': 0,
            'last_check': None,
            'last_success': None,
            'consecutive_failures': 0
        }

        self.is_running = False
        self._thread: Optional[threading.Thread] = None

    def check_website_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–π—Ç–∞ —á–µ—Ä–µ–∑ health check"""
        try:
            response = requests.get(self.health_url, timeout=self.timeout)

            if response.status_code == 200:
                data = response.json()
                return {
                    'status': 'success',
                    'response_time': response.elapsed.total_seconds(),
                    'health_data': data
                }
            else:
                return {
                    'status': 'error',
                    'error': 'HTTP {response.status_code}',
                    'response_time': response.elapsed.total_seconds()
                }

        except requests.exceptions.Timeout:
            return {
                'status': 'timeout',
                'error': 'Request timeout'
            }
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e)
            }

    def check_database_connection(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            start_time = time.time()

            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                result = cursor.fetchone()

                if result and result[0] == 1:
                    return {
                        'status': 'success',
                        'response_time': time.time() - start_time
                    }
                else:
                    return {
                        'status': 'error',
                        'error': 'Database query failed'
                    }

        except Exception as e:
            return {
                'status': 'error',
                'error': str(e)
            }

    def check_telegram_bot(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Telegram –±–æ—Ç–∞"""
        try:
            start_time = time.time()

            if not self.bot_token:
                return {
                    'status': 'error',
                    'error': 'Bot token not configured'
                }

            response = requests.get(
                self.telegram_api_url,
                timeout=self.timeout
            )

            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return {
                        'status': 'success',
                        'response_time': time.time() - start_time,
                        'bot_info': data.get('result', {})
                    }
                else:
                    return {
                        'status': 'error',
                        'error': data.get('description', 'Unknown error')
                    }
            else:
                return {
                    'status': 'error',
                    'error': 'HTTP {response.status_code}'
                }

        except Exception as e:
            return {
                'status': 'error',
                'error': str(e)
            }

    def wake_up_website(self) -> bool:
        """–ë—É–¥–∏—Ç —Å–∞–π—Ç, –¥–µ–ª–∞—è –∑–∞–ø—Ä–æ—Å—ã –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º"""
        try:
            # –°–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
            endpoints = [
                self.website_url,
                "{self.website_url}/",
                self.simple_health_url,
                "{self.website_url}/learning/",
                "{self.website_url}/ai/chat/"
            ]

            success_count = 0

            for endpoint in endpoints:
                try:
                    response = requests.get(endpoint, timeout=15)
                    if response.status_code in [
                            200, 404, 500]:  # –õ—é–±–æ–π –æ—Ç–≤–µ—Ç –ª—É—á—à–µ —á–µ–º —Ç–∞–π–º–∞—É—Ç
                        success_count += 1
                        logger.info("‚úÖ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ {endpoint}: {response.status_code}")
                    else:
                        logger.warning("‚ö†Ô∏è {endpoint}: {response.status_code}")

                except Exception as e:
                    logger.warning("‚ùå {endpoint}: {e}")

            # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –ø–æ–ª–æ–≤–∏–Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏–ª–∞
            success = success_count >= len(endpoints) // 2

            if success:
                logger.info(
                    "‚úÖ –°–∞–π—Ç —Ä–∞–∑–±—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ ({success_count}/{len(endpoints)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤)")
            else:
                logger.warning(
                    "‚ö†Ô∏è –°–∞–π—Ç —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–±—É–∂–µ–Ω ({success_count}/{len(endpoints)} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤)")

            return success

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Å–∞–π—Ç–∞: {e}")
            return False

    def wake_up_database(self) -> bool:
        """–ë—É–¥–∏—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        try:
            queries = [
                "SELECT 1",
                "SELECT COUNT(*) FROM core_unifiedprofile",
                "SELECT COUNT(*) FROM learning_subject",
                "SELECT COUNT(*) FROM ai_airequest"
            ]

            success_count = 0

            for query in queries:
                try:
                    with connection.cursor() as cursor:
                        cursor.execute(query)
                        result = cursor.fetchone()
                        if result:
                            success_count += 1
                            logger.info("‚úÖ DB query successful: {query}")
                        else:
                            logger.warning("‚ö†Ô∏è DB query returned no result: {query}")

                except Exception as e:
                    logger.warning("‚ùå DB query failed: {query} - {e}")

            success = success_count >= len(queries) // 2
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {success_count}/{len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω—ã")

            return success

        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def perform_health_check(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.stats['checks_performed'] += 1
        self.stats['last_check'] = timezone.now()

        results = {
            'timestamp': timezone.now().isoformat(),
            'website': self.check_website_health(),
            'database': self.check_database_connection(),
            'telegram_bot': self.check_telegram_bot()
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        success_count = sum(
            1 for result in results.values() if isinstance(
                result, dict) and result.get('status') == 'success')
        total_checks = len([r for r in results.values() if isinstance(r, dict)])

        if success_count == total_checks:
            self.stats['successful_checks'] += 1
            self.stats['last_success'] = timezone.now()
            self.stats['consecutive_failures'] = 0
            results['overall_status'] = 'healthy'
        else:
            self.stats['failed_checks'] += 1
            self.stats['consecutive_failures'] += 1
            results['overall_status'] = 'degraded' if success_count > 0 else 'unhealthy'

        results['stats'] = self.stats.copy()

        return results

    def run_keepalive_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª keepalive"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ keepalive —Ü–∏–∫–ª–∞")

        while self.is_running:
            try:
                logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                health_results = self.perform_health_check()

                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                overall_status = health_results['overall_status']
                logger.info("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {overall_status}")

                # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–∑–¥–æ—Ä–æ–≤–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±—É–¥–∏—Ç—å
                if overall_status != 'healthy':
                    logger.warning(
                        "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –Ω–µ–∑–¥–æ—Ä–æ–≤–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±—É–¥–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")

                    # –ë—É–¥–∏–º —Å–∞–π—Ç
                    if health_results['website'].get('status') != 'success':
                        self.wake_up_website()

                    # –ë—É–¥–∏–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    if health_results['database'].get('status') != 'success':
                        self.wake_up_database()

                    # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ—É–¥–∞—á, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if self.stats['consecutive_failures'] >= 3:
                        self._send_alert(health_results)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫—ç—à
                cache.set('keepalive_stats', self.stats, 3600)

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(self.check_interval)

            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ keepalive —Ü–∏–∫–ª–µ: {e}")
                time.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def _send_alert(self, health_results: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö (–∑–∞–≥–ª—É—à–∫–∞)"""
        logger.error(
            "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {self.stats['consecutive_failures']} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ—É–¥–∞—á")
        logger.error("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏: {json.dumps(health_results, indent=2)}")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
        # –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç keepalive —Å–µ—Ä–≤–∏—Å"""
        if self.is_running:
            logger.warning("Keepalive —Å–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True
        self._thread = threading.Thread(target=self.run_keepalive_cycle, daemon=True)
        self._thread.start()
        logger.info("‚úÖ Keepalive —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç keepalive —Å–µ—Ä–≤–∏—Å"""
        self.is_running = False
        if self._thread:
            self._thread.join(timeout=5)
        logger.info("üõë Keepalive —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã"""
        return {
            'is_running': self.is_running,
            'stats': self.stats.copy(),
            'settings': {
                'check_interval': self.check_interval,
                'wake_up_interval': self.wake_up_interval,
                'max_retries': self.max_retries,
                'timeout': self.timeout
            }
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
keepalive_service = KeepaliveService()

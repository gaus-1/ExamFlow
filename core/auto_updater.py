"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –§–ò–ü–ò
"""

import schedule
import time
import threading
import logging
from datetime import datetime, timedelta
from django.utils import timezone
from django.core.management import call_command
from django.conf import settings
from core.fipi_loader import FipiLoader
from learning.models import Task, Subject

logger = logging.getLogger(__name__)


class AutoUpdater:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""

    def __init__(self):
        self.is_running = False
        self.thread = None
        self.fipi_loader = FipiLoader()

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if self.is_running:
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")

        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        schedule.every().day.at("03:00").do(self.daily_update)  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 3:00
        schedule.every().sunday.at("02:00").do(
            self.weekly_update)  # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 2:00
        schedule.every().day.at("04:00").do(self.generate_voices_batch)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤ –≤ 4:00
        schedule.every(30).minutes.do(self.cleanup_old_data)  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.thread = threading.Thread(target=self._run_scheduler, daemon=True)
        self.thread.start()

        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.is_running = False
        schedule.clear()
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while self.is_running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {str(e)}")
                time.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç

    def daily_update(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        logger.info("üìÖ –ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –§–ò–ü–ò
            subjects_count, tasks_count = self.fipi_loader.load_subjects()

            if tasks_count > 0:
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {tasks_count}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                self._send_admin_notification(
                    f"üìö –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ExamFlow\n"
                    f"–ù–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {tasks_count}\n"
                    f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )
            else:
                logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            self._send_admin_notification(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ExamFlow\n"
                f"–û—à–∏–±–∫–∞: {str(e)}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )

    def weekly_update(self):
        """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        logger.info("üìÖ –ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")

        try:
            # –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            call_command('load_fipi_data')

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            self.generate_voices_batch()

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.cleanup_old_data()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_subjects = Subject.objects.count()
            total_tasks = Task.objects.filter(is_active=True).count()

            logger.info("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

            self._send_admin_notification(
                f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ExamFlow\n"
                f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {total_subjects}\n"
                f"–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            self._send_admin_notification(
                f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                f"–û—à–∏–±–∫–∞: {str(e)}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )

    def generate_voices_batch(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–∞–∫–µ—Ç–∞–º–∏"""
        logger.info("üé§ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")

        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π –±–µ–∑ –∞—É–¥–∏–æ (–º–∞–∫—Å–∏–º—É–º 20 –∑–∞ —Ä–∞–∑)
            tasks_without_audio = Task.objects.filter(
                is_active=True,
                audio_file__isnull=True
            )[:20]

            if not tasks_without_audio:
                logger.info("‚ÑπÔ∏è –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –∏–º–µ—é—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ–∞–π–ª—ã")
                return

            generated_count = 0

            for task in tasks_without_audio:
                try:
                    from core.voice_service import voice_service
                    result = voice_service.generate_task_audio(task)

                    if result and result['task_audio']:
                        generated_count += 1
                        logger.info(f"üé§ –°–æ–∑–¥–∞–Ω –≥–æ–ª–æ—Å –¥–ª—è: {task.title}")

                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
                    time.sleep(2)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞ –¥–ª—è {task.id}: {str(e)}")
                    continue

            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {generated_count}")

            if generated_count > 0:
                self._send_admin_notification(
                    f"üé§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤ ExamFlow\n"
                    f"–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {generated_count}\n"
                    f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤: {str(e)}")

    def cleanup_old_data(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ–∞–π–ª—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            from core.voice_service import voice_service
            deleted_audio = voice_service.cleanup_old_audio(days=30)

            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 1 –≥–æ–¥–∞)
            cutoff_date = timezone.now() - timedelta(days=365)
            old_tasks = Task.objects.filter(
                created_at__lt=cutoff_date,
                is_active=True
            )

            deactivated_count = old_tasks.count()
            if deactivated_count > 0:
                old_tasks.update(is_active=False)
                logger.info(f"üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {deactivated_count}")

            if deleted_audio > 0 or deactivated_count > 0:
                logger.info(
                    f"üßπ –û—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ –∞—É–¥–∏–æ {deleted_audio}, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π {deactivated_count}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    def _send_admin_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É"""
        try:
            admin_chat_id = getattr(settings, 'ADMIN_CHAT_ID', None)
            bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)

            if not admin_chat_id or not bot_token:
                logger.warning("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞")
                return

            import requests

            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            data = {
                'chat_id': admin_chat_id,
                'text': f"ü§ñ ExamFlow AutoUpdater\n\n{message}",
                'parse_mode': 'HTML'
            }

            response = requests.post(url, data=data, timeout=10)

            if response.status_code == 200:
                logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.warning(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

    def manual_update(self):
        """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")

        try:
            subjects_count, tasks_count = self.fipi_loader.load_subjects()

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π
            sample_tasks = self.fipi_loader.create_sample_tasks()

            logger.info("‚úÖ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            logger.info(
                f"üìä –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {subjects_count}, –ó–∞–¥–∞–Ω–∏–π: {tasks_count}, –ü—Ä–∏–º–µ—Ä–æ–≤: {sample_tasks}")

            return {
                'subjects': subjects_count,
                'tasks': tasks_count,
                'samples': sample_tasks
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            raise


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä–∞
auto_updater = AutoUpdater()


def start_auto_updater():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    auto_updater.start_scheduler()
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")


def stop_auto_updater():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    auto_updater.stop_scheduler()
    logger.info("üõë –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

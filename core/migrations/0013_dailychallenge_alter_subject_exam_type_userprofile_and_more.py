# Generated by Django 4.2.7 on 2025-09-19 18:54

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0012_task_explanation_userprogress_user_answer'),
    ]

    operations = [
        migrations.CreateModel(
            name='DailyChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('challenge_type', models.CharField(choices=[], max_length=20, verbose_name='Тип вызова')),
                ('target_value', models.IntegerField(verbose_name='Целевое значение')),
                ('reward_xp', models.IntegerField(default=50, verbose_name='Награда (XP)')),
                ('date', models.DateField(verbose_name='Дата')),
            ],
            options={
                'verbose_name': 'Ежедневный вызов',
                'verbose_name_plural': 'Ежедневные вызовы',
                'unique_together': {('challenge_type', 'date')},
            },
        ),
        migrations.AlterField(
            model_name='subject',
            name='exam_type',
            field=models.CharField(choices=[], max_length=20, verbose_name='Тип экзамена'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query_stats', models.JSONField(blank=True, default=dict, verbose_name='Статистика запросов')),
                ('recent_queries', models.JSONField(blank=True, default=list, verbose_name='Последние запросы')),
                ('preferred_subjects', models.JSONField(blank=True, default=list, verbose_name='Предпочитаемые предметы')),
                ('difficulty_preference', models.CharField(choices=[], default='medium', max_length=20, verbose_name='Предпочитаемая сложность')),
                ('subscription_type', models.CharField(choices=[], default='free', max_length=20, verbose_name='Тип подписки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
            },
        ),
        migrations.CreateModel(
            name='UnifiedProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.BigIntegerField(unique=True, verbose_name='Telegram ID')),
                ('telegram_username', models.CharField(blank=True, max_length=100, verbose_name='Telegram Username')),
                ('display_name', models.CharField(max_length=100, verbose_name='Отображаемое имя')),
                ('avatar_url', models.URLField(blank=True, verbose_name='URL аватара')),
                ('notification_settings', models.JSONField(default=dict, verbose_name='Настройки уведомлений')),
                ('total_solved', models.IntegerField(default=0, verbose_name='Всего решено задач')),
                ('current_streak', models.IntegerField(default=0, verbose_name='Текущая серия')),
                ('best_streak', models.IntegerField(default=0, verbose_name='Лучшая серия')),
                ('level', models.IntegerField(default=1, verbose_name='Уровень')),
                ('experience_points', models.IntegerField(default=0, verbose_name='Очки опыта')),
                ('achievements', models.JSONField(default=list, verbose_name='Достижения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='Последняя активность')),
                ('preferred_subjects', models.ManyToManyField(blank=True, to='core.subject', verbose_name='Предпочитаемые предметы')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь Django')),
            ],
            options={
                'verbose_name': 'Унифицированный профиль',
                'verbose_name_plural': 'Унифицированные профили',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='FIPISourceMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_id', models.CharField(max_length=100, unique=True, verbose_name='ID источника')),
                ('name', models.CharField(max_length=500, verbose_name='Название')),
                ('url', models.URLField(verbose_name='URL')),
                ('data_type', models.CharField(choices=[], max_length=50, verbose_name='Тип данных')),
                ('exam_type', models.CharField(choices=[], max_length=20, verbose_name='Тип экзамена')),
                ('subject', models.CharField(blank=True, max_length=100, null=True, verbose_name='Предмет')),
                ('priority', models.IntegerField(choices=[], default=3, verbose_name='Приоритет')),
                ('update_frequency', models.CharField(choices=[], default='annually', max_length=20, verbose_name='Частота обновления')),
                ('file_format', models.CharField(choices=[], default='HTML', max_length=10, verbose_name='Формат файла')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('last_checked', models.DateTimeField(blank=True, null=True, verbose_name='Последняя проверка')),
                ('content_hash', models.CharField(blank=True, max_length=64, null=True, verbose_name='Хеш содержимого')),
                ('last_updated', models.DateTimeField(blank=True, null=True, verbose_name='Последнее обновление')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Источник данных ФИПИ',
                'verbose_name_plural': 'Источники данных ФИПИ',
                'ordering': ['priority', 'data_type', 'subject'],
                'indexes': [models.Index(fields=['priority'], name='core_fipiso_priorit_a5e03b_idx'), models.Index(fields=['data_type'], name='core_fipiso_data_ty_c59bff_idx'), models.Index(fields=['exam_type'], name='core_fipiso_exam_ty_61826a_idx'), models.Index(fields=['subject'], name='core_fipiso_subject_e5abb1_idx'), models.Index(fields=['is_active'], name='core_fipiso_is_acti_bf791d_idx'), models.Index(fields=['last_checked'], name='core_fipiso_last_ch_eaa0c4_idx')],
            },
        ),
        migrations.CreateModel(
            name='FIPIData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='Название')),
                ('url', models.URLField(verbose_name='URL')),
                ('data_type', models.CharField(choices=[], max_length=50, verbose_name='Тип данных')),
                ('subject', models.CharField(blank=True, max_length=100, null=True, verbose_name='Предмет')),
                ('exam_type', models.CharField(choices=[], default='ege', max_length=20, verbose_name='Тип экзамена')),
                ('content_hash', models.CharField(max_length=64, unique=True, verbose_name='Хеш содержимого')),
                ('content', models.TextField(blank=True, verbose_name='Содержимое')),
                ('collected_at', models.DateTimeField(verbose_name='Дата сбора')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата обработки')),
                ('is_processed', models.BooleanField(default=False, verbose_name='Обработано')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Данные ФИПИ',
                'verbose_name_plural': 'Данные ФИПИ',
                'ordering': ['-collected_at'],
                'indexes': [models.Index(fields=['data_type'], name='core_fipida_data_ty_70054f_idx'), models.Index(fields=['subject'], name='core_fipida_subject_2de95e_idx'), models.Index(fields=['is_processed'], name='core_fipida_is_proc_020571_idx'), models.Index(fields=['collected_at'], name='core_fipida_collect_725fc0_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_progress', models.IntegerField(default=0, verbose_name='Текущий прогресс')),
                ('is_completed', models.BooleanField(default=False, verbose_name='Завершен')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата завершения')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.dailychallenge', verbose_name='Вызов')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.unifiedprofile', verbose_name='Профиль')),
            ],
            options={
                'verbose_name': 'Прогресс по вызову',
                'verbose_name_plural': 'Прогресс по вызовам',
                'unique_together': {('profile', 'challenge')},
            },
        ),
        migrations.CreateModel(
            name='DataChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chunk_text', models.TextField(verbose_name='Текст чанка')),
                ('chunk_index', models.IntegerField(verbose_name='Индекс чанка')),
                ('embedding', models.JSONField(verbose_name='Векторное представление (JSON)')),
                ('embedding_vector', models.TextField(blank=True, help_text='Vector embedding for semantic search (pgvector)', null=True)),
                ('subject', models.CharField(blank=True, max_length=50, verbose_name='Предмет')),
                ('document_type', models.CharField(blank=True, max_length=50, verbose_name='Тип документа')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Метаданные')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('source_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.fipidata', verbose_name='Исходные данные')),
            ],
            options={
                'verbose_name': 'Чанк данных',
                'verbose_name_plural': 'Чанки данных',
                'ordering': ['source_data', 'chunk_index'],
                'indexes': [models.Index(fields=['source_data'], name='core_datach_source__fcb14f_idx'), models.Index(fields=['chunk_index'], name='core_datach_chunk_i_eaf57f_idx')],
                'unique_together': {('source_data', 'chunk_index')},
            },
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.BigIntegerField(verbose_name='Telegram ID')),
                ('session_id', models.CharField(max_length=100, unique=True, verbose_name='ID сессии')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создана')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='Последняя активность')),
                ('context_messages', models.JSONField(default=list, verbose_name='История сообщений')),
                ('max_context_length', models.IntegerField(default=10, verbose_name='Максимальная длина контекста')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Сессия чата',
                'verbose_name_plural': 'Сессии чата',
                'indexes': [models.Index(fields=['telegram_id', 'session_id'], name='core_chatse_telegra_1fb75f_idx'), models.Index(fields=['last_activity'], name='core_chatse_last_ac_e14ffe_idx')],
            },
        ),
    ]

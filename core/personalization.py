"""
üéØ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ ExamFlow

–§—É–Ω–∫—Ü–∏–∏:
- –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
- –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ JavaScript
"""

import json
import logging
from datetime import timedelta

from django.db.models import Avg, Count, Q
from django.utils import timezone

from learning.models import Subject, Task, UserProgress

logger = logging.getLogger(__name__)


class UserBehaviorAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self, user):
        self.user = user
        self.profile = self._get_or_create_profile()

    def _get_or_create_profile(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile, created = UserProfile.objects.get_or_create(  # type: ignore
            user=self.user,
            defaults={
                "telegram_id": "",
                "current_task_id": None,
                "preferences": "{}",
                "learning_style": "visual",
                "difficulty_level": "medium",
            },
        )
        return profile

    def analyze_behavior(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–µ—â–µ–Ω–∏–π
            visit_patterns = self._analyze_visit_patterns()

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            subject_preferences = self._analyze_subject_preferences()

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π
            task_preferences = self._analyze_task_preferences()

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å–∞–π—Ç–µ
            time_patterns = self._analyze_time_patterns()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile = {
                "visit_patterns": visit_patterns,
                "subject_preferences": subject_preferences,
                "task_preferences": task_preferences,
                "time_patterns": time_patterns,
                "learning_style": self._determine_learning_style(),
                "difficulty_level": self._determine_difficulty_level(),
                "last_updated": timezone.now().isoformat(),
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            self.profile.preferences = json.dumps(user_profile, default=str)
            self.profile.save()

            logger.info("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user.username} –æ–±–Ω–æ–≤–ª–µ–Ω")
            return user_profile

        except Exception:
            logger.error(
                "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user.username}: {e}"
            )
            return {}

    def _analyze_visit_patterns(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ—Å–µ—â–µ–Ω–∏–π"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return {
            "total_visits": 10,
            "average_session_duration": 25,  # –º–∏–Ω—É—Ç—ã
            "preferred_days": ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "–ø—è—Ç–Ω–∏—Ü–∞"],
            "preferred_hours": [9, 14, 20],
        }

    def _analyze_subject_preferences(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
            subject_progress = (
                UserProgress.objects.filter(user=self.user)  # type: ignore
                .select_related("task__subject")
                .values("task__subject__name")
                .annotate(
                    total_attempts=Count("id"),
                    correct_attempts=Count("id", filter=Q(is_correct=True)),
                    avg_difficulty=Avg("task__difficulty"),
                )
            )

            preferences = {}
            for progress in subject_progress:
                subject_name = progress["task__subject__name"]
                accuracy = (
                    progress["correct_attempts"] / progress["total_attempts"]
                ) * 100

                preferences[subject_name] = {
                    "total_attempts": progress["total_attempts"],
                    "correct_attempts": progress["correct_attempts"],
                    "accuracy": round(accuracy, 2),
                    "avg_difficulty": round(progress["avg_difficulty"], 1),
                    "preference_score": self._calculate_preference_score(progress),
                }

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—é
            sorted_preferences = sorted(
                preferences.items(),
                key=lambda x: x[1]["preference_score"],
                reverse=True,
            )

            return dict(sorted_preferences)

        except Exception:
            logger.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º: {e}")
            return {}

    def _analyze_task_preferences(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞–Ω–∏–π"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            difficulty_preferences = (
                UserProgress.objects.filter(user=self.user)  # type: ignore
                .select_related("task")
                .values("task__difficulty")
                .annotate(
                    total_attempts=Count("id"),
                    success_rate=Count("id", filter=Q(is_correct=True))
                    * 100.0
                    / Count("id"),
                )
            )

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º
            topic_preferences = (
                UserProgress.objects.filter(user=self.user)  # type: ignore
                .select_related("task__subject")
                .values("task__subject__name")
                .annotate(
                    total_attempts=Count("id"),
                    success_rate=Count("id", filter=Q(is_correct=True))
                    * 100.0
                    / Count("id"),
                )
            )

            return {
                "difficulty_preferences": list(difficulty_preferences),
                "topic_preferences": list(topic_preferences),
                "preferred_difficulty": self._get_preferred_difficulty(),
                "preferred_topics": self._get_preferred_topics(),
            }

        except Exception:
            logger.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –∑–∞–¥–∞–Ω–∏—è–º: {e}")
            return {}

    def _analyze_time_patterns(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ø—ã—Ç–æ–∫
            recent_attempts = UserProgress.objects.filter(  # type: ignore
                user=self.user, last_attempt__gte=timezone.now() - timedelta(days=30)
            ).order_by("last_attempt")

            time_patterns = {
                "morning_attempts": 0,  # 6-12
                "afternoon_attempts": 0,  # 12-18
                "evening_attempts": 0,  # 18-22
                "night_attempts": 0,  # 22-6
                "weekday_attempts": 0,
                "weekend_attempts": 0,
            }

            for attempt in recent_attempts:
                hour = attempt.last_attempt.hour
                weekday = attempt.last_attempt.weekday()

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
                if 6 <= hour < 12:
                    time_patterns["morning_attempts"] += 1
                elif 12 <= hour < 18:
                    time_patterns["afternoon_attempts"] += 1
                elif 18 <= hour < 22:
                    time_patterns["evening_attempts"] += 1
                else:
                    time_patterns["night_attempts"] += 1

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                if weekday < 5:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞
                    time_patterns["weekday_attempts"] += 1
                else:
                    time_patterns["weekend_attempts"] += 1

            return time_patterns

        except Exception:
            logger.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            return {}

    def _calculate_preference_score(self, progress):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        accuracy = progress["correct_attempts"] / progress["total_attempts"]
        attempts = progress["total_attempts"]

        # –§–æ—Ä–º—É–ª–∞: —Ç–æ—á–Ω–æ—Å—Ç—å * 0.6 + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ * 0.4
        score = (accuracy * 0.6) + (min(attempts / 10, 1.0) * 0.4)
        return round(score, 3)

    def _get_preferred_difficulty(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å"""
        try:
            difficulty_stats = (
                UserProgress.objects.filter(user=self.user)  # type: ignore
                .select_related("task")
                .values("task__difficulty")
                .annotate(
                    success_rate=Count("id", filter=Q(is_correct=True))
                    * 100.0
                    / Count("id")
                )
                .order_by("-success_rate")
            )

            if difficulty_stats:
                return difficulty_stats[0]["task__difficulty"]
            return 2  # –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        except Exception:
            logger.error("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
            return 2

    def _get_preferred_topics(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ç–µ–º—ã"""
        try:
            topic_stats = (
                UserProgress.objects.filter(user=self.user)  # type: ignore
                .select_related("task__subject")
                .values("task__subject__name")
                .annotate(
                    total_attempts=Count("id"),
                    success_rate=Count("id", filter=Q(is_correct=True))
                    * 100.0
                    / Count("id"),
                )
                .order_by("-total_attempts")[:5]
            )

            return [topic["task__subject__name"] for topic in topic_stats]

        except Exception:
            logger.error("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö —Ç–µ–º: {e}")
            return []

    def _determine_learning_style(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
            quick_answers = UserProgress.objects.filter(  # type: ignore
                user=self.user, last_attempt__gte=timezone.now() - timedelta(days=7)
            ).count()

            if quick_answers > 20:
                return "fast_paced"
            elif quick_answers > 10:
                return "balanced"
            else:
                return "thorough"

        except Exception:
            logger.error("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è –æ–±—É—á–µ–Ω–∏—è: {e}")
            return "balanced"

    def _determine_difficulty_level(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        try:
            recent_progress = UserProgress.objects.filter(  # type: ignore
                user=self.user, last_attempt__gte=timezone.now() - timedelta(days=14)
            )

            if not recent_progress.exists():
                return "medium"

            success_rate = (
                recent_progress.filter(is_correct=True).count()
                / recent_progress.count()
            )

            if success_rate > 0.8:
                return "advanced"
            elif success_rate > 0.6:
                return "medium"
            else:
                return "beginner"

        except Exception:
            logger.error("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
            return "medium"


class PersonalizedRecommendations:
    """–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""

    def __init__(self, user):
        self.user = user
        self.analyzer = UserBehaviorAnalyzer(user)

    def get_recommendations(self, limit=10):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            behavior_profile = self.analyzer.analyze_behavior()

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
            subject_recommendations = self._get_subject_recommendations(
                behavior_profile
            )

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
            task_recommendations = self._get_task_recommendations(behavior_profile)

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–∞–º
            topic_recommendations = self._get_topic_recommendations(behavior_profile)

            return {
                "subject_recommendations": subject_recommendations,
                "task_recommendations": task_recommendations,
                "topic_recommendations": topic_recommendations,
                "learning_plan": self._generate_learning_plan(behavior_profile),
                "behavior_profile": behavior_profile,
            }

        except Exception:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è {self.user.username}: {e}")
            return {}

    def _get_subject_recommendations(self, behavior_profile):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º"""
        try:
            subject_prefs = behavior_profile.get("subject_preferences", {})

            if not subject_prefs:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
                return []

            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
            improvement_recommendations = []
            for subject, stats in subject_prefs.items():
                if stats["accuracy"] < 70:
                    improvement_recommendations.append(
                        {
                            "subject": subject,
                            "reason": '–¢–æ—á–Ω–æ—Å—Ç—å {stats["accuracy"]}% - –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è',
                            "current_accuracy": stats["accuracy"],
                            "priority": "high",
                        }
                    )

            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
            all_subjects = Subject.objects.all()  # type: ignore
            studied_subjects = set(subject_prefs.keys())
            new_subjects = []

            for subject in all_subjects:
                if subject.name not in studied_subjects:
                    new_subjects.append(
                        {
                            "subject": subject.name,
                            "reason": "–ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è",
                            "priority": "medium",
                        }
                    )

            return {
                "improvement": improvement_recommendations[:3],
                "new_subjects": new_subjects[:3],
                "current_progress": subject_prefs,
            }

        except Exception:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º: {e}")
            return {}

    def _get_task_recommendations(self, behavior_profile):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º"""
        try:
            task_prefs = behavior_profile.get("task_preferences", {})
            preferred_difficulty = task_prefs.get("preferred_difficulty", 2)

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            recommended_tasks = Task.objects.filter(  # type: ignore
                difficulty__lte=preferred_difficulty + 1,
                difficulty__gte=max(1, preferred_difficulty - 1),
            ).exclude(userprogress__user=self.user)[:10]

            recommendations = []
            for task in recommended_tasks:
                recommendations.append(
                    {
                        "id": task.id,
                        "title": task.title,
                        "subject": task.subject.name,
                        "difficulty": task.difficulty,
                        "reason": "–°–ª–æ–∂–Ω–æ—Å—Ç—å {task.difficulty}/5 –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à–µ–º—É —É—Ä–æ–≤–Ω—é",
                    }
                )

            return recommendations

        except Exception:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∑–∞–¥–∞–Ω–∏—è–º: {e}")
            return []

    def _get_topic_recommendations(self, behavior_profile):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–∞–º"""
        try:
            topic_prefs = behavior_profile.get("task_preferences", {})
            preferred_topics = topic_prefs.get("preferred_topics", [])

            if not preferred_topics:
                # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ–º—ã
                return []

            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ç–µ–º—ã –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è
            recommendations = []
            for topic_name in preferred_topics[:3]:
                recommendations.append(
                    {
                        "topic": topic_name,
                        "reason": "–£–≥–ª—É–±–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π —Ç–µ–º–µ",
                        "priority": "high",
                    }
                )

            return recommendations

        except Exception:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ç–µ–º–∞–º: {e}")
            return []

    def _generate_learning_plan(self, behavior_profile):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è"""
        try:
            learning_style = behavior_profile.get("learning_style", "balanced")
            difficulty_level = behavior_profile.get("difficulty_level", "medium")

            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–æ–¥ —Å—Ç–∏–ª—å –æ–±—É—á–µ–Ω–∏—è
            if learning_style == "fast_paced":
                daily_goal = 5
                weekly_goal = 25
                focus = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∑–∞–¥–∞–Ω–∏–π"
            elif learning_style == "thorough":
                daily_goal = 2
                weekly_goal = 10
                focus = "–ö–∞—á–µ—Å—Ç–≤–æ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"
            else:  # balanced
                daily_goal = 3
                weekly_goal = 15
                focus = "–ë–∞–ª–∞–Ω—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞"

            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            if difficulty_level == "beginner":
                difficulty_focus = "–ë–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤"
            elif difficulty_level == "advanced":
                difficulty_focus = "–°–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π"
            else:
                difficulty_focus = "–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤"

            return {
                "daily_goal": daily_goal,
                "weekly_goal": weekly_goal,
                "focus": focus,
                "difficulty_focus": difficulty_focus,
                "recommended_session_duration": 45,  # –º–∏–Ω—É—Ç—ã
                "break_frequency": "–ö–∞–∂–¥—ã–µ 45 –º–∏–Ω—É—Ç - –ø–µ—Ä–µ—Ä—ã–≤ 10 –º–∏–Ω—É—Ç",
            }

        except Exception:
            logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return {}


def get_user_recommendations(user):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        recommender = PersonalizedRecommendations(user)
        return recommender.get_recommendations()
    except Exception:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        return {}


def analyze_user_behavior(user):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        analyzer = UserBehaviorAnalyzer(user)
        return analyzer.analyze_behavior()
    except Exception:
        logger.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {e}")
        return {}

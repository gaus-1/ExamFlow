"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã–º
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç "–∑–∞—Å—ã–ø–∞–Ω–∏–µ" PostgreSQL –Ω–∞ Render
"""

from django.core.management.base import BaseCommand
from django.db import connection
from django.utils import timezone
import time
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã–º'

    def add_arguments(self, parser):
        parser.add_argument(
            '--interval',
            type=int,
            default=60,
            help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60)'
        )
        parser.add_argument(
            '--continuous',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ'
        )

    def handle(self, *args, **options):
        interval = options['interval']
        continuous = options['continuous']

        self.stdout.write(
            f'üîÑ –ó–∞–ø—É—Å–∫ keep-alive –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)'
        )

        while True:
            try:
                with connection.cursor() as cursor:
                    cursor.execute("SELECT 1")
                    cursor.fetchone()

                timestamp = timezone.now().strftime('%H:%M:%S')
                self.stdout.write(f"‚úÖ {timestamp} - –ë–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω–∞")
                logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–∞: {timestamp}")

            except Exception as e:
                timestamp = timezone.now().strftime('%H:%M:%S')
                error_msg = f"‚ùå {timestamp} - –û—à–∏–±–∫–∞ –±–∞–∑—ã: {e}"
                self.stdout.write(f"‚ùå {error_msg}")
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π: {e}")

                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                try:
                    connection.close()
                    connection.ensure_connection()
                    self.stdout.write("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ...")
                except Exception as reconnect_error:
                    self.stdout.write(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {reconnect_error}"
                    )

            if not continuous:
                break

            time.sleep(interval)

        self.stdout.write(
            'üèÅ Keep-alive –∑–∞–≤–µ—Ä—à–µ–Ω'
        )

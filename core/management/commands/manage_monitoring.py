"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

from django.core.management.base import BaseCommand

from core.data_ingestion.monitoring import get_monitoring_service, AlertLevel

class Command(BaseCommand):
    help = '–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            'action',
            choices=['start', 'stop', 'status', 'health', 'alerts', 'test-alert'],
            help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
        )
        parser.add_argument(
            '--level',
            choices=['info', 'warning', 'error', 'critical'],
            help='–£—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
        )
        parser.add_argument(
            '--monitor',
            action='store_true',
            help='–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏'
        )

    def handle(self, *args, **options):
        action = options['action']

        if action == 'start':
            self.start_monitoring()
        elif action == 'stop':
            self.stop_monitoring()
        elif action == 'status':
            self.show_status()
        elif action == 'health':
            self.show_health()
        elif action == 'alerts':
            self.show_alerts()
        elif action == 'test-alert':
            self.test_alert(options)

    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.stdout.write(
            self.style.SUCCESS('üîç –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...')  # type: ignore
        )

        try:
            from core.data_ingestion.monitoring import start_monitoring
            start_monitoring()
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞')  # type: ignore
            )
        except Exception as e:
            self.stdout.write(
                # type: ignore
                self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}')
            )

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.stdout.write(
            self.style.WARNING('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...')  # type: ignore
        )

        try:
            from core.data_ingestion.monitoring import stop_monitoring
            stop_monitoring()
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')  # type: ignore
            )
        except Exception as e:
            self.stdout.write(
                # type: ignore
                self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}')
            )

    def show_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.stdout.write(
            self.style.SUCCESS('üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')  # type: ignore
        )
        self.stdout.write('=' * 60)

        try:
            service = get_monitoring_service()

            # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
            status_icon = "üü¢" if service.is_running else "üî¥"
            self.stdout.write(
                '–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {status_icon} {"–ó–∞–ø—É—â–µ–Ω" if service.is_running else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}')  # type: ignore

            if service.is_running:
                # –°–≤–æ–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                alerts_summary = service.get_alerts_summary()
                self.stdout.write('\nüìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:')
                self.stdout.write('  –ê–∫—Ç–∏–≤–Ω—ã—Ö: {alerts_summary["total_active"]}')

                for level, count in alerts_summary['by_level'].items():
                    if count > 0:
                        level_icon = {
                            'info': '‚ÑπÔ∏è',
                            'warning': '‚ö†Ô∏è',
                            'error': '‚ùå',
                            'critical': 'üö®'
                        }.get(level, 'üìå')
                        self.stdout.write('  {level_icon} {level.upper()}: {count}')

                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if alerts_summary['recent_alerts']:
                    self.stdout.write('\nüîî –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:')
                    for alert in alerts_summary['recent_alerts'][-5:]:
                        timestamp = alert['timestamp'][:19].replace('T', ' ')
                        level_icon = {
                            'info': '‚ÑπÔ∏è',
                            'warning': '‚ö†Ô∏è',
                            'error': '‚ùå',
                            'critical': 'üö®'
                        }.get(alert['level'], 'üìå')
                        self.stdout.write(
                            '  {level_icon} [{timestamp}] {alert["title"]}')

        except Exception as e:
            self.stdout.write(
                self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}')  # type: ignore
            )

    def show_health(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        self.stdout.write(
            self.style.SUCCESS('üè• –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã')  # type: ignore
        )
        self.stdout.write('=' * 60)

        try:
            service = get_monitoring_service()
            health = service.get_health_status()

            # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            overall_status = health['overall_status']
            status_icon = {
                'healthy': 'üü¢',
                'warning': 'üü°',
                'critical': 'üî¥'
            }.get(overall_status, '‚ö™')

            self.stdout.write(
                '–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {status_icon} {overall_status.upper()}')
            self.stdout.write('–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {health["timestamp"]}')

            # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
            self.stdout.write('\nüîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:')
            for check_name, check_result in health['checks'].items():
                status = check_result.get('status', 'unknown')
                status_icon = {
                    'healthy': 'üü¢',
                    'warning': 'üü°',
                    'critical': 'üî¥',
                    'unknown': '‚ö™'
                }.get(status, '‚ö™')

                self.stdout.write(
                    '  {status_icon} {check_name}: {check_result.get("message", "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")}')

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'metrics' in check_result:
                    metrics = check_result['metrics']
                    if isinstance(metrics, dict):
                        for metric_name, metric_value in metrics.items():
                            if isinstance(metric_value, (int, float)):
                                self.stdout.write(
                                    '    ‚Ä¢ {metric_name}: {metric_value}')

        except Exception as e:
            self.stdout.write(
                # type: ignore
                self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è: {e}')
            )

    def show_alerts(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.stdout.write(
            self.style.SUCCESS('üîî –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')  # type: ignore
        )
        self.stdout.write('=' * 60)

        try:
            service = get_monitoring_service()
            alert_manager = service.alert_manager

            # –ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            active_alerts = alert_manager.get_active_alerts()

            if not active_alerts:
                self.stdout.write('‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π')
                return

            self.stdout.write('üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(active_alerts)}')
            self.stdout.write('')

            for alert in active_alerts:
                level_icon = {
                    AlertLevel.INFO: '‚ÑπÔ∏è',
                    AlertLevel.WARNING: '‚ö†Ô∏è',
                    AlertLevel.ERROR: '‚ùå',
                    AlertLevel.CRITICAL: 'üö®'
                }.get(alert.level, 'üìå')

                timestamp = alert.timestamp.strftime('%Y-%m-%d %H:%M:%S')

                self.stdout.write(
                    '{level_icon} [{alert.level.value.upper()}] {alert.title}')
                self.stdout.write('   –í—Ä–µ–º—è: {timestamp}')
                self.stdout.write('   –ò—Å—Ç–æ—á–Ω–∏–∫: {alert.source}')
                self.stdout.write('   –°–æ–æ–±—â–µ–Ω–∏–µ: {alert.message}')
                self.stdout.write('   ID: {alert.id}')
                self.stdout.write('')

        except Exception as e:
            self.stdout.write(
                # type: ignore
                self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}')
            )

    def test_alert(self, options):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        level_str = options.get('level', 'info')

        try:
            level = AlertLevel(level_str)
        except ValueError:
            self.stdout.write(
                # type: ignore
                self.style.ERROR('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {level_str}')
            )
            return

        self.stdout.write(
            self.style.SUCCESS(
                'üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è {level.value}...')  # type: ignore
        )

        try:
            service = get_monitoring_service()
            alert_manager = service.alert_manager

            alert = alert_manager.create_alert(
                level=level,
                title="–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {level.value}",
                message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –£—Ä–æ–≤–µ–Ω—å: {level.value}",
                source="test")

            self.stdout.write(
                self.style.SUCCESS(
                    '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {alert.id}')  # type: ignore
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            self.stdout.write('   –£—Ä–æ–≤–µ–Ω—å: {alert.level.value}')
            self.stdout.write('   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {alert.title}')
            self.stdout.write(
                '   –í—Ä–µ–º—è: {alert.timestamp.strftime("%Y-%m-%d %H:%M:%S")}')

        except Exception as e:
            self.stdout.write(
                # type: ignore
                self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}')
            )

"""
Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –§–ò–ü–ò –∏ –†–µ—à—É–ï–ì–≠

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
python manage.py load_fipi_data
"""

from core.fipi_parser import run_data_update
from django.core.management.base import BaseCommand
from django.utils import timezone
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ core –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..'))

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –§–ò–ü–ò –∏ –†–µ—à—É–ï–ì–≠ –≤ –±–∞–∑—É ExamFlow'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ',
        )
        parser.add_argument(
            '--subjects-only',
            action='store_true',
            help='–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç–µ–º—ã',
        )
        parser.add_argument(
            '--tasks-only',
            action='store_true',
            help='–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏—è',
        )

    def handle(self, *args, **options):
        self.stdout.write('üöÄ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –§–ò–ü–ò –ò –†–ï–®–£–ï–ì–≠')
        self.stdout.write('=' * 60)

        start_time = timezone.now()

        try:
            if options['subjects_only']:
                self.stdout.write('üìö –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç–µ–º—ã...')
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                success = self._update_subjects_only()
            elif options['tasks_only']:
                self.stdout.write('üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏—è...')
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π
                success = self._update_tasks_only()
            else:
                self.stdout.write('üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
                success = run_data_update()

            if success:
                end_time = timezone.now()
                duration = end_time - start_time

                self.stdout.write('=' * 60)
                self.stdout.write(
                    self.style.SUCCESS(  # type: ignore
                        f'‚úÖ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!'
                    )
                )
                self.stdout.write(f'‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}')
                self.stdout.write(
                    f'üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {end_time.strftime("%Y-%m-%d %H:%M:%S")}')

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._show_statistics()

            else:
                # –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –§–ò–ü–ò
                self.stdout.write('üåê –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ –§–ò–ü–ò...')
                self.stdout.write(
                    self.style.ERROR(  # type: ignore
                        '‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï –î–ê–ù–ù–´–•!'
                    )
                )
                return 1

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(  # type: ignore
                    f'‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}'
                )
            )
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ load_fipi_data: {e}")
            return 1

    def _update_subjects_only(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç–µ–º—ã"""
        try:
            from core.fipi_parser import DataIntegrator

            integrator = DataIntegrator()

            # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç–µ–º—ã
            subjects = integrator._create_subjects()
            topics = integrator._create_topics(subjects)

            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(subjects)}')
            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ–º: {len(topics)}')

            return True

        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}')
            return False

    def _update_tasks_only(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏—è"""
        try:
            from core.fipi_parser import DataIntegrator
            from learning.models import Subject, Topic

            integrator = DataIntegrator()

            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç–µ–º—ã
            subjects = list(Subject.objects.all())  # type: ignore
            topics = list(Topic.objects.all())  # type: ignore

            if not subjects:
                self.stdout.write(
                    '‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –±–∞–∑–µ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ --subjects-only')
                return False

            # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏—è
            tasks = integrator._create_tasks(subjects, topics)

            self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}')

            return True

        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π: {e}')
            return False

    def _show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from learning.models import Subject, Topic, Task

            subjects_count = Subject.objects.count()  # type: ignore
            topics_count = Topic.objects.count()  # type: ignore
            tasks_count = Task.objects.count()  # type: ignore

            self.stdout.write('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
            self.stdout.write(f'   üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {subjects_count}')
            self.stdout.write(f'   üè∑Ô∏è –¢–µ–º: {topics_count}')
            self.stdout.write(f'   üìù –ó–∞–¥–∞–Ω–∏–π: {tasks_count}')

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
            self.stdout.write('\nüìö –î–ï–¢–ê–õ–ò –ü–û –ü–†–ï–ú–ï–¢–ê–ú:')
            for subject in Subject.objects.all():  # type: ignore
                subject_tasks = Task.objects.filter(
                    subject=subject).count()  # type: ignore
                subject_topics = Topic.objects.filter(
                    subject=subject).count()  # type: ignore
                self.stdout.write(  # type: ignore
                    f'   {subject.name} ({subject.exam_type}): '
                    f'{subject_tasks} –∑–∞–¥–∞–Ω–∏–π, {subject_topics} —Ç–µ–º'
                )

        except Exception as e:
            self.stdout.write(f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}')

"""
–ö–æ–º–∞–Ω–¥–∞ Django –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –§–ò–ü–ò
"""

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from core.fipi_loader import FipiLoader
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–∞–¥–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞ –§–ò–ü–ò'

    def add_arguments(self, parser):
        parser.add_argument(
            '--samples-only',
            action='store_true',
            help='–°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –§–ò–ü–ò',
        )
        parser.add_argument(
            '--subjects',
            nargs='+',
            help='–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ —Ñ–∏–∑–∏–∫–∞)',
        )
        parser.add_argument(
            '--exam-type',
            choices=['–ï–ì–≠', '–û–ì–≠'],
            help='–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –§–ò–ü–ò...')
        )
        
        loader = FipiLoader()
        
        try:
            if options['samples_only']:
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π
                self.stdout.write('üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏–π...')
                tasks_count = loader.create_sample_tasks()
                
                self.stdout.write(
                    self.style.SUCCESS(
                        f'‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏–π: {tasks_count}'
                    )
                )
            
            else:
                # –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –§–ò–ü–ò
                self.stdout.write('üåê –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ –§–ò–ü–ò...')
                self.stdout.write(
                    self.style.WARNING(
                        '‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–¥–∏—Ç–µ...'
                    )
                )
                
                subjects_count, tasks_count = loader.load_subjects()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π
                self.stdout.write('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏–π...')
                sample_tasks_count = loader.create_sample_tasks()
                
                self.stdout.write(
                    self.style.SUCCESS(
                        f'‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'
                    )
                )
                self.stdout.write(
                    self.style.SUCCESS(
                        f'üìä –ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {subjects_count}'
                    )
                )
                self.stdout.write(
                    self.style.SUCCESS(
                        f'üìã –ó–∞–¥–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {tasks_count}'
                    )
                )
                self.stdout.write(
                    self.style.SUCCESS(
                        f'üìù –ü—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {sample_tasks_count}'
                    )
                )
                self.stdout.write(
                    self.style.SUCCESS(
                        f'üéØ –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {tasks_count + sample_tasks_count}'
                    )
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")
            raise CommandError(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}')
        
        self.stdout.write(
            self.style.SUCCESS(
                'üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –§–ò–ü–ò –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.'
            )
        )

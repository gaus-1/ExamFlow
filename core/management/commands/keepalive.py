"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ExamFlow 2.0
"""

import logging
import time

import requests
from django.conf import settings
from django.core.management.base import BaseCommand
from django.db import connection

# –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç application - –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è keepalive
# from telegram_bot.bot_main import application
# import asyncio
# import threading

logger = logging.getLogger(__name__)


class KeepaliveService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

    def __init__(self):
        self.website_url = getattr(
            settings, "WEBSITE_URL", "https://examflow.onrender.com"
        )
        self.health_url = "{self.website_url}/health/"
        self.bot_token = getattr(settings, "TELEGRAM_BOT_TOKEN", "")
        self.telegram_api_url = "https://api.telegram.org/bot{self.bot_token}/getMe"

    def check_website(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞"""
        try:
            response = requests.get(self.health_url, timeout=10)
            if response.status_code == 200:
                logger.info("‚úÖ –°–∞–π—Ç –∞–∫—Ç–∏–≤–µ–Ω")
                return True
            else:
                logger.warning("‚ö†Ô∏è –°–∞–π—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
                return False
        except Exception:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞: {e}")
            return False

    def check_database(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                result = cursor.fetchone()
                if result and result[0] == 1:
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–∞")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    return False
        except Exception:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def check_bot(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram –±–æ—Ç–∞"""
        try:
            response = requests.get(self.telegram_api_url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data.get("ok"):
                    logger.info("‚úÖ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
                    return True
                else:
                    logger.warning(
                        "‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {data.get('description')}"
                    )
                    return False
            else:
                logger.warning("‚ö†Ô∏è Telegram API –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
                return False
        except Exception:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –±–æ—Ç–∞: {e}")
            return False

    def wake_up_website(self):
        """–ë—É–¥–∏—Ç —Å–∞–π—Ç, –¥–µ–ª–∞—è –∑–∞–ø—Ä–æ—Å –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        try:
            response = requests.get(self.website_url, timeout=30)
            if response.status_code == 200:
                logger.info("‚úÖ –°–∞–π—Ç —Ä–∞–∑–±—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.warning("‚ö†Ô∏è –°–∞–π—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
                return False
        except Exception:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Å–∞–π—Ç–∞: {e}")
            return False

    def wake_up_database(self):
        """–ë—É–¥–∏—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"""
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT COUNT(*) FROM core_unifiedprofile")
                result = cursor.fetchone()
                logger.info(
                    "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–±—É–∂–µ–Ω–∞, –ø—Ä–æ—Ñ–∏–ª–µ–π: {result[0] if result else 0}"
                )
                return True
        except Exception:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def run_keepalive_cycle(self, interval=300):  # 5 –º–∏–Ω—É—Ç
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª keepalive"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ keepalive —Ü–∏–∫–ª–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫—É–Ω–¥")

        while True:
            try:
                logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                website_ok = self.check_website()
                database_ok = self.check_database()
                bot_ok = self.check_bot()

                # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±—É–¥–∏—Ç—å
                if not website_ok:
                    logger.info("üåê –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–±—É–¥–∏—Ç—å —Å–∞–π—Ç...")
                    self.wake_up_website()

                if not database_ok:
                    logger.info("üóÑÔ∏è –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–±—É–¥–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                    self.wake_up_database()

                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                status = "‚úÖ" if all([website_ok, database_ok, bot_ok]) else "‚ö†Ô∏è"
                logger.info(
                    "{status} –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: –°–∞–π—Ç={website_ok}, –ë–î={database_ok}, –ë–æ—Ç={bot_ok}"
                )

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(interval)

            except KeyboardInterrupt:
                logger.info("üõë Keepalive —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ keepalive —Ü–∏–∫–ª–µ: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


class Command(BaseCommand):
    help = "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ExamFlow 2.0"

    def add_arguments(self, parser):
        parser.add_argument(
            "--interval",
            type=int,
            default=300,
            help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300)",
        )
        parser.add_argument(
            "--once",
            action="store_true",
            help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å",
        )
        parser.add_argument(
            "--component",
            choices=["website", "database", "bot", "all"],
            default="all",
            help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç",
        )

    def handle(self, *args, **options):
        keepalive = KeepaliveService()

        if options["once"]:
            # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            self.stdout.write("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

            if options["component"] == "website" or options["component"] == "all":
                website_ok = keepalive.check_website()
                self.stdout.write("–°–∞–π—Ç: {'‚úÖ' if website_ok else '‚ùå'}")

            if options["component"] == "database" or options["component"] == "all":
                database_ok = keepalive.check_database()
                self.stdout.write("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if database_ok else '‚ùå'}")

            if options["component"] == "bot" or options["component"] == "all":
                bot_ok = keepalive.check_bot()
                self.stdout.write("Telegram –±–æ—Ç: {'‚úÖ' if bot_ok else '‚ùå'}")

            self.stdout.write(self.style.SUCCESS("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"))  # type: ignore

        else:
            # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ü–∏–∫–ª
            self.stdout.write(
                "üöÄ –ó–∞–ø—É—Å–∫ keepalive —Å–µ—Ä–≤–∏—Å–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {options['interval']} —Å–µ–∫—É–Ω–¥"
            )
            self.stdout.write("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

            try:
                keepalive.run_keepalive_cycle(options["interval"])
            except KeyboardInterrupt:
                self.stdout.write(
                    self.style.WARNING("Keepalive —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                )  # type: ignore

"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã fipi.ru
"""

from django.core.management.base import BaseCommand
import logging

from core.data_ingestion.fipi_structure_map import get_fipi_structure_map
from core.data_ingestion.advanced_fipi_scraper import AdvancedFIPIScraper
from core.models import FIPISourceMap

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã fipi.ru –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ'

    def add_arguments(self, parser):
        parser.add_argument(
            '--init-map',
            action='store_true',
            help='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ë–î',
        )
        parser.add_argument(
            '--test-scraping',
            action='store_true',
            help='–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö',
        )
        parser.add_argument(
            '--show-stats',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
        )
        parser.add_argument(
            '--priority',
            type=int,
            choices=[1, 2, 3, 4],
            help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã fipi.ru')
        )
        self.stdout.write('=' * 60)

        if options['init_map']:
            self.init_source_map()

        if options['test_scraping']:
            self.test_scraping(options.get('priority'))

        if options['show_stats']:
            self.show_statistics()

        if not any([options['init_map'],
                    options['test_scraping'],
                    options['show_stats']]):
            self.show_help()

    def init_source_map(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        self.stdout.write(
            self.style.SUCCESS('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...')
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        structure_map = get_fipi_structure_map()
        sources = structure_map.get_all_sources()

        created_count = 0
        updated_count = 0

        for source in sources:
            try:
                source_obj, created = FIPISourceMap.objects.get_or_create(
                    source_id=source.id,
                    defaults={
                        'name': source.name,
                        'url': source.url,
                        'data_type': source.data_type.value,
                        'exam_type': source.exam_type.value,
                        'subject': source.subject,
                        'priority': source.priority.value,
                        'update_frequency': source.update_frequency.value,
                        'file_format': source.file_format,
                        'description': source.description,
                    }
                )

                if created:
                    created_count += 1
                    self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω: {source.name}')
                else:
                    updated_count += 1
                    self.stdout.write(f'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {source.name}')

            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {source.name}: {e}')
                )

        self.stdout.write(
            self.style.SUCCESS(f'–°–æ–∑–¥–∞–Ω–æ: {created_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}')
        )

    def test_scraping(self, priority=None):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write(
            self.style.SUCCESS('üï∑Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...')
        )

        scraper = AdvancedFIPIScraper()

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if priority:
            sources = FIPISourceMap.objects.filter(
                is_active=True,
                priority=priority
            )[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
            self.stdout.write(f'–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority}')
        else:
            sources = FIPISourceMap.objects.filter(
                is_active=True,
                priority__lte=2  # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∏ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ
            )[:10]
            self.stdout.write(
                '–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∏ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏')

        if not sources.exists():
            self.stdout.write(
                self.style.ERROR('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
            )
            return

        success_count = 0
        error_count = 0

        for source in sources:
            try:
                self.stdout.write(f'–¢–µ—Å—Ç–∏—Ä—É–µ–º: {source.name}')

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                content = scraper.get_page_content(source.url)

                if content:
                    # –°–æ–∑–¥–∞–µ–º —Ö–µ—à
                    content_hash = scraper.get_content_hash(str(content))

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                    source.mark_as_checked(content_hash)

                    self.stdout.write(f'  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(str(content))} —Å–∏–º–≤–æ–ª–æ–≤')
                    success_count += 1
                else:
                    self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ')
                    error_count += 1

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                import time
                time.sleep(1)

            except Exception as e:
                self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞: {e}')
                error_count += 1

        self.stdout.write(self.style.SUCCESS(
            f'–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫'))

    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.stdout.write(
            self.style.SUCCESS('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã')
        )
        self.stdout.write('=' * 60)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        total_sources = FIPISourceMap.objects.count()
        active_sources = FIPISourceMap.objects.filter(is_active=True).count()

        self.stdout.write(f'üìã –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_sources}')
        self.stdout.write(f'‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {active_sources}')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        self.stdout.write('\nüìà –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:')
        for priority in [1, 2, 3, 4]:
            count = FIPISourceMap.objects.filter(priority=priority).count()
            priority_name = {
                1: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ',
                2: '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
                3: '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
                4: '–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
            }[priority]
            self.stdout.write(f'  ‚Ä¢ {priority_name}: {count}')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
        self.stdout.write('\nüìà –ü–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö:')
        for data_type, _ in FIPISourceMap.DATA_TYPES:
            count = FIPISourceMap.objects.filter(data_type=data_type).count()
            if count > 0:
                self.stdout.write(f'  ‚Ä¢ {data_type}: {count}')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —ç–∫–∑–∞–º–µ–Ω–æ–≤
        self.stdout.write('\nüìà –ü–æ —Ç–∏–ø–∞–º —ç–∫–∑–∞–º–µ–Ω–æ–≤:')
        for exam_type, _ in FIPISourceMap.EXAM_TYPES:
            count = FIPISourceMap.objects.filter(exam_type=exam_type).count()
            if count > 0:
                self.stdout.write(f'  ‚Ä¢ {exam_type}: {count}')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º
        self.stdout.write('\nüìà –ü–æ —Ñ–æ—Ä–º–∞—Ç–∞–º —Ñ–∞–π–ª–æ–≤:')
        for file_format, _ in FIPISourceMap.FILE_FORMATS:
            count = FIPISourceMap.objects.filter(file_format=file_format).count()
            if count > 0:
                self.stdout.write(f'  ‚Ä¢ {file_format}: {count}')

    def show_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        self.stdout.write(
            self.style.WARNING('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:')
        )
        self.stdout.write('  --init-map     - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ë–î')
        self.stdout.write('  --test-scraping - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö')
        self.stdout.write('  --show-stats   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
        self.stdout.write(
            '  --priority N   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º N')
        self.stdout.write('')
        self.stdout.write('–ü—Ä–∏–º–µ—Ä—ã:')
        self.stdout.write('  python manage.py test_fipi_structure --init-map')
        self.stdout.write(
            '  python manage.py test_fipi_structure --test-scraping --priority 1')
        self.stdout.write('  python manage.py test_fipi_structure --show-stats')

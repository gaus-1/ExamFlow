"""
–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è keepalive —Å–µ—Ä–≤–∏—Å–æ–º –¥–ª—è ExamFlow 2.0
"""

import time
import logging
from django.core.management.base import BaseCommand
from core.keepalive_service import keepalive_service

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–£–ø—Ä–∞–≤–ª—è–µ—Ç keepalive —Å–µ—Ä–≤–∏—Å–æ–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã 24/7'
    
    def add_arguments(self, parser):
        parser.add_argument(
            'action',
            choices=['start', 'stop', 'status', 'check', 'wake'],
            help='–î–µ–π—Å—Ç–≤–∏–µ: start, stop, status, check, wake'
        )
        parser.add_argument(
            '--interval',
            type=int,
            default=300,
            help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300)'
        )
        parser.add_argument(
            '--daemon',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è start)'
        )
    
    def handle(self, *args, **options):
        action = options['action']
        
        if action == 'start':
            self.start_keepalive(options)
        elif action == 'stop':
            self.stop_keepalive()
        elif action == 'status':
            self.show_status()
        elif action == 'check':
            self.perform_check()
        elif action == 'wake':
            self.wake_up_services()
    
    def start_keepalive(self, options):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç keepalive —Å–µ—Ä–≤–∏—Å"""
        if keepalive_service.is_running:
            self.stdout.write(self.style.WARNING("Keepalive —Å–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")) # type: ignore
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        keepalive_service.check_interval = options['interval']
        
        if options['daemon']:
            self.stdout.write("üöÄ –ó–∞–ø—É—Å–∫ keepalive —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞...")
            keepalive_service.start()
            self.stdout.write(self.style.SUCCESS("‚úÖ Keepalive —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")) # type: ignore
        else:
            self.stdout.write(f"üöÄ –ó–∞–ø—É—Å–∫ keepalive —Å–µ—Ä–≤–∏—Å–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {options['interval']} —Å–µ–∫—É–Ω–¥...")
            self.stdout.write("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            try:
                keepalive_service.start()
                # –í –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –∂–¥–µ–º
                while keepalive_service.is_running:
                    time.sleep(1)
            except KeyboardInterrupt:
                self.stdout.write(self.style.WARNING("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ keepalive —Å–µ—Ä–≤–∏—Å–∞...")) # type: ignore
                keepalive_service.stop()
                self.stdout.write(self.style.SUCCESS("‚úÖ Keepalive —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")) # type: ignore
    
    def stop_keepalive(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç keepalive —Å–µ—Ä–≤–∏—Å"""
        if not keepalive_service.is_running:
            self.stdout.write(self.style.WARNING("Keepalive —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω")) # type: ignore
            return
        
        keepalive_service.stop()
        self.stdout.write(self.style.SUCCESS("‚úÖ Keepalive —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")) # type: ignore
    
    def show_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å keepalive —Å–µ—Ä–≤–∏—Å–∞"""
        stats = keepalive_service.get_stats()
        
        self.stdout.write("üìä –°—Ç–∞—Ç—É—Å Keepalive —Å–µ—Ä–≤–∏—Å–∞:")
        self.stdout.write(f"   –ó–∞–ø—É—â–µ–Ω: {'‚úÖ' if stats['is_running'] else '‚ùå'}")
        
        if stats['stats']['last_check']:
            self.stdout.write(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {stats['stats']['last_check']}")
        
        if stats['stats']['last_success']:
            self.stdout.write(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—Ö: {stats['stats']['last_success']}")
        
        self.stdout.write(f"   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {stats['stats']['checks_performed']}")
        self.stdout.write(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {stats['stats']['successful_checks']}")
        self.stdout.write(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['stats']['failed_checks']}")
        self.stdout.write(f"   –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ—É–¥–∞—á: {stats['stats']['consecutive_failures']}")
        
        if stats['stats']['checks_performed'] > 0:
            success_rate = (stats['stats']['successful_checks'] / stats['stats']['checks_performed']) * 100
            self.stdout.write(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
    
    def perform_check(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        self.stdout.write("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        health_results = keepalive_service.perform_health_check()
        
        self.stdout.write(f"üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health_results['overall_status']}")
        
        for component, result in health_results.items():
            if component in ['timestamp', 'overall_status', 'stats']:
                continue
            
            if isinstance(result, dict):
                status = result.get('status', 'unknown')
                status_icon = '‚úÖ' if status == 'success' else '‚ùå'
                self.stdout.write(f"   {component}: {status_icon} {status}")
                
                if 'response_time' in result:
                    self.stdout.write(f"      –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result['response_time']:.2f}s")
                
                if 'error' in result:
                    self.stdout.write(f"      –û—à–∏–±–∫–∞: {result['error']}")
    
    def wake_up_services(self):
        """–ë—É–¥–∏—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
        self.stdout.write("üåê –ü—Ä–æ–±—É–∂–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã...")
        
        website_ok = keepalive_service.wake_up_website()
        database_ok = keepalive_service.wake_up_database()
        
        self.stdout.write(f"   –°–∞–π—Ç: {'‚úÖ' if website_ok else '‚ùå'}")
        self.stdout.write(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if database_ok else '‚ùå'}")
        
        if website_ok and database_ok:
            self.stdout.write(self.style.SUCCESS("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–∑–±—É–∂–µ–Ω—ã")) # type: ignore
        else:
            self.stdout.write(self.style.WARNING("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±—É–¥–∏—Ç—å")) # type: ignore   

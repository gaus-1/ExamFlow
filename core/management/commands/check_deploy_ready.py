"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ExamFlow 2.0 –∫ –¥–µ–ø–ª–æ—é
"""

from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.conf import settings
from django.db import connection
import os
import sys


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å ExamFlow 2.0 –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render'

    def add_arguments(self, parser):
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥',
        )

    def handle(self, *args, **options):
        verbose = options['verbose']

        self.stdout.write(
            self.style.SUCCESS(
                'üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ ExamFlow 2.0 –∫ –¥–µ–ø–ª–æ—é')  # type: ignore
        )
        self.stdout.write('=' * 60)
        # –°—á–µ—Ç—á–∏–∫–∏
        total_checks = 0
        passed_checks = 0
        failed_checks = 0

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Django –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.stdout.write('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Django –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...')
        total_checks += 1
        try:
            call_command('check', '--deploy', verbosity=0)
            self.stdout.write(
                self.style.SUCCESS('   ‚úÖ Django –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞')  # type: ignore
            )
            passed_checks += 1
        except Exception as e:
            self.stdout.write(
                # type: ignore
                self.style.ERROR(f'   ‚ùå –û—à–∏–±–∫–∞ Django –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}')
            )
            failed_checks += 1

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.stdout.write('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
        total_checks += 1
        try:
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
                self.stdout.write(
                    self.style.SUCCESS('   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞')  # type: ignore
                )
                passed_checks += 1
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'   ‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}')  # type: ignore
            )
            failed_checks += 1

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
        self.stdout.write('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π...')
        total_checks += 1
        try:
            call_command('showmigrations', verbosity=0)
            self.stdout.write(
                self.style.SUCCESS('   ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ')  # type: ignore
            )
            passed_checks += 1
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {e}')  # type: ignore
            )
            failed_checks += 1

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        self.stdout.write('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...')
        total_checks += 1
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
            static_root = getattr(settings, 'STATIC_ROOT', None)
            if static_root and os.path.exists(static_root):
                static_files = os.listdir(static_root)
                if len(static_files) > 0:
                    self.stdout.write(
                        self.style.SUCCESS(
                            f'   ‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã ({len(static_files)} —Ñ–∞–π–ª–æ–≤)')  # type: ignore
                    )
                    passed_checks += 1
                else:
                    self.stdout.write(
                        self.style.WARNING(
                            '   ‚ö†Ô∏è  –ü–∞–ø–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç–∞')  # type: ignore
                    )
                    failed_checks += 1
            else:
                # –ï—Å–ª–∏ STATIC_ROOT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º STATICFILES_DIRS
                static_dirs = getattr(settings, 'STATICFILES_DIRS', [])
                if static_dirs:
                    self.stdout.write(
                        self.style.SUCCESS(
                            '   ‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —á–µ—Ä–µ–∑ STATICFILES_DIRS')  # type: ignore
                    )
                    passed_checks += 1
                else:
                    self.stdout.write(
                        self.style.WARNING(
                            '   ‚ö†Ô∏è  –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')  # type: ignore
                    )
                    failed_checks += 1
        except Exception as e:
            self.stdout.write(
                # type: ignore
                self.style.ERROR(f'   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}')
            )
            failed_checks += 1

        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.stdout.write('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...')
        total_checks += 1
        env_checks = 0
        required_vars = [
            'SECRET_KEY',
            'GEMINI_API_KEY',
            'TELEGRAM_BOT_TOKEN',
        ]

        for var in required_vars:
            if os.getenv(var):
                env_checks += 1
                if verbose:
                    self.stdout.write(f'   ‚úÖ {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            else:
                if verbose:
                    self.stdout.write(f'   ‚ö†Ô∏è  {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

        if env_checks >= len(required_vars) * 0.8:  # 80% –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            self.stdout.write(
                self.style.SUCCESS(
                    '   ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')  # type: ignore
            )
            passed_checks += 1
        else:
            self.stdout.write(
                self.style.WARNING(
                    '   ‚ö†Ô∏è  –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')  # type: ignore
            )
            failed_checks += 1

        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–µ–ø–ª–æ—è
        self.stdout.write('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–µ–ø–ª–æ—è...')
        total_checks += 1
        deploy_files = [
            'build.sh',
            'start.sh',
            'render.yaml',
            'requirements-prod.txt',
            'examflow_project/settings_prod.py',
        ]

        missing_files = []
        for file_path in deploy_files:
            if not os.path.exists(file_path):
                missing_files.append(file_path)

        if not missing_files:
            self.stdout.write(
                self.style.SUCCESS('   ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –¥–µ–ø–ª–æ—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç')  # type: ignore
            )
            passed_checks += 1
        else:
            self.stdout.write(
                # type: ignore
                self.style.ERROR(f'   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {", ".join(missing_files)}')
            )
            failed_checks += 1

        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤
        self.stdout.write('\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤...')
        total_checks += 1
        try:
            call_command('test', '--keepdb', verbosity=0)
            self.stdout.write(
                self.style.SUCCESS('   ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç')  # type: ignore
            )
            passed_checks += 1
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}')  # type: ignore
            )
            failed_checks += 1

        # –ò—Ç–æ–≥–∏
        self.stdout.write('\n' + '=' * 60)
        self.stdout.write('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:')
        self.stdout.write(f'   –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}')
        self.stdout.write(f'   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_checks}')
        self.stdout.write(f'   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_checks}')

        if failed_checks == 0:
            self.stdout.write(
                self.style.SUCCESS('\nüéâ ExamFlow 2.0 –ì–û–¢–û–í –ö –î–ï–ü–õ–û–Æ!')  # type: ignore
            )
            self.stdout.write('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
            self.stdout.write('1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Render')
            self.stdout.write('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
            self.stdout.write('3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π')
            self.stdout.write('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π')
        else:
            self.stdout.write(
                # type: ignore
                self.style.ERROR(f'\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {failed_checks} –ø—Ä–æ–±–ª–µ–º!')
            )
            self.stdout.write('–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.')
            sys.exit(1)

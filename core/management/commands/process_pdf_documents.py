"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from django.db.models import Q
import logging

from core.models import FIPIData
from core.data_ingestion.pdf_processor import process_pdf_document

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--limit',
            type=int,
            default=10,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        )
        parser.add_argument(
            '--data-type',
            choices=['demo_variant', 'specification', 'codefier', 'open_bank_task'],
            help='–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        )
    
    def handle(self, *args, **options):
        limit = options['limit']
        data_type = options.get('data_type')
        force = options['force']
        dry_run = options['dry_run']
        
        self.stdout.write(
            self.style.SUCCESS('üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤') # type: ignore
        )
        self.stdout.write('=' * 60)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            documents = self._get_documents_to_process(data_type, force, limit)  # type: ignore
            
            if not documents:
                self.stdout.write(
                    self.style.WARNING('‚ùå –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏') # type: ignore
                )
                return
            
            if dry_run:
                self._show_documents_preview(documents)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            self._process_documents(documents)
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}') # type: ignore
            )
            logger.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}')
    
    def _get_documents_to_process(self, data_type: str, force: bool, limit: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        query = FIPIData.objects.all()  # type: ignore
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
        if data_type:
            query = query.filter(data_type=data_type) # type: ignore
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if not force:
            query = query.filter(is_processed=False) # type: ignore
        
        # –§–∏–ª—å—Ç—Ä –ø–æ URL (—Ç–æ–ª—å–∫–æ PDF)
        query = query.filter(url__icontains='.pdf') # type: ignore
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–±–æ—Ä–∞
        query = query.order_by('collected_at') # type: ignore
        
        return query[:limit]
    
    def _show_documents_preview(self, documents):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.stdout.write(f'üìã –ù–∞–π–¥–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:')
        self.stdout.write('')
        
        for doc in documents:
            status = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω" if doc.is_processed else "‚è≥ –û–∂–∏–¥–∞–µ—Ç" # type: ignore            
            self.stdout.write(f'  ‚Ä¢ {doc.title}')
            self.stdout.write(f'    –¢–∏–ø: {doc.get_data_type_display()}')  # type: ignore
            self.stdout.write(f'    –°—Ç–∞—Ç—É—Å: {status}')
            self.stdout.write(f'    URL: {doc.url}')
            self.stdout.write(f'    –î–∞—Ç–∞ —Å–±–æ—Ä–∞: {doc.collected_at.strftime("%Y-%m-%d %H:%M")}')
            self.stdout.write('')
    
    def _process_documents(self, documents):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        total_documents = len(documents)
        processed_count = 0
        failed_count = 0
        
        self.stdout.write(f'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {total_documents} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...')
        self.stdout.write('')
        
        for i, document in enumerate(documents, 1):
            self.stdout.write(
                f'[{i}/{total_documents}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {document.title[:50]}...'
            )
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                result = process_pdf_document(document)
                
                if result['status'] == 'completed':
                    processed_count += 1
                    self.stdout.write(
                        self.style.SUCCESS( # type: ignore
                            f'  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result["chunks_saved"]} —á–∞–Ω–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'
                        )
                    )
                else:
                    failed_count += 1
                    self.stdout.write(
                        self.style.ERROR( # type: ignore
                            f'  ‚ùå –û—à–∏–±–∫–∞: {result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}'
                        )
                    )
                
            except Exception as e:
                failed_count += 1
                self.stdout.write(
                    self.style.ERROR(f'  ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}') # type: ignore
                )
                logger.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document.id}: {e}')
            
            self.stdout.write('')
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write('=' * 60)
        self.stdout.write(
            self.style.SUCCESS(f'üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:') # type: ignore
        )
        self.stdout.write(f'  –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_documents}')
        self.stdout.write(f'  –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}')
        self.stdout.write(f'  –û—à–∏–±–æ–∫: {failed_count}')
        
        if processed_count > 0:
            success_rate = (processed_count / total_documents) * 100
            self.stdout.write(f'  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%')

"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
"""

from django.core.management.base import BaseCommand
from django.db import connection

class Command(BaseCommand):  # type: ignore
    help = "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã"

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã'
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...')  # type: ignore
        )

        try:
            with connection.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                cursor.execute("SELECT 1 FROM pg_extension WHERE extname = 'vector';")
                if not cursor.fetchone():
                    self.stdout.write(
                        self.style.WARNING(
                            '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector...')  # type: ignore
                    )
                    cursor.execute("CREATE EXTENSION IF NOT EXISTS vector;")
                    self.stdout.write(
                        self.style.SUCCESS(
                            '‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')  # type: ignore
                    )
                else:
                    self.stdout.write(
                        self.style.SUCCESS(
                            '‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')  # type: ignore
                    )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ DataChunk
                cursor.execute("""
                    SELECT 1 FROM information_schema.tables
                    WHERE table_name = 'core_datachunk' AND table_schema = 'public';
                """)
                if not cursor.fetchone():
                    self.stdout.write(
                        # type: ignore
                        self.style.ERROR(
                            '‚ùå –¢–∞–±–ª–∏—Ü–∞ core_datachunk –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏.')
                    )
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ embedding_vector
                cursor.execute("""
                    SELECT 1 FROM information_schema.columns
                    WHERE table_name = 'core_datachunk' AND column_name = 'embedding_vector';
                """)
                if not cursor.fetchone():
                    self.stdout.write(
                        self.style.ERROR(
                            '‚ùå –ü–æ–ª–µ embedding_vector –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é 0003_setup_pgvector.')  # type: ignore
                    )
                    return

                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
                if options['force']:
                    self.stdout.write(
                        self.style.WARNING(
                            '–£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω–¥–µ–∫—Å—ã...')  # type: ignore
                    )
                    cursor.execute("DROP INDEX IF EXISTS datachunk_embedding_idx;")
                    cursor.execute("DROP INDEX IF EXISTS datachunk_subject_idx;")
                    cursor.execute("DROP INDEX IF EXISTS datachunk_document_type_idx;")

                # –°–æ–∑–¥–∞–µ–º ivfflat –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                self.stdout.write(
                    self.style.WARNING(
                        '–°–æ–∑–¥–∞–µ–º ivfflat –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...')  # type: ignore
                )
                cursor.execute("""
                    CREATE INDEX CONCURRENTLY IF NOT EXISTS datachunk_embedding_idx
                    ON core_datachunk USING ivfflat (embedding_vector vector_cosine_ops)
                    WITH (lists = 100);
                """)

                # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                self.stdout.write(
                    self.style.WARNING(
                        '–°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏...')  # type: ignore
                )
                cursor.execute("""
                    CREATE INDEX CONCURRENTLY IF NOT EXISTS datachunk_subject_idx
                    ON core_datachunk (subject);
                """)
                cursor.execute("""
                    CREATE INDEX CONCURRENTLY IF NOT EXISTS datachunk_document_type_idx
                    ON core_datachunk (document_type);
                """)

                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ')  # type: ignore
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                cursor.execute("SELECT COUNT(*) FROM core_datachunk;")
                chunk_count = cursor.fetchone()[0]

                cursor.execute(
                    "SELECT COUNT(*) FROM core_datachunk WHERE embedding_vector IS NOT NULL;")
                vector_count = cursor.fetchone()[0]

                self.stdout.write(
                    self.style.SUCCESS(  # type: ignore
                        'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {chunk_count} —á–∞–Ω–∫–æ–≤, {vector_count} —Å –≤–µ–∫—Ç–æ—Ä–∞–º–∏'
                    )
                )

        except Exception as e:
            self.stdout.write(
                # type: ignore
                self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ pgvector: {e}')
            )
            return

        self.stdout.write(
            self.style.SUCCESS('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pgvector –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')  # type: ignore
        )

"""
–ö–æ–º–∞–Ω–¥–∞ Django –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
"""

from django.core.management.base import BaseCommand
import os
import signal
import time
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º ExamFlow'

    def add_arguments(self, parser):
        parser.add_argument(
            'action',
            choices=['start', 'stop', 'restart', 'status'],
            help='–î–µ–π—Å—Ç–≤–∏–µ: start, stop, restart –∏–ª–∏ status',
        )
        parser.add_argument(
            '--daemon',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ',
        )

    def handle(self, *args, **options):
        action = options['action']

        if action == 'start':
            self.start_bot(options.get('daemon', False))
        elif action == 'stop':
            self.stop_bot()
        elif action == 'restart':
            self.restart_bot()
        elif action == 'status':
            self.show_status()

    def start_bot(self, daemon=False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞"""
        self.stdout.write(
            self.style.SUCCESS('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ ExamFlow...')  # type: ignore
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç
        if self.is_bot_running():
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è  –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!')  # type: ignore
            )
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            from django.conf import settings
            token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
            if not token:
                self.stdout.write(
                    # type: ignore
                    self.style.ERROR('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!')
                )
                self.stdout.write(
                    '   –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ Environment Variables')
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
            try:
                from telegram_bot.bot_main import get_bot
                bot = get_bot()
                if not bot:
                    self.stdout.write(
                        # type: ignore
                        self.style.ERROR('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞')
                    )
                    return
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}')  # type: ignore
                )
                return

            if daemon:
                # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                self.stdout.write('üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...')

                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
                try:
                    from django.core.management import call_command
                    call_command('run_bot_polling', '--daemon')
                    self.stdout.write(
                        self.style.SUCCESS('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ')  # type: ignore
                    )
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}')  # type: ignore
                    )
            else:
                # –ó–∞–ø—É—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
                self.stdout.write('üîÑ –ó–∞–ø—É—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ...')
                self.stdout.write(
                    self.style.WARNING('üìù –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏')  # type: ignore
                )

                try:
                    from django.core.management import call_command
                    call_command('run_bot_polling')
                except KeyboardInterrupt:
                    self.stdout.write(
                        self.style.WARNING(
                            '\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')  # type: ignore
                    )
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}')  # type: ignore
                    )

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}')  # type: ignore
            )

    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        self.stdout.write('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...')

        # –ß–∏—Ç–∞–µ–º PID –∏–∑ —Ñ–∞–π–ª–∞
        pid_file = 'bot.pid'
        if not os.path.exists(pid_file):
            self.stdout.write(
                self.style.WARNING(
                    '‚ö†Ô∏è  PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–ø—É—â–µ–Ω.')  # type: ignore
            )
            return

        try:
            with open(pid_file, 'r') as f:
                pid = int(f.read().strip())

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            os.kill(pid, signal.SIGTERM)

            # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
            os.remove(pid_file)

            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (PID: {pid})')  # type: ignore
            )

        except (ValueError, ProcessLookupError) as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}')  # type: ignore
            )
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PID —Ñ–∞–π–ª
            if os.path.exists(pid_file):
                os.remove(pid_file)

    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        self.stdout.write('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...')
        self.stop_bot()
        time.sleep(1)
        self.start_bot(daemon=True)

    def show_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        if self.is_bot_running():
            pid = self.get_bot_pid()
            self.stdout.write(
                self.style.SUCCESS(
                    f'üü¢ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {pid})')  # type: ignore
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –±–æ—Ç
            self.stdout.write('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞...')

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ Telegram API
            try:
                import requests
                from django.conf import settings

                bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
                if bot_token:
                    url = f"https://api.telegram.org/bot{bot_token}/getMe"
                    response = requests.get(url, timeout=5)

                    if response.status_code == 200:
                        bot_info = response.json()
                        if bot_info.get('ok'):
                            bot_name = bot_info['result']['username']
                            self.stdout.write(
                                self.style.SUCCESS(
                                    f'‚úÖ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç: @{bot_name}')  # type: ignore
                            )
                        else:
                            self.stdout.write(
                                # type: ignore
                                self.style.ERROR('‚ùå –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã')
                            )
                    else:
                        self.stdout.write(
                            # type: ignore
                            self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}')
                        )
                else:
                    self.stdout.write(
                        self.style.WARNING(
                            '‚ö†Ô∏è  TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')  # type: ignore
                    )

            except Exception as e:
                self.stdout.write(
                    self.style.WARNING(
                        f'‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API: {str(e)}')  # type: ignore
                )
        else:
            self.stdout.write(
                self.style.ERROR('üî¥ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')  # type: ignore
            )

    def is_bot_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç"""
        pid_file = 'bot.pid'
        if not os.path.exists(pid_file):
            return False

        try:
            with open(pid_file, 'r') as f:
                pid = int(f.read().strip())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            os.kill(pid, 0)  # –ù–µ —É–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
            return True

        except (ValueError, ProcessLookupError, OSError):
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PID —Ñ–∞–π–ª
            if os.path.exists(pid_file):
                os.remove(pid_file)
            return False

    def get_bot_pid(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PID –±–æ—Ç–∞"""
        pid_file = 'bot.pid'
        if os.path.exists(pid_file):
            with open(pid_file, 'r') as f:
                return int(f.read().strip())
        return None

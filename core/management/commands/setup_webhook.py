"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram webhook
"""

import requests  # type: ignore
from django.core.management.base import BaseCommand  # type: ignore
from django.conf import settings  # type: ignore


class Command(BaseCommand):
    """–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –¥–ª—è Telegram –±–æ—Ç–∞"""
    help = '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è Telegram –±–æ—Ç–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            'action',
            type=str,
            choices=['set', 'delete', 'info'],
            help='–î–µ–π—Å—Ç–≤–∏–µ: set (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å), delete (—É–¥–∞–ª–∏—Ç—å), info (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)'
        )
        parser.add_argument(
            '--url',
            type=str,
            default=None,
            help='URL –¥–ª—è webhook (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ SITE_URL)'
        )

    def handle(self, *args, **options):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
        token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
        if not token:
            self.stdout.write(
                self.style.ERROR('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
            )
            return

        action = options['action']
        
        if action == 'set':
            self._set_webhook(token, options.get('url'))
        elif action == 'delete':
            self._delete_webhook(token)
        elif action == 'info':
            self._get_webhook_info(token)

    def _set_webhook(self, token, custom_url=None):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook"""
        site_url = getattr(settings, 'SITE_URL', 'https://examflow.ru')
        webhook_url = custom_url or f"{site_url}/bot/webhook/"
        
        self.stdout.write(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {webhook_url}")
        
        api_url = f"https://api.telegram.org/bot{token}/setWebhook"
        data = {
            'url': webhook_url,
            'allowed_updates': ['message', 'callback_query']
        }
        
        try:
            response = requests.post(api_url, json=data, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
                )
                self.stdout.write(f"üìç URL: {webhook_url}")
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}')
                )
                
        except requests.exceptions.RequestException as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}')
            )

    def _delete_webhook(self, token):
        """–£–¥–∞–ª—è–µ—Ç webhook"""
        self.stdout.write("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ webhook...")
        
        api_url = f"https://api.telegram.org/bot{token}/deleteWebhook"
        
        try:
            response = requests.post(api_url, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')
                )
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}')
                )
                
        except requests.exceptions.RequestException as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}')
            )

    def _get_webhook_info(self, token):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook"""
        self.stdout.write("‚ÑπÔ∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook...")
        
        api_url = f"https://api.telegram.org/bot{token}/getWebhookInfo"
        
        try:
            response = requests.get(api_url, timeout=30)
            result = response.json()
            
            if result.get('ok'):
                info = result.get('result', {})
                
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:')
                )
                self.stdout.write(f"üìç URL: {info.get('url', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
                self.stdout.write(f"üîÑ Pending updates: {info.get('pending_update_count', 0)}")
                self.stdout.write(f"‚è∞ Last error date: {info.get('last_error_date', '–ù–µ—Ç')}")
                self.stdout.write(f"‚ùå Last error message: {info.get('last_error_message', '–ù–µ—Ç')}")
                
                if info.get('url'):
                    self.stdout.write("‚úÖ Webhook –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    self.stdout.write("‚ö†Ô∏è  Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {result.get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}')
                )
                
        except requests.exceptions.RequestException as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}')
            )
"""
–ö–æ–º–∞–Ω–¥–∞ Django –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram webhook
"""

import requests
from django.core.management.base import BaseCommand
from django.conf import settings


class Command(BaseCommand):
    help = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook –¥–ª—è –±–æ—Ç–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            'action',
            choices=['set', 'delete', 'info'],
            help='–î–µ–π—Å—Ç–≤–∏–µ: set (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å), delete (—É–¥–∞–ª–∏—Ç—å) –∏–ª–∏ info (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)',
        )
        parser.add_argument(
            '--url',
            type=str,
            help='URL –¥–ª—è webhook (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ SITE_URL)',
        )

    def handle(self, *args, **options):
        action = options['action']
        
        bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
        if not bot_token:
            self.stdout.write(
                self.style.ERROR('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings')
            )
            return
        
        if action == 'set':
            self.set_webhook(bot_token, options.get('url'))
        elif action == 'delete':
            self.delete_webhook(bot_token)
        elif action == 'info':
            self.get_webhook_info(bot_token)

    def set_webhook(self, bot_token, custom_url=None):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook"""
        site_url = getattr(settings, 'SITE_URL', 'https://examflow.ru')
        webhook_url = custom_url or f"{site_url}/bot/webhook/"
        
        self.stdout.write(f'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {webhook_url}')
        
        url = f"https://api.telegram.org/bot{bot_token}/setWebhook"
        data = {
            'url': webhook_url,
            'allowed_updates': ['message', 'callback_query'],
            'drop_pending_updates': True
        }
        
        try:
            response = requests.post(url, json=data, timeout=10)
            result = response.json()
            
            if result.get('ok'):
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
                )
                self.stdout.write(f'   URL: {webhook_url}')
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {result.get("description", "Unknown")}')
                )
                
        except requests.RequestException as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}')
            )

    def delete_webhook(self, bot_token):
        """–£–¥–∞–ª—è–µ—Ç webhook"""
        self.stdout.write('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ webhook...')
        
        url = f"https://api.telegram.org/bot{bot_token}/deleteWebhook"
        data = {'drop_pending_updates': True}
        
        try:
            response = requests.post(url, json=data, timeout=10)
            result = response.json()
            
            if result.get('ok'):
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')
                )
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {result.get("description", "Unknown")}')
                )
                
        except requests.RequestException as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}')
            )

    def get_webhook_info(self, bot_token):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook"""
        self.stdout.write('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook...')
        
        url = f"https://api.telegram.org/bot{bot_token}/getWebhookInfo"
        
        try:
            response = requests.get(url, timeout=10)
            result = response.json()
            
            if result.get('ok'):
                webhook_info = result['result']
                
                self.stdout.write(
                    self.style.SUCCESS('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:')
                )
                self.stdout.write(f'   URL: {webhook_info.get("url", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")}')
                self.stdout.write(f'   –°—Ç–∞—Ç—É—Å: {"–ê–∫—Ç–∏–≤–µ–Ω" if webhook_info.get("url") else "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"}')
                self.stdout.write(f'   –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {webhook_info.get("pending_update_count", 0)}')
                
                if webhook_info.get('last_error_date'):
                    self.stdout.write(
                        self.style.WARNING(f'   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {webhook_info.get("last_error_message", "Unknown")}')
                    )
                
                allowed_updates = webhook_info.get('allowed_updates', [])
                if allowed_updates:
                    self.stdout.write(f'   –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {", ".join(allowed_updates)}')
                
            else:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {result.get("description", "Unknown")}')
                )
                
        except requests.RequestException as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}')
            )

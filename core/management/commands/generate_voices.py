"""
–ö–æ–º–∞–Ω–¥–∞ Django –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

from django.core.management.base import BaseCommand, CommandError
from core.voice_service import voice_service
from core.models import Task  # type: ignore
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π'

    def add_arguments(self, parser):
        parser.add_argument(
            '--task-id',
            type=int,
            help='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è',
        )
        parser.add_argument(
            '--limit',
            type=int,
            default=50,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)',
        )
        parser.add_argument(
            '--cleanup',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)',
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã',
        )

    def handle(self, *args, **options):
        if options['cleanup']:
            self.cleanup_old_files()
            return

        if options['task_id']:
            self.generate_single_task(options['task_id'])
        else:
            self.generate_multiple_tasks(options['limit'], options['force'])

    def generate_single_task(self, task_id):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        try:
            task = Task.objects.get(id=task_id)
            self.stdout.write('üé§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: {task.title}')

            result = voice_service.generate_task_audio(task)

            if result and result['task_audio']:
                self.stdout.write(
                    self.style.SUCCESS(
                        '‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: {result["task_audio"]}')  # type: ignore
                )
                if result['solution_audio']:
                    self.stdout.write(
                        self.style.SUCCESS(
                            '‚úÖ –ê—É–¥–∏–æ —Ä–µ—à–µ–Ω–∏—è: {result["solution_audio"]}')  # type: ignore
                    )
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ')  # type: ignore
                )

        except Task.DoesNotExist:
            raise CommandError('‚ùå –ó–∞–¥–∞–Ω–∏–µ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        except Exception:
            raise CommandError('‚ùå –û—à–∏–±–∫–∞: {str(e)}')

    def generate_multiple_tasks(self, limit, force):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–¥–∞–Ω–∏–π"""
        self.stdout.write(
            self.style.SUCCESS(
                'üé§ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...')  # type: ignore
        )

        # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
        if force:
            tasks = Task.objects.filter(is_active=True)[:limit]
            self.stdout.write('üìã –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è {tasks.count()} –∑–∞–¥–∞–Ω–∏–π')
        else:
            tasks = Task.objects.filter(is_active=True, audio_file__isnull=True)[:limit]
            self.stdout.write('üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è {tasks.count()} –∑–∞–¥–∞–Ω–∏–π –±–µ–∑ –∞—É–¥–∏–æ')

        if not tasks:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è  –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')  # type: ignore
            )
            return

        generated_count = 0
        error_count = 0

        for i, task in enumerate(tasks, 1):
            try:
                self.stdout.write('[{i}/{len(tasks)}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {task.title[:50]}...')

                result = voice_service.generate_task_audio(task)

                if result and result['task_audio']:
                    generated_count += 1
                    self.stdout.write(
                        self.style.SUCCESS(
                            '  ‚úÖ –°–æ–∑–¥–∞–Ω–æ: {result["task_audio"]}')  # type: ignore
                    )
                else:
                    error_count += 1
                    self.stdout.write(
                        self.style.ERROR('  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ')  # type: ignore
                    )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–¥–∞–Ω–∏–π
                if i % 10 == 0:
                    self.stdout.write(
                        self.style.WARNING(
                            'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(tasks)} | –°–æ–∑–¥–∞–Ω–æ: {generated_count} | –û—à–∏–±–æ–∫: {error_count}')  # type: ignore
                    )

            except Exception:
                error_count += 1
                self.stdout.write(
                    self.style.ERROR('  ‚ùå –û—à–∏–±–∫–∞: {str(e)}')  # type: ignore
                )
                continue

        self.stdout.write(
            self.style.SUCCESS(  # type: ignore
                'üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!'  # type: ignore
            )
        )
        self.stdout.write(
            self.style.SUCCESS(  # type: ignore
                'üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {generated_count}'  # type: ignore
            )
        )
        if error_count > 0:
            self.stdout.write(
                self.style.WARNING(  # type: ignore
                    '‚ö†Ô∏è  –û—à–∏–±–æ–∫: {error_count}'  # type: ignore
                )
            )

    def cleanup_old_files(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã"""
        self.stdout.write('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤...')

        deleted_count = voice_service.cleanup_old_audio(days=30)

        self.stdout.write(
            self.style.SUCCESS(  # type: ignore
                '‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}'  # type: ignore
            )
        )

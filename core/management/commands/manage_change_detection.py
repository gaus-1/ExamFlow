"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π Change Data Capture
"""

from django.core.management.base import BaseCommand

from core.data_ingestion.change_detector import get_cdc_service


class Command(BaseCommand):
    help = '–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π'

    def add_arguments(self, parser):
        parser.add_argument(
            'action',
            choices=['start', 'stop', 'status', 'check', 'stats', 'recent'],
            help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
        )
        parser.add_argument(
            '--source-ids',
            nargs='+',
            help='ID –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏'
        )
        parser.add_argument(
            '--hours',
            type=int,
            default=24,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π'
        )
        parser.add_argument(
            '--monitor',
            action='store_true',
            help='–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏'
        )

    def handle(self, *args, **options):
        action = options['action']

        if action == 'start':
            self.start_service()
        elif action == 'stop':
            self.stop_service()
        elif action == 'status':
            self.show_status()
        elif action == 'check':
            self.check_changes(options)
        elif action == 'stats':
            self.show_statistics()
        elif action == 'recent':
            self.show_recent_changes(options)

    def start_service(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.stdout.write(
            self.style.SUCCESS(
                'üîÑ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...')  # type: ignore
        )

        try:
            from core.data_ingestion.change_detector import start_change_monitoring
            start_change_monitoring()
            self.stdout.write(
                self.style.SUCCESS(
                    '‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞')  # type: ignore
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}')  # type: ignore
            )

    def stop_service(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.stdout.write(
            self.style.WARNING(
                'üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...')  # type: ignore
        )

        try:
            from core.data_ingestion.change_detector import stop_change_monitoring
            stop_change_monitoring()
            self.stdout.write(
                self.style.SUCCESS(
                    '‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')  # type: ignore
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}')  # type: ignore
            )

    def show_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        self.stdout.write(
            self.style.SUCCESS('üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π')  # type: ignore
        )
        self.stdout.write('=' * 60)

        try:
            service = get_cdc_service()

            status_icon = "üü¢" if service.is_running else "üî¥"
            self.stdout.write(
                f'–°–µ—Ä–≤–∏—Å: {status_icon} {"–ó–∞–ø—É—â–µ–Ω" if service.is_running else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}')  # type: ignore
            self.stdout.write(f'–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {service.check_interval} —Å–µ–∫—É–Ω–¥')

            if service.is_running:
                stats = service.get_statistics()
                detector_stats = stats['detector_stats']

                self.stdout.write('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
                self.stdout.write(
                    f'  –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {detector_stats["total_changes"]}')
                self.stdout.write(f'  –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {detector_stats["queue_size"]}')
                self.stdout.write(f'  –ù–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {stats["recent_changes"]}')

                change_counts = detector_stats['change_counts']
                if any(change_counts.values()):
                    self.stdout.write('\nüìã –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º:')
                    for change_type, count in change_counts.items():
                        if count > 0:
                            icon = {
                                'new': 'üÜï',
                                'updated': 'üîÑ',
                                'deleted': 'üóëÔ∏è'
                            }.get(change_type, 'üìå')
                            self.stdout.write(f'  {icon} {change_type}: {count}')

        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}')  # type: ignore
            )

    def check_changes(self, options):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        self.stdout.write(
            self.style.SUCCESS('üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...')  # type: ignore
        )

        try:
            service = get_cdc_service()
            source_ids = options.get('source_ids')

            changes = service.force_check(source_ids)

            if not changes:
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ')
                )
                return

            self.stdout.write(
                self.style.SUCCESS(f'üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π:')
            )
            self.stdout.write('')

            for change in changes:
                icon = {
                    'new': 'üÜï',
                    'updated': 'üîÑ',
                    'deleted': 'üóëÔ∏è'
                }.get(change.change_type.value, 'üìå')

                self.stdout.write(f'{icon} {change.source_id}')
                self.stdout.write(f'   –¢–∏–ø: {change.change_type.value}')
                self.stdout.write(f'   URL: {change.url}')
                self.stdout.write(
                    f'   –í—Ä–µ–º—è: {change.timestamp.strftime("%Y-%m-%d %H:%M:%S")}')
                if change.metadata.get('subject'):
                    self.stdout.write(f'   –ü—Ä–µ–¥–º–µ—Ç: {change.metadata["subject"]}')
                self.stdout.write('')

        except Exception as e:
            self.stdout.write(
                # type: ignore
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}')
            )

    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.stdout.write(
            self.style.SUCCESS(
                'üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')  # type: ignore
        )
        self.stdout.write('=' * 60)

        try:
            service = get_cdc_service()
            stats = service.get_statistics()

            # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
            self.stdout.write('üîß –°–µ—Ä–≤–∏—Å:')
            self.stdout.write(
                f'  –°—Ç–∞—Ç—É—Å: {"üü¢ –ó–∞–ø—É—â–µ–Ω" if stats["is_running"] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}')
            self.stdout.write(f'  –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {stats["check_interval"]} —Å–µ–∫')

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
            detector_stats = stats['detector_stats']
            self.stdout.write('\nüìä –î–µ—Ç–µ–∫—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π:')
            self.stdout.write(f'  –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {detector_stats["total_changes"]}')
            self.stdout.write(f'  –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: {detector_stats["queue_size"]}')

            change_counts = detector_stats['change_counts']
            self.stdout.write('\nüìã –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º:')
            for change_type, count in change_counts.items():
                icon = {
                    'new': 'üÜï',
                    'updated': 'üîÑ',
                    'deleted': 'üóëÔ∏è'
                }.get(change_type, 'üìå')
                self.stdout.write(f'  {icon} {change_type}: {count}')

            # –ù–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.stdout.write(f'\n‚è∞ –ù–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {stats["recent_changes"]}')

        except Exception as e:
            self.stdout.write(
                # type: ignore
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}')
            )

    def show_recent_changes(self, options):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        hours = options['hours']

        self.stdout.write(
            self.style.SUCCESS(
                f'‚è∞ –ù–µ–¥–∞–≤–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤')  # type: ignore
        )
        self.stdout.write('=' * 60)

        try:
            service = get_cdc_service()
            recent_changes = service.detector.get_recent_changes(hours)

            if not recent_changes:
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –ù–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                )
                return

            self.stdout.write(f'üìã –ù–∞–π–¥–µ–Ω–æ {len(recent_changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π:')
            self.stdout.write('')

            for change in recent_changes:
                icon = {
                    'new': 'üÜï',
                    'updated': 'üîÑ',
                    'deleted': 'üóëÔ∏è'
                }.get(change.change_type.value, 'üìå')

                self.stdout.write(f'{icon} {change.source_id}')
                self.stdout.write(f'   –¢–∏–ø: {change.change_type.value}')
                self.stdout.write(f'   URL: {change.url}')
                self.stdout.write(
                    f'   –í—Ä–µ–º—è: {change.timestamp.strftime("%Y-%m-%d %H:%M:%S")}')
                if change.metadata.get('subject'):
                    self.stdout.write(f'   –ü—Ä–µ–¥–º–µ—Ç: {change.metadata["subject"]}')
                if change.metadata.get('data_type'):
                    self.stdout.write(f'   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {change.metadata["data_type"]}')
                self.stdout.write('')

        except Exception as e:
            self.stdout.write(
                # type: ignore
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}')
            )

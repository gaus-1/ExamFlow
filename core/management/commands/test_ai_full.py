#!/usr/bin/env python3
"""
Django Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI —Å–∏—Å—Ç–µ–º—ã
"""

from django.core.management.base import BaseCommand
from django.conf import settings
import os
import django
import requests
import json
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

from core.container import Container
from learning.models import Subject, Task
from telegram_auth.models import TelegramUser


class Command(BaseCommand):
    help = '–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–∏—Å—Ç–µ–º—ã'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –°–ò–°–¢–ï–ú–´'))  # type: ignore
        self.stdout.write('=' * 60)
        
        # 1. –¢–µ—Å—Ç AI Orchestrator –Ω–∞–ø—Ä—è–º—É—é
        self.test_ai_orchestrator()
        
        # 2. –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.test_database()
        
        # 3. –¢–µ—Å—Ç Container
        self.test_container()
        
        # 4. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.final_report()

    def test_ai_orchestrator(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI Orchestrator –Ω–∞–ø—Ä—è–º—É—é"""
        self.stdout.write('\nü§ñ –¢–ï–°–¢ AI ORCHESTRATOR:')
        
        try:
            ai_orchestrator = Container.ai_orchestrator()
            
            test_prompts = [
                "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
                "–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–µ–º—É –ü–∏—Ñ–∞–≥–æ—Ä–∞",
                "–ü–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ + 5x + 6 = 0"
            ]
            
            for i, prompt in enumerate(test_prompts, 1):
                self.stdout.write(f'\n  üìù –¢–µ—Å—Ç {i}: {prompt}')
                
                start_time = time.time()
                try:
                    response = ai_orchestrator.ask(prompt)
                    end_time = time.time()
                    
                    if isinstance(response, dict) and 'answer' in response:
                        answer = response['answer'][:100] + '...' if len(response['answer']) > 100 else response['answer']
                        self.stdout.write(f'  ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {end_time - start_time:.2f}—Å: {answer}')
                    else:
                        self.stdout.write(f'  ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {type(response)}')
                        
                except Exception as e:
                    self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞ AI: {str(e)}')
                    
        except Exception as e:
            self.stdout.write(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI Orchestrator: {str(e)}')

    def test_database(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write('\nüóÑÔ∏è –¢–ï–°–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•:')
        
        try:
            # –¢–µ—Å—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            subjects = Subject.objects.all()  # type: ignore
            self.stdout.write(f'  ‚úÖ –ü—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –ë–î: {subjects.count()}')
            
            # –¢–µ—Å—Ç –∑–∞–¥–∞—á
            tasks = Task.objects.all()  # type: ignore
            self.stdout.write(f'  ‚úÖ –ó–∞–¥–∞—á –≤ –ë–î: {tasks.count()}')
            
            # –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = TelegramUser.objects.all()  # type: ignore
            self.stdout.write(f'  ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {users.count()}')
            
            if subjects.count() == 0:
                self.stdout.write('  ‚ö†Ô∏è –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ load_sample_data')
                
        except Exception as e:
            self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞ –ë–î: {str(e)}')

    def test_container(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Container"""
        self.stdout.write('\nüì¶ –¢–ï–°–¢ CONTAINER:')
        
        try:
            # –¢–µ—Å—Ç AI Orchestrator
            ai = Container.ai_orchestrator()  # type: ignore
            self.stdout.write('  ‚úÖ AI Orchestrator —Å–æ–∑–¥–∞–Ω')
            
            # –¢–µ—Å—Ç Notifier
            notifier = Container.notifier()  # type: ignore
            self.stdout.write('  ‚úÖ Notifier —Å–æ–∑–¥–∞–Ω')
            
            # –¢–µ—Å—Ç Cache
            cache = Container.cache()
            self.stdout.write('  ‚úÖ Cache —Å–æ–∑–¥–∞–Ω')
            
        except Exception as e:
            self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞ Container: {str(e)}')

    def final_report(self):
        """–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        self.stdout.write('\n' + '=' * 60)
        self.stdout.write(self.style.SUCCESS('üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!'))  # type: ignore
        self.stdout.write('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
        self.stdout.write('  ‚Ä¢ –ï—Å–ª–∏ AI —Ä–∞–±–æ—Ç–∞–µ—Ç - –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python manage.py runserver')
        self.stdout.write('  ‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –∑–∞–≥—Ä—É–∑–∏—Ç–µ: python manage.py load_sample_data')
        self.stdout.write('  ‚Ä¢ –î–ª—è –±–æ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python -m telegram_bot.bot_main')

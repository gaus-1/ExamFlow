from django.core.management.base import BaseCommand
from core.models import Subject, Task


SUBJECTS_DATA = [
    ("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ï–ì–≠"),
    ("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ï–ì–≠"),
    ("–§–∏–∑–∏–∫–∞", "–ï–ì–≠"),
    ("–•–∏–º–∏—è", "–ï–ì–≠"),
    ("–ë–∏–æ–ª–æ–≥–∏—è", "–ï–ì–≠"),
    ("–ò—Å—Ç–æ—Ä–∏—è", "–ï–ì–≠"),
    ("–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–ï–ì–≠"),
    ("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ï–ì–≠"),
]

SAMPLE_TASKS = [
    ("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–†–µ—à–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è", "–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: x¬≤ - 5x + 6 = 0", 2, "x = 2, x = 3"),
    ("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ü–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞", "–ù–∞–π–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ 3, 4, 5", 1, "6"),
    ("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–∏", "–ù–∞–π–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ f(x) = x¬≥ - 2x + 1", 3, "3x¬≤ - 2"),
    ("–§–∏–∑–∏–∫–∞", "–ó–∞–∫–æ–Ω –û–º–∞", "–ü—Ä–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏ 12 –í —Å–∏–ª–∞ —Ç–æ–∫–∞ —Ä–∞–≤–Ω–∞ 2 –ê. –ù–∞–π–¥–∏—Ç–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ", 1, "6 –û–º"),
    ("–§–∏–∑–∏–∫–∞", "–ö–∏–Ω–µ–º–∞—Ç–∏–∫–∞", "–¢–µ–ª–æ –¥–≤–∏–∂–µ—Ç—Å—è —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º 2 –º/—Å¬≤. –ö–∞–∫–æ–π –ø—É—Ç—å –ø—Ä–æ–π–¥—ë—Ç –∑–∞ 5 —Å–µ–∫—É–Ω–¥?", 2, "25 –º"),
    ("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è", "–í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –≤ —Å–ª–æ–≤–µ: –ø—Ä_–∫—Ä–∞—Å–Ω—ã–π", 1, "–µ"),
    ("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–°–∏–Ω—Ç–∞–∫—Å–∏—Å", "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", 2, "—Å–ª–æ–∂–Ω–æ—Å–æ—á–∏–Ω–µ–Ω–Ω–æ–µ"),
    ("–•–∏–º–∏—è", "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞", "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏", 2, "2"),
    ("–ò—Å—Ç–æ—Ä–∏—è", "–î—Ä–µ–≤–Ω—è—è –†—É—Å—å", "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–æ –∫—Ä–µ—â–µ–Ω–∏–µ –†—É—Å–∏?", 1, "988"),
    ("–ë–∏–æ–ª–æ–≥–∏—è", "–ö–ª–µ—Ç–∫–∞", "–ù–∞–∑–æ–≤–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Ä–≥–∞–Ω–æ–∏–¥—ã —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–π –∫–ª–µ—Ç–∫–∏", 2, "—è–¥—Ä–æ, –º–∏—Ç–æ—Ö–æ–Ω–¥—Ä–∏–∏, —Ö–ª–æ—Ä–æ–ø–ª–∞—Å—Ç—ã"),
]


class Command(BaseCommand):
    help = "–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è"

    def handle(self, *args, **options):
        created_subjects = 0
        created_tasks = 0

        # –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–º–µ—Ç—ã
        for name, exam_type in SUBJECTS_DATA:
            subject, created = Subject.objects.get_or_create(
                name=name,
                defaults={"exam_type": exam_type}
            )
            if created:
                created_subjects += 1
                self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {name}")

        # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏—è
        for subject_name, title, description, difficulty, answer in SAMPLE_TASKS:
            try:
                subject = Subject.objects.get(name=subject_name)
                task, created = Task.objects.get_or_create(
                    title=title,
                    subject=subject,
                    defaults={
                        "description": description,
                        "difficulty": difficulty,
                        "answer": answer
                    }
                )
                if created:
                    created_tasks += 1
                    self.stdout.write(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {title} —Å –æ—Ç–≤–µ—Ç–æ–º: {answer}")
            except Subject.DoesNotExist:
                self.stdout.write(f"‚ùå –ü—Ä–µ–¥–º–µ—Ç {subject_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        self.stdout.write(
            self.style.SUCCESS(
                f"üéâ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {created_subjects}, –∑–∞–¥–∞–Ω–∏–π: {created_tasks}"
            )
        )
from django.core.management.base import BaseCommand
from learning.models import Subject, Topic, Task
from django.db import transaction


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ExamFlow'

    def handle(self, *args, **options):
        self.stdout.write('üìö –ó–ê–ì–†–£–ó–ö–ê –û–ë–†–ê–ó–¶–û–í –î–ê–ù–ù–´–• EXAMFLOW')
        self.stdout.write('=' * 50)
        
        try:
            with transaction.atomic():
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                if Subject.objects.count() == 0:  # type: ignore
                    self.stdout.write('üìñ –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã...')
                    
                    subjects_data = [
                        {'name': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'},
                        {'name': '–§–∏–∑–∏–∫–∞'},
                        {'name': '–•–∏–º–∏—è'},
                        {'name': '–ë–∏–æ–ª–æ–≥–∏—è'},
                        {'name': '–ò—Å—Ç–æ—Ä–∏—è'},
                        {'name': '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è'},
                        {'name': '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'},
                        {'name': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'}
                    ]
                    
                    subjects = []
                    for data in subjects_data:
                        subject = Subject(**data)
                        subjects.append(subject)
                    Subject.objects.bulk_create(subjects)  # type: ignore
                    self.stdout.write(self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(subjects)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤'))  # type: ignore
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—ã –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
                    math_subject = Subject.objects.get(name='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞')  # type: ignore
                    topics_data = [
                        {'name': '–ê–ª–≥–µ–±—Ä–∞', 'subject': math_subject, 'code': 'ALG001'},
                        {'name': '–ì–µ–æ–º–µ—Ç—Ä–∏—è', 'subject': math_subject, 'code': 'GEO001'},
                        {'name': '–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è', 'subject': math_subject, 'code': 'TRIG001'}
                    ]
                    
                    topics = []
                    for data in topics_data:
                        topic = Topic(**data)
                        topics.append(topic)
                    Topic.objects.bulk_create(topics)  # type: ignore
                    self.stdout.write(self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(topics)} —Ç–µ–º –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏'))  # type: ignore
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã –∑–∞–¥–∞–Ω–∏–π
                    self.stdout.write('üìù –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã –∑–∞–¥–∞–Ω–∏–π...')
                    tasks_data = [
                        {
                            'title': '–†–µ—à–∏—Ç–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: x¬≤ + 5x + 6 = 0',
                            'description': '–ù–∞–π–¥–∏—Ç–µ –∫–æ—Ä–Ω–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è x¬≤ + 5x + 6 = 0',
                            'answer': 'x‚ÇÅ = -2, x‚ÇÇ = -3',
                            'difficulty': 2,
                            'subject': math_subject
                        },
                        {
                            'title': '–ù–∞–π–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ 5 –∏ 8',
                            'description': '–í—ã—á–∏—Å–ª–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–≤–Ω—ã 5 –∏ 8 –µ–¥–∏–Ω–∏—Ü',
                            'answer': '40 –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü',
                            'difficulty': 1,
                            'subject': math_subject
                        }
                    ]
                    
                    tasks = []
                    for data in tasks_data:
                        task = Task(**data)
                        tasks.append(task)
                    
                    Task.objects.bulk_create(tasks)  # type: ignore
                    self.stdout.write(self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(tasks)} –æ–±—Ä–∞–∑—Ü–æ–≤ –∑–∞–¥–∞–Ω–∏–π'))  # type: ignore
                    
                else:
                    self.stdout.write('‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ')
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stdout.write('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:')
                self.stdout.write(f'   –ü—Ä–µ–¥–º–µ—Ç—ã: {Subject.objects.count()}')  # type: ignore
                self.stdout.write(f'   –¢–µ–º—ã: {Topic.objects.count()}')  # type: ignore
                self.stdout.write(f'   –ó–∞–¥–∞–Ω–∏—è: {Task.objects.count()}')  # type: ignore
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}'))  # type: ignore
            return
        
        self.stdout.write('=' * 50)
        self.stdout.write(self.style.SUCCESS('üéâ –û–ë–†–ê–ó–¶–´ –î–ê–ù–ù–´–• –ó–ê–ì–†–£–ñ–ï–ù–´!'))  # type: ignore
        self.stdout.write('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ')
        self.stdout.write('‚úÖ –°–∞–π—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫')
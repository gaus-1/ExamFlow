from django.core.management.base import BaseCommand
from django.db import transaction


class Command(BaseCommand):  # type: ignore
    help = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ FIPI –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ —Ä—É—Å—Å–∫–æ–≥–æ"

    def handle(self, *args, **options):
        try:
            from core.models import FIPISourceMap  # type: ignore
        except Exception:
            self.stdout.write(self.style.ERROR("–ú–æ–¥–µ–ª—å FIPISourceMap –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"))  # type: ignore
            return

        seeds = [
            {
                "name": "–ï–ì–≠ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Äî –î–µ–º–æ–≤–µ—Ä—Å–∏—è",
                "url": "https://fipi.ru/ege/demoversii/po-matematike",
                "type": "PDF",
                "category": "demo",
                "subject": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "exam_type": "–ï–ì–≠",
                "update_frequency": "yearly",
                "priority": 100,
            },
            {
                "name": "–ï–ì–≠ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Äî –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è",
                "url": "https://fipi.ru/ege/specifikacii/po-matematike",
                "type": "PDF",
                "category": "spec",
                "subject": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "exam_type": "–ï–ì–≠",
                "update_frequency": "yearly",
                "priority": 100,
            },
            {
                "name": "–ï–ì–≠ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚Äî –ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
                "url": "https://fipi.ru/ege/kodifikatory/po-matematike",
                "type": "PDF",
                "category": "codifier",
                "subject": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "exam_type": "–ï–ì–≠",
                "update_frequency": "yearly",
                "priority": 90,
            },
            {
                "name": "–ï–ì–≠ –†—É—Å—Å–∫–∏–π ‚Äî –î–µ–º–æ–≤–µ—Ä—Å–∏—è",
                "url": "https://fipi.ru/ege/demoversii/po-russkomu-yazyku",
                "type": "PDF",
                "category": "demo",
                "subject": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
                "exam_type": "–ï–ì–≠",
                "update_frequency": "yearly",
                "priority": 100,
            },
            {
                "name": "–ï–ì–≠ –†—É—Å—Å–∫–∏–π ‚Äî –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è",
                "url": "https://fipi.ru/ege/specifikacii/po-russkomu-yazyku",
                "type": "PDF",
                "category": "spec",
                "subject": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
                "exam_type": "–ï–ì–≠",
                "update_frequency": "yearly",
                "priority": 100,
            },
            {
                "name": "–ï–ì–≠ –†—É—Å—Å–∫–∏–π ‚Äî –ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
                "url": "https://fipi.ru/ege/kodifikatory/po-russkomu-yazyku",
                "type": "PDF",
                "category": "codifier",
                "subject": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
                "exam_type": "–ï–ì–≠",
                "update_frequency": "yearly",
                "priority": 90,
            },
        ]

        created = 0
        with transaction.atomic():  # type: ignore
            for s in seeds:
                obj, was_created = FIPISourceMap.objects.get_or_create(  # type: ignore
                    url=s["url"], defaults=s
                )
                if was_created:
                    created += 1

        self.stdout.write(
            self.style.SUCCESS(f"–ì–æ—Ç–æ–≤–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ {created} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∏–ª–∏ —É–∂–µ –±—ã–ª–∏).")  # type: ignore
        )

"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö fipi.ru
"""

from django.core.management.base import BaseCommand
import logging

from core.data_ingestion.fipi_structure_map import get_fipi_structure_map
from core.models import FIPISourceMap

logger = logging.getLogger(__name__)


class Command(BaseCommand):  # type: ignore 
    help = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö fipi.ru –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏',
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î',
        )
        parser.add_argument(
            '--priority',
            type=int,
            choices=[1, 2, 3, 4],
            help='–°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS(  # type: ignore
                'üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö fipi.ru')  # type: ignore
        )
        self.stdout.write('=' * 60)

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        structure_map = get_fipi_structure_map()
        sources = structure_map.get_all_sources()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if options['priority']:
            sources = [s for s in sources if s.priority.value == options['priority']]
            self.stdout.write(
                self.style.WARNING(  # type: ignore
                    f'–°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {options["priority"]}')  # type: ignore
            )

        if options['dry_run']:
            self.dry_run(sources)
            return

        if options['force']:
            self.stdout.write(
                self.style.WARNING('–£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...')  # type: ignore
            )
            FIPISourceMap.objects.all().delete()  # type: ignore            

        # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        created_count = 0
        updated_count = 0

        for source in sources:
            try:
                source_obj, created = FIPISourceMap.objects.get_or_create(  # type: ignore
                    source_id=source.id,
                    defaults={
                        'name': source.name,
                        'url': source.url,
                        'data_type': source.data_type.value,
                        'exam_type': source.exam_type.value,
                        'subject': source.subject,
                        'priority': source.priority.value,
                        'update_frequency': source.update_frequency.value,
                        'file_format': source.file_format,
                        'description': source.description,
                    }
                )

                if created:
                    created_count += 1
                    self.stdout.write(
                        f'‚úÖ –°–æ–∑–¥–∞–Ω: {source.name}'  # type: ignore
                    )
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫
                    source_obj.name = source.name
                    source_obj.url = source.url
                    source_obj.data_type = source.data_type.value
                    source_obj.exam_type = source.exam_type.value
                    source_obj.subject = source.subject
                    source_obj.priority = source.priority.value
                    source_obj.update_frequency = source.update_frequency.value
                    source_obj.file_format = source.file_format
                    source_obj.description = source.description
                    source_obj.save()

                    updated_count += 1
                    self.stdout.write(
                        f'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {source.name}'  # type: ignore
                    )

            except Exception as e:
                self.stdout.write(
                    # type: ignore
                    self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {source.name}: {e}')  # type: ignore
                )
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source.id}: {e}')

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.show_statistics(created_count, updated_count)

    def dry_run(self, sources):
        """–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        self.stdout.write(
            self.style.WARNING(  # type: ignore
                'üîç DRY RUN - –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î')  # type: ignore
        )
        self.stdout.write('=' * 60)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        by_priority = {}
        for source in sources:
            priority = source.priority.value
            if priority not in by_priority:
                by_priority[priority] = []
            by_priority[priority].append(source)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        for priority in sorted(by_priority.keys()):
            priority_name = {
                1: '–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï',
                2: '–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢',
                3: '–°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢',
                4: '–ù–ò–ó–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢',
            }[priority]

            self.stdout.write(
                self.style.SUCCESS(  # type: ignore
                    f'\nüìã {priority_name} ({len(by_priority[priority])} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤):')  # type: ignore
            )

            for source in by_priority[priority]:
                self.stdout.write(f'  ‚Ä¢ {source.name}')  # type: ignore
                self.stdout.write(f'    URL: {source.url}')
                self.stdout.write(
                    f'    –¢–∏–ø: {source.data_type.value} | –§–æ—Ä–º–∞—Ç: {source.file_format}')
                if source.subject:
                    self.stdout.write(f'    –ü—Ä–µ–¥–º–µ—Ç: {source.subject}')  # type: ignore
                self.stdout.write('')

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stdout.write('=' * 60)
        self.stdout.write(f'üìä –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}')  # type: ignore

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        by_type = {}
        for source in sources:
            data_type = source.data_type.value
            by_type[data_type] = by_type.get(data_type, 0) + 1

        self.stdout.write('\nüìà –ü–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö:')
        for data_type, count in sorted(by_type.items()):
            self.stdout.write(f'  ‚Ä¢ {data_type}: {count}')

    def show_statistics(self, created_count, updated_count):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è"""
        self.stdout.write('\n' + '=' * 60)
        self.stdout.write(
            self.style.SUCCESS('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:')  # type: ignore
        )
        self.stdout.write(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {created_count}')
        self.stdout.write(f'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {updated_count}')
        self.stdout.write(
            f'üìã –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ë–î: {FIPISourceMap.objects.count()}')  # type: ignore

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        self.stdout.write('\nüìà –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:')
        for priority in [1, 2, 3, 4]:
            count = FIPISourceMap.objects.filter(  # type: ignore
                priority=priority).count()  # type: ignore
            priority_name = {
                1: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ',
                2: '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
                3: '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
                4: '–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
            }[priority]
            self.stdout.write(f'  ‚Ä¢ {priority_name}: {count}')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
        self.stdout.write('\nüìà –ü–æ —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö:')
        for data_type, _ in FIPISourceMap.DATA_TYPES:
            count = FIPISourceMap.objects.filter(  # type: ignore
                data_type=data_type).count()  # type: ignore
            if count > 0:
                self.stdout.write(f'  ‚Ä¢ {data_type}: {count}')

        self.stdout.write('\n' + '=' * 60)
        self.stdout.write(
            self.style.SUCCESS(  # type: ignore
                'üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')  # type: ignore
        )

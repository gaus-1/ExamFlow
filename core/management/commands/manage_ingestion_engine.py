"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–∫–æ–º —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
import logging
import json
import time

from core.data_ingestion.ingestion_engine import get_ingestion_engine, TaskPriority
from core.data_ingestion.scheduler import get_scheduler

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤–∏–∂–∫–æ–º —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö'
    
    def add_arguments(self, parser):
        parser.add_argument(
            'action',
            choices=['start', 'stop', 'status', 'add-tasks', 'stats'],
            help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
        )
        parser.add_argument(
            '--priority',
            type=int,
            choices=[1, 2, 3, 4],
            help='–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á (1=–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π, 2=–≤—ã—Å–æ–∫–∏–π, 3=—Å—Ä–µ–¥–Ω–∏–π, 4=–Ω–∏–∑–∫–∏–π)'
        )
        parser.add_argument(
            '--source-ids',
            nargs='+',
            help='ID –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á'
        )
        parser.add_argument(
            '--with-scheduler',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º'
        )
        parser.add_argument(
            '--monitor',
            action='store_true',
            help='–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏'
        )
    
    def handle(self, *args, **options):
        action = options['action']
        
        if action == 'start':
            self.start_engine(options)
        elif action == 'stop':
            self.stop_engine(options)
        elif action == 'status':
            self.show_status(options)
        elif action == 'add-tasks':
            self.add_tasks(options)
        elif action == 'stats':
            self.show_statistics(options)
    
    def start_engine(self, options):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–≤–∏–∂–æ–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write(
            self.style.SUCCESS('üöÄ –ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...') # type: ignore
        )
        
        try:
            if options['with_scheduler']:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
                scheduler = get_scheduler()
                scheduler.start()
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –î–≤–∏–∂–æ–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω—ã') # type: ignore
                )
            else:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–∏–∂–æ–∫
                engine = get_ingestion_engine()
                engine.start()
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –î–≤–∏–∂–æ–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω') # type: ignore
                )
            
            if options['monitor']:
                self.monitor_engine()
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}') # type: ignore
            )
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–≤–∏–∂–∫–∞: {e}')
    
    def stop_engine(self, options):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–≤–∏–∂–æ–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write(
            self.style.WARNING('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...') # type: ignore
        )
        
        try:
            if options['with_scheduler']:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                from core.data_ingestion.scheduler import stop_scheduler
                stop_scheduler()
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –î–≤–∏–∂–æ–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã') # type: ignore
                )
            else:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–∏–∂–æ–∫
                from core.data_ingestion.ingestion_engine import stop_ingestion_engine
                stop_ingestion_engine()
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –î–≤–∏–∂–æ–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω') # type: ignore
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}') # type: ignore
            )
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–≤–∏–∂–∫–∞: {e}')
    
    def show_status(self, options):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞"""
        self.stdout.write(
            self.style.SUCCESS('üìä –°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö') # type: ignore
        )
        self.stdout.write('=' * 60)
        
        try:
            if options['with_scheduler']:
                scheduler = get_scheduler()
                status = scheduler.get_job_status()
                
                self.stdout.write(f'–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {"üü¢ –ó–∞–ø—É—â–µ–Ω" if status["scheduler_running"] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}') # type: ignore
                self.stdout.write(f'–î–≤–∏–∂–æ–∫: {"üü¢ –ó–∞–ø—É—â–µ–Ω" if status["engine_stats"]["is_running"] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}') # type: ignore
                
                self.stdout.write('\nüìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:')
                for job in status['jobs']:
                    next_run = job['next_run_time'] or '–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'
                    self.stdout.write(f'  ‚Ä¢ {job["name"]}: {next_run}')
                
            else:
                engine = get_ingestion_engine()
                stats = engine.get_statistics()
                
                self.stdout.write(f'–î–≤–∏–∂–æ–∫: {"üü¢ –ó–∞–ø—É—â–µ–Ω" if stats["is_running"] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}') # type: ignore
                
                if stats['is_running']:
                    self.stdout.write('\nüë∑ –í–æ—Ä–∫–µ—Ä—ã:')
                    for worker in stats['worker_stats']:
                        status_icon = "üü¢" if worker['is_running'] else "üî¥"
                        current_task = worker['current_task'] or "–ë–µ–∑ –∑–∞–¥–∞—á"
                        self.stdout.write(f'  ‚Ä¢ {worker["worker_id"]}: {status_icon} {current_task}')
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}') # type: ignore    
            )
    
    def add_tasks(self, options):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å"""
        self.stdout.write(
            self.style.SUCCESS('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å...') # type: ignore
        )
        
        try:
            engine = get_ingestion_engine()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            priority = None
            if options['priority']:
                priority = TaskPriority(options['priority'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
            count = engine.add_source_tasks(
                source_ids=options.get('source_ids'),
                priority_filter=priority
            )
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {count} –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å') # type: ignore
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
            stats = engine.get_statistics()
            self.stdout.write('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏:')
            for priority_name, queue_size in stats['queue_stats'].items():
                self.stdout.write(f'  ‚Ä¢ {priority_name}: {queue_size} –∑–∞–¥–∞—á')
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}') # type: ignore
            )
    
    def show_statistics(self, options):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.stdout.write(
            self.style.SUCCESS('üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–≤–∏–∂–∫–∞') # type: ignore
        )
        self.stdout.write('=' * 60)
        
        try:
            if options['with_scheduler']:
                scheduler = get_scheduler()
                status = scheduler.get_job_status()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                self.stdout.write('üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:')
                self.stdout.write(f'  –°—Ç–∞—Ç—É—Å: {"üü¢ –ó–∞–ø—É—â–µ–Ω" if status["scheduler_running"] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}')
                self.stdout.write(f'  –ó–∞–¥–∞—á: {len(status["jobs"])}')
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–≤–∏–∂–∫–∞
                engine_stats = status['engine_stats']
                self.stdout.write('\nüîß –î–≤–∏–∂–æ–∫:')
                self.stdout.write(f'  –°—Ç–∞—Ç—É—Å: {"üü¢ –ó–∞–ø—É—â–µ–Ω" if engine_stats["is_running"] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}')
                
                if engine_stats['is_running']:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π
                    self.stdout.write('\nüìã –û—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á:')
                    for priority, size in engine_stats['queue_stats'].items():
                        self.stdout.write(f'  ‚Ä¢ {priority}: {size} –∑–∞–¥–∞—á')
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
                    self.stdout.write('\nüë∑ –í–æ—Ä–∫–µ—Ä—ã:')
                    for worker in engine_stats['worker_stats']:
                        status_icon = "üü¢" if worker['is_running'] else "üî¥"
                        current_task = worker['current_task'] or "–ë–µ–∑ –∑–∞–¥–∞—á"
                        self.stdout.write(f'  ‚Ä¢ {worker["worker_id"]}: {status_icon} {current_task}')
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
                    task_stats = engine_stats['task_stats']
                    self.stdout.write('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:')
                    self.stdout.write(f'  –í—Å–µ–≥–æ: {task_stats["total"]}')
                    
                    if task_stats['by_status']:
                        self.stdout.write('  –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:')
                        for status, count in task_stats['by_status'].items():
                            self.stdout.write(f'    ‚Ä¢ {status}: {count}')
                    
                    if task_stats['by_priority']:
                        self.stdout.write('  –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:')
                        for priority, count in task_stats['by_priority'].items():
                            self.stdout.write(f'    ‚Ä¢ {priority}: {count}')
            
            else:
                engine = get_ingestion_engine()
                stats = engine.get_statistics()
                
                # –í—ã–≤–æ–¥–∏–º JSON –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                self.stdout.write('\nüìÑ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (JSON):')
                self.stdout.write(json.dumps(stats, indent=2, default=str))
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}') # type: ignore
            )
    
    def monitor_engine(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ä–∞–±–æ—Ç—É –¥–≤–∏–∂–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        self.stdout.write(
            self.style.SUCCESS('üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–≤–∏–∂–∫–∞ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)') # type: ignore
        )
        
        try:
            while True:
                # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤)
                print('\033[2J\033[H', end='')
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if hasattr(self, '_scheduler'):
                    status = self._scheduler.get_job_status() # type: ignore
                    engine_stats = status['engine_stats']
                else:
                    engine = get_ingestion_engine()
                    engine_stats = engine.get_statistics()
                
                # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                self.stdout.write(
                    self.style.SUCCESS(f'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–≤–∏–∂–∫–∞ - {timezone.now().strftime("%H:%M:%S")}') # type: ignore
                )
                self.stdout.write('=' * 60)
                
                # –°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞
                status_icon = "üü¢" if engine_stats['is_running'] else "üî¥"
                self.stdout.write(f'–î–≤–∏–∂–æ–∫: {status_icon} {"–ó–∞–ø—É—â–µ–Ω" if engine_stats["is_running"] else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}') # type: ignore
                
                if engine_stats['is_running']:
                    # –û—á–µ—Ä–µ–¥–∏
                    self.stdout.write('\nüìã –û—á–µ—Ä–µ–¥–∏:')
                    for priority, size in engine_stats['queue_stats'].items():
                        self.stdout.write(f'  {priority}: {size}')
                    
                    # –í–æ—Ä–∫–µ—Ä—ã
                    self.stdout.write('\nüë∑ –í–æ—Ä–∫–µ—Ä—ã:')
                    for worker in engine_stats['worker_stats']:
                        status_icon = "üü¢" if worker['is_running'] else "üî¥"
                        current_task = worker['current_task'] or "–ë–µ–∑ –∑–∞–¥–∞—á"
                        self.stdout.write(f'  {worker["worker_id"]}: {status_icon} {current_task}')
                    
                    # –ó–∞–¥–∞—á–∏
                    task_stats = engine_stats['task_stats']
                    self.stdout.write(f'\nüìä –ó–∞–¥–∞—á: {task_stats["total"]}')
                    for status, count in task_stats['by_status'].items():
                        self.stdout.write(f'  {status}: {count}')
                
                time.sleep(2)
                
        except KeyboardInterrupt:
            self.stdout.write('\n' + self.style.SUCCESS('üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')) # type: ignore
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}') # type: ignore
            )

"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ExamFlow 2.0
"""

from django.core.management.base import BaseCommand
from django.core.management import call_command

class Command(BaseCommand):  # type: ignore
    help = "–ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ExamFlow 2.0: –º–∏–≥—Ä–∞—Ü–∏–∏, –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –§–ò–ü–ò, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã"

    def add_arguments(self, parser):
        parser.add_argument(
            '--skip-migrations',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π'
        )
        parser.add_argument(
            '--skip-sources',
            action='store_true',
            help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –§–ò–ü–ò'
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ExamFlow 2.0...')  # type: ignore
        )

        try:
            # 1. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            if not options['skip_migrations']:
                self.stdout.write(
                    self.style.WARNING('üì¶ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...')  # type: ignore
                )
                call_command('migrate', verbosity=0)
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã')  # type: ignore
                )

            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –§–ò–ü–ò
            if not options['skip_sources']:
                self.stdout.write(
                    self.style.WARNING( # type: ignore
                        'üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –§–ò–ü–ò...')  # type: ignore
                )
                call_command('init_fipi_source_map', verbosity=0)
                self.stdout.write(
                    self.style.SUCCESS( # type: ignore
                        '‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –§–ò–ü–ò –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã')  # type: ignore
                )

            # 3. –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            from django.conf import settings
            if not User.objects.filter(is_superuser=True).exists():  # type: ignore
                self.stdout.write(
                    self.style.WARNING('üë§ –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')  # type: ignore
                )
                User.objects.create_superuser(  # type: ignore
                    username='admin',
                    email='admin@examflow.ru',
                    password='admin123'
                )
                self.stdout.write(
                    self.style.SUCCESS( # type: ignore
                        '‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω (admin/admin123)')  # type: ignore
                )

            # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            from core.models import Subject
            if not Subject.objects.exists():  # type: ignore
                self.stdout.write(
                    self.style.WARNING('üìö –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã...')  # type: ignore
                )
                Subject.objects.create(  # type: ignore
                    name='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
                    code='math',
                    exam_type='ege',
                    description='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)',
                    icon='üìê'
                )
                Subject.objects.create(  # type: ignore
                    name='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
                    code='russian',
                    exam_type='ege',
                    description='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
                    icon='üìù'
                )
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã')  # type: ignore
                )

            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.stdout.write(
                self.style.WARNING('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã...')  # type: ignore
            )

            from django.conf import settings

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º GEMINI_API_KEY
            if not getattr(settings, 'GEMINI_API_KEY', None):
                self.stdout.write(
                    self.style.ERROR('‚ö†Ô∏è GEMINI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')  # type: ignore
                )
            else:
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ GEMINI_API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω')  # type: ignore
                )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TELEGRAM_BOT_TOKEN
            if not getattr(settings, 'TELEGRAM_BOT_TOKEN', None):
                self.stdout.write(
                    self.style.WARNING( # type: ignore
                        '‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å)')  # type: ignore
                )
            else:
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ TELEGRAM_BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω')  # type: ignore
                )

            # 6. –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
            self.stdout.write('\n' + '=' * 60)
            self.stdout.write(
                self.style.SUCCESS( # type: ignore
                    'üéâ ExamFlow 2.0 —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!')  # type: ignore
            )
            self.stdout.write('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:')
            self.stdout.write('‚Ä¢ python manage.py runserver - –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞')
            self.stdout.write(
                '‚Ä¢ python manage.py run_telegram_bot - –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞')
            self.stdout.write(
                '‚Ä¢ python manage.py run_cdc_monitor --once - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –§–ò–ü–ò')
            self.stdout.write(
                '‚Ä¢ python manage.py init_fipi_source_map - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤')

            self.stdout.write('\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:')
            self.stdout.write('‚Ä¢ http://localhost:8000/ - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
            self.stdout.write('‚Ä¢ http://localhost:8000/docs/ - Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è')
            self.stdout.write(
                '‚Ä¢ http://localhost:8000/subscription/ - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏')
            self.stdout.write('‚Ä¢ http://localhost:8000/api/ai/ask/ - AI API')

            self.stdout.write('\nüîß API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:')
            self.stdout.write('‚Ä¢ POST /api/ai/ask - AI-–ø–æ–º–æ—â–Ω–∏–∫')
            self.stdout.write('‚Ä¢ GET /api/ai/subjects - —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
            self.stdout.write('‚Ä¢ GET /api/ai/user/profile - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            self.stdout.write('‚Ä¢ POST /api/ai/problem/submit - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è')
            self.stdout.write('‚Ä¢ GET /api/fipi/search - –ø–æ–∏—Å–∫ –ø–æ –§–ò–ü–ò')

            self.stdout.write('\n' + '=' * 60)

        except Exception as e:
            self.stdout.write(
                self.style.ERROR('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}')  # type: ignore
            )
            raise

"""
–ö–æ–º–∞–Ω–¥–∞ Django –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
"""

import signal
import sys
import time

from django.core.management.base import BaseCommand

from core.auto_updater import auto_updater, start_auto_updater, stop_auto_updater


class Command(BaseCommand):
    help = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –§–ò–ü–ò"

    def add_arguments(self, parser):
        parser.add_argument(
            "action",
            choices=["start", "stop", "status", "manual"],
            help="–î–µ–π—Å—Ç–≤–∏–µ: start, stop, status –∏–ª–∏ manual",
        )
        parser.add_argument(
            "--daemon",
            action="store_true",
            help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
        )

    def handle(self, *args, **options):
        action = options["action"]

        if action == "start":
            self.start_service(options.get("daemon", False))
        elif action == "stop":
            self.stop_service()
        elif action == "status":
            self.show_status()
        elif action == "manual":
            self.manual_update()

    def start_service(self, daemon=False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª—É–∂–±—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self.stdout.write(self.style.SUCCESS("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."))

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        def signal_handler(signum, frame):
            self.stdout.write(
                self.style.WARNING(
                    "\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É–∂–±—É..."
                )
            )
            stop_auto_updater()
            sys.exit(0)

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

        try:
            start_auto_updater()

            self.stdout.write(self.style.SUCCESS("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞!"))
            self.stdout.write(self.style.SUCCESS("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:"))
            self.stdout.write("  ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 03:00 - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
            self.stdout.write(
                "  ‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 02:00 - –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
            )
            self.stdout.write("  ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 04:00 - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤")
            self.stdout.write("  ‚Ä¢ –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            self.stdout.write(self.style.WARNING("üìù –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"))

            if daemon:
                # –í –¥–µ–º–æ–Ω-—Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å
                while auto_updater.is_running:
                    time.sleep(60)
            else:
                # –í –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                self.run_interactive_mode()

        except KeyboardInterrupt:
            self.stdout.write(
                self.style.WARNING("\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            )
            stop_auto_updater()
        except Exception:
            self.stdout.write(self.style.ERROR("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"))

    def stop_service(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É–∂–±—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self.stdout.write("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        stop_auto_updater()
        self.stdout.write(self.style.SUCCESS("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"))

    def show_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        if auto_updater.is_running:
            self.stdout.write(self.style.SUCCESS("üü¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞"))
            self.stdout.write("üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:")

            import schedule

            jobs = schedule.jobs
            if jobs:
                for job in jobs:
                    next_run = (
                        job.next_run.strftime("%d.%m.%Y %H:%M")
                        if job.next_run
                        else "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
                    )
                    self.stdout.write("  ‚Ä¢ {job.job_func.__name__}: {next_run}")
            else:
                self.stdout.write("  –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        else:
            self.stdout.write(
                self.style.WARNING("üî¥ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            )

    def manual_update(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        self.stdout.write(
            self.style.SUCCESS("üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
        )

        try:
            result = auto_updater.manual_update()

            self.stdout.write(self.style.SUCCESS("‚úÖ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"))
            self.stdout.write(self.style.SUCCESS("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:"))
            self.stdout.write('  ‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {result["subjects"]}')
            self.stdout.write('  ‚Ä¢ –ó–∞–¥–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {result["tasks"]}')
            self.stdout.write('  ‚Ä¢ –ü—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {result["samples"]}')

        except Exception:
            self.stdout.write(
                self.style.ERROR("‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            )

    def run_interactive_mode(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            while auto_updater.is_running:
                self.stdout.write("\n" + "=" * 60)
                self.stdout.write("ü§ñ ExamFlow Auto-Updater Service")
                self.stdout.write("=" * 60)
                self.stdout.write("üü¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω")

                import schedule

                jobs = schedule.jobs
                self.stdout.write("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(jobs)}")

                if jobs:
                    self.stdout.write("‚è∞ –°–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—É—Å–∫–∏:")
                    for job in jobs[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –±–ª–∏–∂–∞–π—à–∏–µ
                        if job.next_run:
                            next_run = job.next_run.strftime("%d.%m %H:%M")
                            self.stdout.write("  ‚Ä¢ {job.job_func.__name__}: {next_run}")

                self.stdout.write("üìù –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                self.stdout.write("=" * 60)

                # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                time.sleep(60)

        except KeyboardInterrupt:
            pass

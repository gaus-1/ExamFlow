"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –§–ò–ü–ò
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from core.fipi_monitor import fipi_monitor
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –§–ò–ü–ò –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            '--check',
            action='store_true',
            help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑',
        )
        parser.add_argument(
            '--stats',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π',
        )
        parser.add_argument(
            '--continuous',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
        )

    def handle(self, *args, **options):
        if options['check']:
            self.check_updates()
        elif options['stats']:
            self.show_statistics()
        elif options['continuous']:
            self.continuous_monitoring()
        else:
            self.stdout.write(
                self.style.WARNING('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --check, --stats –∏–ª–∏ --continuous')
            )

    def check_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑"""
        self.stdout.write('–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –§–ò–ü–ò...')

        try:
            updates = fipi_monitor.check_for_updates()

            if updates.get('error'):
                self.stdout.write(
                    self.style.ERROR('–û—à–∏–±–∫–∞: {updates["error"]}')
                )
                return

            if updates['total_updates'] > 0:
                self.stdout.write(self.style.SUCCESS(
                    '–ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {updates["total_updates"]}'))

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
                if updates['math_updates']:
                    self.stdout.write('\nüìê –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê:')
                    for update in updates['math_updates']:
                        self.stdout.write('  ‚Ä¢ {update["title"]}')
                        self.stdout.write('    URL: {update["url"]}')

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É
                if updates['russian_updates']:
                    self.stdout.write('\nüìù –†–£–°–°–ö–ò–ô –Ø–ó–´–ö:')
                    for update in updates['russian_updates']:
                        self.stdout.write('  ‚Ä¢ {update["title"]}')
                        self.stdout.write('    URL: {update["url"]}')

                self.stdout.write(
                    self.style.SUCCESS('\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö')
                )
            else:
                self.stdout.write(
                    self.style.SUCCESS('–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                )

        except Exception as e:
            self.stdout.write(
                self.style.ERROR('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}')
            )
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}')

    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self.stdout.write('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –§–ò–ü–ò:')

        try:
            stats = fipi_monitor.get_update_statistics()

            self.stdout.write('–í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {stats.get("total_updates", 0)}')
            self.stdout.write(
                '–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ: {stats.get("math_updates", 0)}')
            self.stdout.write(
                '–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É: {stats.get("russian_updates", 0)}')

            if stats.get('last_check'):
                self.stdout.write('–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {stats["last_check"]}')
            else:
                self.stdout.write('–ü—Ä–æ–≤–µ—Ä–∫–∏ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å')

        except Exception as e:
            self.stdout.write(
                self.style.ERROR('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}')
            )
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}')

    def continuous_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.stdout.write('–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –§–ò–ü–ò...')
        self.stdout.write('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏')

        try:
            import time

            while True:
                self.stdout.write('\n[{timezone.now()}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...')

                updates = fipi_monitor.check_for_updates()

                if updates.get('error'):
                    self.stdout.write(
                        self.style.ERROR('–û—à–∏–±–∫–∞: {updates["error"]}')
                    )
                elif updates['total_updates'] > 0:
                    self.stdout.write(
                        self.style.SUCCESS('–ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {updates["total_updates"]}'))
                else:
                    self.stdout.write('–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                self.stdout.write(
                    '–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {fipi_monitor.check_interval} —Å–µ–∫—É–Ω–¥...')
                time.sleep(fipi_monitor.check_interval)

        except KeyboardInterrupt:
            self.stdout.write('\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        except Exception as e:
            self.stdout.write(
                self.style.ERROR('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}')
            )
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}')

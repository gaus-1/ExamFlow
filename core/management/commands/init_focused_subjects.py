"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
"""

from django.core.management.base import BaseCommand
from django.db import transaction
from learning.models import Subject, Topic, Task
from core.fipi_parser import FipiParser
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º',
        )
        parser.add_argument(
            '--load-data',
            action='store_true',
            help='–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –§–ò–ü–ò',
        )

    def handle(self, *args, **options):
        if options['clear']:
            self.clear_existing_data()

        self.create_focused_subjects()

        if options['load_data']:
            self.load_fipi_data()

        self.stdout.write(
            self.style.SUCCESS(  # type: ignore
                '–§–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!')  # type: ignore
        )

    def clear_existing_data(self):
        """–û—á–∏—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        self.stdout.write('–û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...')

        with transaction.atomic():  # type: ignore
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            Subject.objects.all().delete()  # type: ignore
            self.stdout.write('  - –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã')

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–º—ã
            Topic.objects.all().delete()  # type: ignore
            self.stdout.write('  - –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ç–µ–º—ã')

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
            Task.objects.all().delete()  # type: ignore
            self.stdout.write('  - –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è')

    def create_focused_subjects(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"""
        self.stdout.write('–°–æ–∑–¥–∞–µ–º —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã...')

        subjects_data = [
            # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
                'name': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)',
                'code': 'math_pro',
                'exam_type': '–ï–ì–≠',
                'description': '–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ï–ì–≠ - –∑–∞–¥–∞–Ω–∏—è 1-19 —Å –ø–æ–ª–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏',
                'icon': 'üìê',
                'is_primary': True,
                'topics': [
                    '–ê–ª–≥–µ–±—Ä–∞',
                    '–ì–µ–æ–º–µ—Ç—Ä–∏—è',
                    '–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è',
                    '–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª',
                    '–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π',
                    '–°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è',
                    '–ü–ª–∞–Ω–∏–º–µ—Ç—Ä–∏—è',
                    '–£—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞',
                    '–§—É–Ω–∫—Ü–∏–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏',
                    '–õ–æ–≥–∞—Ä–∏—Ñ–º—ã –∏ —Å—Ç–µ–ø–µ–Ω–∏'
                ]
            },
                'name': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–Ω–µ–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)',
                'code': 'math_base',
                'exam_type': '–ï–ì–≠',
                'description': '–ë–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ï–ì–≠ - –∑–∞–¥–∞–Ω–∏—è 1-20 —Å –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏',
                'icon': 'üìä',
                'is_primary': True,
                'topics': [
                    '–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞',
                    '–ê–ª–≥–µ–±—Ä–∞',
                    '–ì–µ–æ–º–µ—Ç—Ä–∏—è',
                    '–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è',
                    '–§—É–Ω–∫—Ü–∏–∏',
                    '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å',
                    '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏'
                ]
            },
                'name': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–û–ì–≠)',
                'code': 'math_oge',
                'exam_type': '–û–ì–≠',
                'description': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –û–ì–≠ - –∑–∞–¥–∞–Ω–∏—è 1-26 —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–∞–∑–±–æ—Ä–∞–º–∏',
                'icon': 'üî¢',
                'is_primary': True,
                'topics': [
                    '–ß–∏—Å–ª–∞ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è',
                    '–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è',
                    '–£—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞',
                    '–§—É–Ω–∫—Ü–∏–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏',
                    '–ì–µ–æ–º–µ—Ç—Ä–∏—è',
                    '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å',
                    '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏'
                ]
            },
            # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
                'name': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–ï–ì–≠)',
                'code': 'russian_ege',
                'exam_type': '–ï–ì–≠',
                'description': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ï–ì–≠ - —Å–æ—á–∏–Ω–µ–Ω–∏–µ, —Ç–µ—Å—Ç—ã, –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã',
                'icon': 'üìù',
                'is_primary': True,
                'topics': [
                    '–°–æ—á–∏–Ω–µ–Ω–∏–µ (–∑–∞–¥–∞–Ω–∏–µ 27)',
                    '–ò–∑–ª–æ–∂–µ–Ω–∏–µ (–∑–∞–¥–∞–Ω–∏—è 1-3)',
                    '–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è',
                    '–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è',
                    '–õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã',
                    '–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã',
                    '–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã',
                    '–°—Ä–µ–¥—Å—Ç–≤–∞ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                    '–¢–∏–ø—ã —Ä–µ—á–∏',
                    '–°—Ç–∏–ª–∏ —Ä–µ—á–∏'
                ]
            },
                'name': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–û–ì–≠)',
                'code': 'russian_oge',
                'exam_type': '–û–ì–≠',
                'description': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –û–ì–≠ - –∏–∑–ª–æ–∂–µ–Ω–∏–µ, —Å–æ—á–∏–Ω–µ–Ω–∏–µ, —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è',
                'icon': 'üìñ',
                'is_primary': True,
                'topics': [
                    '–ò–∑–ª–æ–∂–µ–Ω–∏–µ',
                    '–°–æ—á–∏–Ω–µ–Ω–∏–µ',
                    '–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è',
                    '–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è',
                    '–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞',
                    '–õ–µ–∫—Å–∏–∫–∞',
                    '–°–∏–Ω—Ç–∞–∫—Å–∏—Å',
                    '–ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—è',
                    '–§–æ–Ω–µ—Ç–∏–∫–∞',
                    '–°–ª–æ–≤–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'
                ]
            }
        ]

        created_subjects = []

        with transaction.atomic():  # type: ignore
            for subject_data in subjects_data:
                subject, created = Subject.objects.get_or_create(  # type: ignore
                    name=subject_data['name'],
                    defaults={
                        'code': subject_data['code'],
                        'exam_type': subject_data['exam_type'],
                        'description': subject_data['description'],
                        'icon': subject_data['icon'],
                        'is_primary': subject_data['is_primary']
                    }
                )

                if created:
                    self.stdout.write('  ‚úì –°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject.name}')
                else:
                    self.stdout.write('  - –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {subject.name}')

                # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
                self.create_topics_for_subject(subject, subject_data['topics'])

                created_subjects.append(subject)

        return created_subjects

    def create_topics_for_subject(self, subject, topics_data):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–º—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        for i, topic_name in enumerate(topics_data):
            # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥ –¥–ª—è —Ç–µ–º—ã
            topic_code = "topic_{i+1:02d}"

            topic, created = Topic.objects.get_or_create(  # type: ignore
                name=topic_name,
                subject=subject,
                defaults={
                    'code': topic_code
                }
            )

            if created:
                self.stdout.write('    ‚úì –°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞: {topic_name}')

    def load_fipi_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –§–ò–ü–ò"""
        self.stdout.write('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –§–ò–ü–ò...')

        try:
            parser = FipiParser()

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
            subjects = Subject.objects.filter(is_primary=True)  # type: ignore

            for subject in subjects:
                self.stdout.write('  –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {subject.name}...')

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
                exam_type = '–ï–ì–≠' if subject.exam_type == '–ï–ì–≠' else '–û–ì–≠'

                # –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞–Ω–∏—è
                tasks_data = parser.parse_tasks_for_subject(
                    subject.name.split('(')[0].strip(),
                    exam_type
                )

                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
                created_tasks = 0
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                for task_data in tasks_data[:50]:
                    task, created = Task.objects.get_or_create(  # type: ignore
                        title=task_data.get('title', '–ó–∞–¥–∞–Ω–∏–µ'),
                        subject=subject,
                        defaults={
                            'description': task_data.get('description', ''),
                            'difficulty': task_data.get('difficulty', 'medium'),
                            'solution': task_data.get('solution', ''),
                            'answer': task_data.get('answer', '')
                        }
                    )

                    if created:
                        created_tasks += 1

                self.stdout.write('    ‚úì –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {created_tasks}')

        except Exception as e:
            self.stdout.write(
                # type: ignore
                # type: ignore
                self.style.ERROR('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å –§–ò–ü–ò: {e}')
            )
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å –§–ò–ü–ò: {e}')

    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write('\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')

        subjects = Subject.objects.filter(is_primary=True)  # type: ignore
        self.stdout.write('  –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {subjects.count()}')

        topics = Topic.objects.filter(subject__in=subjects)  # type: ignore
        self.stdout.write('  –¢–µ–º: {topics.count()}')

        tasks = Task.objects.filter(subject__in=subjects)  # type: ignore
        self.stdout.write('  –ó–∞–¥–∞–Ω–∏–π: {tasks.count()}')

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        for subject in subjects:
            subject_topics = topics.filter(subject=subject).count()  # type: ignore
            subject_tasks = tasks.filter(subject=subject).count()  # type: ignore
            self.stdout.write(
                '    {subject.name}: {subject_topics} —Ç–µ–º, {subject_tasks} –∑–∞–¥–∞–Ω–∏–π')

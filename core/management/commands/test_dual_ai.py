#!/usr/bin/env python3
"""
Django Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Dual AI —Å–∏—Å—Ç–µ–º—ã
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Gemini –∏ DeepSeek –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
"""

from django.core.management.base import BaseCommand
from django.conf import settings
import time

from core.container import Container


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dual AI —Å–∏—Å—Ç–µ–º—ã (Gemini + DeepSeek)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--provider',
            type=str,
            choices=['gemini', 'deepseek', 'auto'],
            default='auto',
            help='–í—ã–±–æ—Ä AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        )
        parser.add_argument(
            '--question',
            type=str,
            default='–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–µ–º—É –ü–∏—Ñ–∞–≥–æ—Ä–∞',
            help='–í–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI'
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DUAL AI –°–ò–°–¢–ï–ú–´'))  # type: ignore
        self.stdout.write('=' * 70)
        
        provider = options['provider']
        question = options['question']
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.test_api_keys()
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.test_connections()
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        self.test_question(question, provider)
        
        # 4. –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if provider == 'auto':
            self.comparative_test()
        
        # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.show_stats()

    def test_api_keys(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π"""
        self.stdout.write('\nüîë –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô:')
        
        gemini_key = getattr(settings, 'GEMINI_API_KEY', '')
        deepseek_key = getattr(settings, 'DEEPSEEK_API_KEY', '')
        
        if gemini_key:
            self.stdout.write(f'  ‚úÖ GEMINI_API_KEY: {gemini_key[:10]}...')
        else:
            self.stdout.write('  ‚ùå GEMINI_API_KEY: –ù–ï –ù–ê–ô–î–ï–ù')
        
        if deepseek_key:
            self.stdout.write(f'  ‚úÖ DEEPSEEK_API_KEY: {deepseek_key[:10]}...')
        else:
            self.stdout.write('  ‚ùå DEEPSEEK_API_KEY: –ù–ï –ù–ê–ô–î–ï–ù')

    def test_connections(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º"""
        self.stdout.write('\nüîå –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô:')
        
        try:
            dual_orchestrator = Container.dual_ai_orchestrator()
            test_results = dual_orchestrator.test_all_providers()
            
            for provider, is_working in test_results.items():
                status = '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if is_working else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'
                self.stdout.write(f'  {provider.upper()}: {status}')
                
        except Exception as e:
            self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')

    def test_question(self, question: str, provider: str):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"""
        self.stdout.write(f'\nü§ñ –¢–ï–°–¢ –í–û–ü–†–û–°–ê: "{question}"')
        self.stdout.write(f'   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}')
        
        try:
            dual_orchestrator = Container.dual_ai_orchestrator()
            
            start_time = time.time()
            
            if provider == 'auto':
                response = dual_orchestrator.ask(question)
            else:
                response = dual_orchestrator.ask(question, provider=provider, use_fallback=False)
            
            end_time = time.time()
            
            answer = response.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
            provider_used = response.get('provider_used', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            processing_time = response.get('processing_time', end_time - start_time)
            
            self.stdout.write(f'\n  üìù –û–¢–í–ï–¢ ({provider_used}):\n{answer[:200]}...')
            self.stdout.write(f'  ‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.2f}—Å')
            
            if 'error' in response:
                self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞: {response["error"]}')
            else:
                self.stdout.write('  ‚úÖ –£—Å–ø–µ—à–Ω–æ')
                
        except Exception as e:
            self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')

    def comparative_test(self):
        """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        self.stdout.write('\n‚öñÔ∏è –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:')
        
        test_questions = [
            "–†–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ + 5x + 6 = 0",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–∏—á–∞—Å—Ç–∏–µ –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ?",
            "–û–±—ä—è—Å–Ω–∏ –∑–∞–∫–æ–Ω –û–º–∞"
        ]
        
        dual_orchestrator = Container.dual_ai_orchestrator()
        
        for i, question in enumerate(test_questions, 1):
            self.stdout.write(f'\n  üìù –¢–µ—Å—Ç {i}: {question}')
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            for provider in ['gemini', 'deepseek']:
                try:
                    start_time = time.time()
                    response = dual_orchestrator.ask(question, provider=provider, use_fallback=False)
                    end_time = time.time()
                    
                    if 'error' not in response:
                        answer = response.get('answer', '')[:50] + '...'
                        self.stdout.write(f'    {provider.upper()}: ‚úÖ {end_time - start_time:.2f}—Å - {answer}')
                    else:
                        self.stdout.write(f'    {provider.upper()}: ‚ùå {response.get("error", "–û—à–∏–±–∫–∞")}')
                        
                except Exception as e:
                    self.stdout.write(f'    {provider.upper()}: ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}')

    def show_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.stdout.write('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:')
        
        try:
            dual_orchestrator = Container.dual_ai_orchestrator()
            stats = dual_orchestrator.get_stats()
            
            for provider, provider_stats in stats['providers'].items():
                requests = provider_stats['requests']
                errors = provider_stats['errors']
                avg_time = provider_stats['avg_time']
                success_rate = ((requests - errors) / requests * 100) if requests > 0 else 0
                
                self.stdout.write(f'\n  {provider.upper()}:')
                self.stdout.write(f'    –ó–∞–ø—Ä–æ—Å–æ–≤: {requests}')
                self.stdout.write(f'    –û—à–∏–±–æ–∫: {errors}')
                self.stdout.write(f'    –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%')
                self.stdout.write(f'    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å')
            
            available = ', '.join(stats['available_providers'])
            self.stdout.write(f'\n  –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {available}')
            
        except Exception as e:
            self.stdout.write(f'  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}')
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.stdout.write('\n' + '=' * 70)
        self.stdout.write(self.style.SUCCESS('üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!'))  # type: ignore
        self.stdout.write('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
        self.stdout.write('  ‚Ä¢ –ï—Å–ª–∏ –æ–±–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç - —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞')
        self.stdout.write('  ‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏')
        self.stdout.write('  ‚Ä¢ –î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --provider')
        self.stdout.write('  ‚Ä¢ –î–ª—è —Å–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --question "–≤–∞—à –≤–æ–ø—Ä–æ—Å"')

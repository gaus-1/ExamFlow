"""
Django management command –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
"""

from django.core.management.base import BaseCommand
from core.fipi_parser_fixed import run_full_parsing
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--test',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ',
        )
        parser.add_argument(
            '--max-tasks',
            type=int,
            default=50,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)',
        )

    def handle(self, *args, **options):
        try:
            self.stdout.write("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞...")

            if options['test']:
                self.stdout.write("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
                success = run_full_parsing(
                    max_tasks_per_subject=10)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            else:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
                self.stdout.write("üìö –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞")
                success = run_full_parsing(options['max_tasks'])

            if success:
                self.stdout.write(
                    self.style.SUCCESS("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")  # type: ignore
                )
            else:
                self.stdout.write(
                    self.style.ERROR("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ")  # type: ignore
                )

        except Exception:
            logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.stdout.write(
                self.style.ERROR("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")  # type: ignore
            )

"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
"""

from django.core.management.base import BaseCommand
from django.core.management import call_command
from core.models import Task, Subject, UserProgress, UserRating
from django.db import connection


class Command(BaseCommand):
    help = '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞ (–æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.WARNING('üîÑ –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –ë–û–¢–ê')
        )
        self.stdout.write('=' * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        subjects_count = Subject.objects.count()
        tasks_count = Task.objects.count()
        
        self.stdout.write(f'üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:')
        self.stdout.write(f'   –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {subjects_count}')
        self.stdout.write(f'   –ó–∞–¥–∞–Ω–∏–π: {tasks_count}')
        
        if not options['force'] and tasks_count > 0:
            self.stdout.write(
                self.style.WARNING('‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏')
            )
            return
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.stdout.write('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
        
        with connection.cursor() as cursor:
            cursor.execute("DELETE FROM core_userprogress")
            cursor.execute("DELETE FROM core_userrating")
            cursor.execute("DELETE FROM core_task")
            cursor.execute("DELETE FROM core_subject")
        
        self.stdout.write(self.style.SUCCESS('‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã'))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.stdout.write('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
        call_command('load_sample_data')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        new_subjects_count = Subject.objects.count()
        new_tasks_count = Task.objects.count()
        
        self.stdout.write(f'üìä –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:')
        self.stdout.write(f'   –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {new_subjects_count}')
        self.stdout.write(f'   –ó–∞–¥–∞–Ω–∏–π: {new_tasks_count}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∑–∞–¥–∞–Ω–∏–π –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã
        tasks_with_answers = Task.objects.filter(answer__isnull=False).exclude(answer='').count()
        self.stdout.write(f'   –ó–∞–¥–∞–Ω–∏–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏: {tasks_with_answers}')
        
        if tasks_with_answers == 0:
            self.stdout.write(
                self.style.ERROR('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π —Å –æ—Ç–≤–µ—Ç–∞–º–∏!')
            )
        else:
            self.stdout.write(
                self.style.SUCCESS('üéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.')
            )

from django.core.management.base import BaseCommand
from django.db import connection
from django.core.management import call_command

class Command(BaseCommand):
    help = '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ExamFlow'

    def handle(self, *args, **options):
        self.stdout.write('üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• EXAMFLOW')
        self.stdout.write('=' * 60)

        try:
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.stdout.write('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...')
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
            self.stdout.write(self.style.SUCCESS(
                '‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞'))  # type: ignore

            # –®–∞–≥ 2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            self.stdout.write('üîÑ –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è...')
            self.create_missing_fields()

            # –®–∞–≥ 3: –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            self.stdout.write('üì¶ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...')
            call_command('migrate', '--fake-initial')

            # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.stdout.write('‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π...')
            call_command('showmigrations')

            # –®–∞–≥ 5: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.stdout.write('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö...')
            call_command('load_sample_data')

            self.stdout.write('=' * 60)
            self.stdout.write(self.style.SUCCESS(
                'üéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ê!'))  # type: ignore

        except Exception as e:
            self.stdout.write(self.style.ERROR('‚ùå –û—à–∏–±–∫–∞: {e}'))  # type: ignore

    def create_missing_fields(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è"""
        with connection.cursor() as cursor:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ exam_type –≤ learning_subject
            try:
                cursor.execute("""
                    ALTER TABLE learning_subject
                    ADD COLUMN IF NOT EXISTS exam_type VARCHAR(3) DEFAULT '–ï–ì–≠';
                """)
                self.stdout.write('‚úÖ –ü–æ–ª–µ exam_type –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ learning_subject')
            except Exception as e:
                self.stdout.write('‚ö†Ô∏è exam_type: {e}')

            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ code –≤ learning_topic
            try:
                cursor.execute("""
                    ALTER TABLE learning_topic
                    ADD COLUMN IF NOT EXISTS code VARCHAR(20) DEFAULT '';
                """)
                self.stdout.write('‚úÖ –ü–æ–ª–µ code –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ learning_topic')
            except Exception as e:
                self.stdout.write('‚ö†Ô∏è code: {e}')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            try:
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS learning_subject (
                        id SERIAL PRIMARY KEY,
                        name VARCHAR(100) NOT NULL,
                        exam_type VARCHAR(3) DEFAULT '–ï–ì–≠'
                    );
                """)
                self.stdout.write('‚úÖ –¢–∞–±–ª–∏—Ü–∞ learning_subject –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞')
            except Exception as e:
                self.stdout.write('‚ö†Ô∏è learning_subject: {e}')

            try:
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS learning_task (
                        id SERIAL PRIMARY KEY,
                        title VARCHAR(200) NOT NULL,
                        description TEXT,
                        answer VARCHAR(500),
                        source VARCHAR(200),
                        difficulty INTEGER DEFAULT 1,
                        subject_id INTEGER REFERENCES learning_subject(id),
                        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
                    );
                """)
                self.stdout.write('‚úÖ –¢–∞–±–ª–∏—Ü–∞ learning_task –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞')
            except Exception as e:
                self.stdout.write('‚ö†Ô∏è learning_task: {e}')

"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–∞–π—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç "–∑–∞—Å—ã–ø–∞–Ω–∏–µ" —Å–∞–π—Ç–∞ –Ω–∞ Render
"""

import requests
import time
import logging
from django.core.management.base import BaseCommand
from django.conf import settings

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∞–π—Ç –∞–∫—Ç–∏–≤–Ω—ã–º, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è "–∑–∞—Å—ã–ø–∞–Ω–∏–µ" –Ω–∞ Render'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--interval',
            type=int,
            default=600,  # 10 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 600 = 10 –º–∏–Ω—É—Ç)'
        )
        parser.add_argument(
            '--continuous',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ'
        )
        parser.add_argument(
            '--url',
            type=str,
            default='https://examflow.ru',
            help='URL —Å–∞–π—Ç–∞ –¥–ª—è keep-alive'
        )
    
    def handle(self, *args, **options):
        interval = options['interval']
        continuous = options['continuous']
        site_url = options['url']
        
        self.stdout.write(
            f'üîÑ –ó–∞–ø—É—Å–∫ keep-alive –¥–ª—è —Å–∞–π—Ç–∞ {site_url} (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)'
        )
        
        while True:
            try:
                # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É, —á—Ç–æ–±—ã "—Ä–∞–∑–±—É–¥–∏—Ç—å" –µ–≥–æ
                response = requests.get(
                    site_url, 
                    timeout=30,
                    headers={
                        'User-Agent': 'ExamFlow-KeepAlive/1.0'
                    }
                )
                
                timestamp = time.strftime('%H:%M:%S')
                if response.status_code == 200:
                    self.stdout.write(f"‚úÖ {timestamp} - –°–∞–π—Ç –∞–∫—Ç–∏–≤–µ–Ω (HTTP {response.status_code})")
                    logger.info(f"–°–∞–π—Ç –∞–∫—Ç–∏–≤–µ–Ω: {timestamp} - HTTP {response.status_code}")
                else:
                    self.stdout.write(f"‚ö†Ô∏è {timestamp} - –°–∞–π—Ç –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å {response.status_code}")
                    logger.warning(f"–°–∞–π—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {response.status_code}: {timestamp}")
                
            except requests.exceptions.Timeout:
                timestamp = time.strftime('%H:%M:%S')
                self.stdout.write(f"‚è∞ {timestamp} - –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–∞–π—Ç—É")
                logger.warning(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–∞–π—Ç—É: {timestamp}")
                
            except requests.exceptions.ConnectionError as e:
                timestamp = time.strftime('%H:%M:%S')
                self.stdout.write(f"üîå {timestamp} - –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–∞–π—Ç–æ–º: {e}")
                
            except Exception as e:
                timestamp = time.strftime('%H:%M:%S')
                self.stdout.write(f"‚ùå {timestamp} - –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ keep-alive —Å–∞–π—Ç–∞: {e}")
            
            if not continuous:
                break
                
            time.sleep(interval)
        
        self.stdout.write('üèÅ Keep-alive —Å–∞–π—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω')

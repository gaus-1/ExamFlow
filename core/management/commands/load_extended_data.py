from django.core.management.base import BaseCommand
from core.models import Subject, Task
import random

class Command(BaseCommand):
    help = "–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –±–∞–∑—É –∑–∞–¥–∞–Ω–∏–π –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º"

    def add_arguments(self, parser):
        parser.add_argument(
            '--subject',
            type=str,
            help='–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞'
        )
        parser.add_argument(
            '--count',
            type=int,
            default=50,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)'
        )

    def handle(self, *args, **options):
        subject_filter = options.get('subject')
        tasks_per_subject = options.get('count', 50)

        # –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –∑–∞–¥–∞–Ω–∏—è
        math_tasks = [
        ]

        # –§–∏–∑–∏–∫–∞ - –∑–∞–¥–∞–Ω–∏—è
        physics_tasks = [
        ]

        # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - –∑–∞–¥–∞–Ω–∏—è
        russian_tasks = [
        ]

        # –•–∏–º–∏—è - –∑–∞–¥–∞–Ω–∏—è
        chemistry_tasks = [
        ]

        # –ë–∏–æ–ª–æ–≥–∏—è - –∑–∞–¥–∞–Ω–∏—è
        biology_tasks = [
        ]

        # –ò—Å—Ç–æ—Ä–∏—è - –∑–∞–¥–∞–Ω–∏—è
        history_tasks = [
        ]

        # –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ - –∑–∞–¥–∞–Ω–∏—è
        social_tasks = [
        ]

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ - –∑–∞–¥–∞–Ω–∏—è
        informatics_tasks = [
        ]

        subjects_tasks = {
            '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': math_tasks,
            '–§–∏–∑–∏–∫–∞': physics_tasks,
            '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': russian_tasks,
            '–•–∏–º–∏—è': chemistry_tasks,
            '–ë–∏–æ–ª–æ–≥–∏—è': biology_tasks,
            '–ò—Å—Ç–æ—Ä–∏—è': history_tasks,
            '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': social_tasks,
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': informatics_tasks,
        }

        total_created = 0

        for subject_name, base_tasks in subjects_tasks.items():
            if subject_filter and subject_name != subject_filter:
                continue

            try:
                subject = Subject.objects.get(name=subject_name)
            except Subject.DoesNotExist:
                self.stdout.write("‚ùå –ü—Ä–µ–¥–º–µ—Ç {subject_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue

            created_for_subject = 0

            # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
            for title, description, difficulty, answer in base_tasks:
                task, created = Task.objects.get_or_create(
                    title=title,
                    subject=subject,
                    defaults={
                        'description': description,
                        'difficulty': difficulty,
                        'answer': answer
                    }
                )
                if created:
                    created_for_subject += 1

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            additional_count = max(0, tasks_per_subject - len(base_tasks))
            for i in range(additional_count):
                base_task = random.choice(base_tasks)
                title = "{base_task[0]} - –≤–∞—Ä–∏–∞–Ω—Ç {i+1}"
                description = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ: {base_task[0].lower()}"
                difficulty = random.choice([1, 2, 3])

                task, created = Task.objects.get_or_create(
                    title=title,
                    subject=subject,
                    defaults={
                        'description': description,
                        'difficulty': difficulty,
                        'answer': "–û—Ç–≤–µ—Ç –∫ –∑–∞–¥–∞–Ω–∏—é {i+1}"
                    }
                )
                if created:
                    created_for_subject += 1

            total_created += created_for_subject
            self.stdout.write(
                "‚úÖ {subject_name}: —Å–æ–∑–¥–∞–Ω–æ {created_for_subject} –∑–∞–¥–∞–Ω–∏–π")

        self.stdout.write(
            self.style.SUCCESS("üéâ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ {total_created} –∑–∞–¥–∞–Ω–∏–π!")
        )

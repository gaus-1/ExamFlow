"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI —Å–∏—Å—Ç–µ–º—ã
"""

import requests
import json
import re
from django.core.management.base import BaseCommand
from django.conf import settings
from core.container import Container


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI —Å–∏—Å—Ç–µ–º—É ExamFlow'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--url',
            type=str,
            default='http://localhost:8000',
            help='URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8000)'
        )
    
    def handle(self, *args, **options):
        self.stdout.write("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –°–ò–°–¢–ï–ú–´ EXAMFLOW")
        self.stdout.write("=" * 50)
        
        base_url = options['url']
        
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.test_configuration()
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ AI
        self.test_direct_ai()
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.test_web_interface(base_url)
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram –±–æ—Ç
        self.test_telegram_bot()
        
        self.stdout.write("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def test_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI"""
        self.stdout.write("\nüîß –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        gemini_key = getattr(settings, 'GEMINI_API_KEY', None)
        if gemini_key and gemini_key != '<set-in-env>':
            self.stdout.write("  ‚úÖ GEMINI_API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            self.stdout.write("  ‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Container
        try:
            ai_orchestrator = Container.ai_orchestrator()
            if ai_orchestrator:
                self.stdout.write("  ‚úÖ AI Orchestrator –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                self.stdout.write("  ‚ùå AI Orchestrator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            self.stdout.write(f"  ‚ùå –û—à–∏–±–∫–∞ Container: {e}")
    
    def test_direct_ai(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ AI"""
        self.stdout.write("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–Ø–ú–û–ì–û AI:")
        
        try:
            ai_orchestrator = Container.ai_orchestrator()
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            test_queries = [
                "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è?",
                "–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è"
            ]
            
            for i, query in enumerate(test_queries, 1):
                try:
                    response = ai_orchestrator.process_query(query)  # type: ignore
                    if response and isinstance(response, dict) and 'answer' in response:
                        answer_length = len(response['answer'])
                        self.stdout.write(f"  ‚úÖ –ó–∞–ø—Ä–æ—Å {i}: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç ({answer_length} —Å–∏–º–≤–æ–ª–æ–≤)")
                    else:
                        self.stdout.write(f"  ‚ùå –ó–∞–ø—Ä–æ—Å {i}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                except Exception as e:
                    self.stdout.write(f"  ‚ùå –ó–∞–ø—Ä–æ—Å {i}: –æ—à–∏–±–∫–∞ {e}")
                    
        except Exception as e:
            self.stdout.write(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ AI: {e}")
    
    def test_web_interface(self, base_url):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        self.stdout.write("\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ï–ë –ò–ù–¢–ï–†–§–ï–ô–°–ê:")
        
        try:
            session = requests.Session()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            response = session.get(base_url, timeout=10)
            
            if response.status_code == 200:
                self.stdout.write(f"  ‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {response.status_code})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —ç–ª–µ–º–µ–Ω—Ç—ã
                html = response.text
                ai_elements = [
                    ("AI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "ai-interface"),
                    ("AI –∏–Ω–ø—É—Ç", "ai-input"),
                    ("AI –∫–Ω–æ–ø–∫–∞", "ai-send-btn"),
                    ("JavaScript", "examflow-main.js"),
                ]
                
                for name, selector in ai_elements:
                    if selector in html:
                        self.stdout.write(f"  ‚úÖ {name} –Ω–∞–π–¥–µ–Ω")
                    else:
                        self.stdout.write(f"  ‚ùå {name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —á–µ—Ä–µ–∑ –≤–µ–±
                csrf_match = re.search(r'csrfmiddlewaretoken[^>]*value=["\']([^"\']*)["\']', html)
                if csrf_match:
                    csrf_token = csrf_match.group(1)
                    self.stdout.write("  ‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI API
                    try:
                        ai_response = session.post(
                            f"{base_url}/ai/api/",
                            json={'prompt': '–¢–µ—Å—Ç –≤–µ–± API'},
                            headers={
                                'X-CSRFToken': csrf_token,
                                'Content-Type': 'application/json'
                            },
                            timeout=30
                        )
                        
                        if ai_response.status_code == 200:
                            data = ai_response.json()
                            if 'answer' in data and data['answer']:
                                self.stdout.write("  ‚úÖ AI API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                            else:
                                self.stdout.write("  ‚ùå AI API: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                        else:
                            self.stdout.write(f"  ‚ùå AI API: HTTP {ai_response.status_code}")
                            
                    except Exception as e:
                        self.stdout.write(f"  ‚ùå AI API –æ—à–∏–±–∫–∞: {e}")
                else:
                    self.stdout.write("  ‚ùå CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                self.stdout.write(f"  ‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {response.status_code})")
                
        except Exception as e:
            self.stdout.write(f"  ‚ùå –û—à–∏–±–∫–∞ –≤–µ–± –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
    
    def test_telegram_bot(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Telegram –±–æ—Ç"""
        self.stdout.write("\nüì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TELEGRAM –ë–û–¢–ê:")
        
        try:
            from telegram_bot.services.ai_dialogs import get_ai_response
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å –±–æ—Ç–∞
            test_queries = [
                "–ü—Ä–∏–≤–µ—Ç –∏–∑ –±–æ—Ç–∞!",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª?",
                "–ü–æ–º–æ–≥–∏ —Å –∑–∞–¥–∞—á–µ–π"
            ]
            
            for i, query in enumerate(test_queries, 1):
                try:
                    response = get_ai_response(query, task_type='chat')
                    if response and not response.startswith('–û—à–∏–±–∫–∞'):
                        self.stdout.write(f"  ‚úÖ –ë–æ—Ç –∑–∞–ø—Ä–æ—Å {i}: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç")
                    else:
                        self.stdout.write(f"  ‚ùå –ë–æ—Ç –∑–∞–ø—Ä–æ—Å {i}: {response or '–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'}")
                except Exception as e:
                    self.stdout.write(f"  ‚ùå –ë–æ—Ç –∑–∞–ø—Ä–æ—Å {i}: –æ—à–∏–±–∫–∞ {e}")
                    
        except ImportError as e:
            self.stdout.write(f"  ‚ùå –ò–º–ø–æ—Ä—Ç –±–æ—Ç –º–æ–¥—É–ª–µ–π: {e}")
        except Exception as e:
            self.stdout.write(f"  ‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}")

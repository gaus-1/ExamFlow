"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã
"""

from django.core.management.base import BaseCommand
from core.rag_system.orchestrator import get_ai_orchestrator
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG-—Å–∏—Å—Ç–µ–º—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏'

    def add_arguments(self, parser):
        parser.add_argument(
            '--query',
            type=str,
            help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            default=None
        )
        parser.add_argument(
            '--user-id',
            type=int,
            help='ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏',
            default=None
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG-—Å–∏—Å—Ç–µ–º—ã ExamFlow 2.0') # type: ignore      
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        try:
            orchestrator = get_ai_orchestrator()
            self.stdout.write(
                self.style.SUCCESS('RAG-—Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞') # type: ignore
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG-—Å–∏—Å—Ç–µ–º—ã: {e}') # type: ignore
            )
            return

        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "–ö–∞–∫ —Ä–µ—à–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è?",
            "–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–∏—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏",
            "–ö–∞–∫ –ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É?",
            "–ü—Ä–∞–≤–∏–ª–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏",
            "–û—Å–Ω–æ–≤—ã –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏"
        ]

        if options['query']:
            test_queries = [options['query']]

        user_id = options.get('user_id')

        for i, query in enumerate(test_queries, 1):
            self.stdout.write(f'\nüìù –¢–µ—Å—Ç {i}: {query}')
            self.stdout.write('-' * 50)
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
                response = orchestrator.process_query(query, user_id)
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.stdout.write(f'–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω') # type: ignore
                self.stdout.write(f'–û—Ç–≤–µ—Ç: {response["answer"][:200]}...')
                self.stdout.write(f'–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(response["sources"])}')
                self.stdout.write(f'–ü—Ä–∞–∫—Ç–∏–∫–∞: {response["practice"]["topic"]}')
                
                if response.get('error'):
                    self.stdout.write(f'–û—à–∏–±–∫–∞: {response["error"]}') # type: ignore
                
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}') # type: ignore
                )

        self.stdout.write(
            self.style.SUCCESS('\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG-—Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!') # type: ignore
        )
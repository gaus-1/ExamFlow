"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
import logging

from core.rag_system.orchestrator import AIOrchestrator
from core.rag_system.vector_store import VectorStore
from core.rag_system.text_processor import TextProcessor

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG-—Å–∏—Å—Ç–µ–º—É ExamFlow'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--query',
            type=str,
            help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è RAG-—Å–∏—Å—Ç–µ–º—ã',
        )
        parser.add_argument(
            '--test-all',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
        )
        parser.add_argument(
            '--stats',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã',
        )
    
    def handle(self, *args, **options):
        if options['stats']:
            self.show_statistics()
            return
        
        if options['test_all']:
            self.run_full_test()
            return
        
        if options['query']:
            self.test_query(options['query'])
            return
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        self.interactive_mode()
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RAG-—Å–∏—Å—Ç–µ–º—ã"""
        self.stdout.write(
            self.style.SUCCESS('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG-—Å–∏—Å—Ç–µ–º—ã ExamFlow')
        )
        
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            vector_store = VectorStore()
            stats = vector_store.get_statistics()
            
            self.stdout.write(f"üìö –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {stats.get('total_sources', 0)}")
            self.stdout.write(f"üß© –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {stats.get('total_chunks', 0)}")
            self.stdout.write(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {stats.get('processed_sources', 0)}")
            self.stdout.write(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats.get('processing_percentage', 0):.1f}%")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from core.models import FIPIData, DataChunk
            
            total_fipi = FIPIData.objects.count()
            processed_fipi = FIPIData.objects.filter(is_processed=True).count()
            total_chunks = DataChunk.objects.count()
            
            self.stdout.write(f"\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            self.stdout.write(f"   - –ó–∞–ø–∏—Å–µ–π –§–ò–ü–ò: {total_fipi}")
            self.stdout.write(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_fipi}")
            self.stdout.write(f"   - –ß–∞–Ω–∫–æ–≤ –≤ –ë–î: {total_chunks}")
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}')
            )
    
    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.stdout.write(
            self.style.SUCCESS('üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã...')
        )
        
        # –¢–µ—Å—Ç 1: –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self.stdout.write("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...")
        try:
            vector_store = VectorStore()
            test_text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞"
            embedding = vector_store.create_embedding(test_text)
            
            if embedding and len(embedding) > 0:
                self.stdout.write(
                    self.style.SUCCESS(f"   ‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω (—Ä–∞–∑–º–µ—Ä: {len(embedding)})")
                )
            else:
                self.stdout.write(
                    self.style.ERROR("   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞")
                )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"   ‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
            )
        
        # –¢–µ—Å—Ç 2: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        self.stdout.write("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        try:
            processor = TextProcessor()
            test_text = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏. " * 50
            chunks = processor.create_chunks(test_text)
            
            if chunks and len(chunks) > 0:
                self.stdout.write(
                    self.style.SUCCESS(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")
                )
            else:
                self.stdout.write(
                    self.style.ERROR("   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤")
                )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {e}")
            )
        
        # –¢–µ—Å—Ç 3: –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        self.stdout.write("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        try:
            orchestrator = AIOrchestrator()
            test_query = "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ?"
            response = orchestrator.process_query(test_query)
            
            if response and 'answer' in response:
                self.stdout.write(
                    self.style.SUCCESS("   ‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
                )
                self.stdout.write(f"   üìù –û—Ç–≤–µ—Ç: {response['answer'][:100]}...")
            else:
                self.stdout.write(
                    self.style.ERROR("   ‚ùå –û—à–∏–±–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            )
        
        # –¢–µ—Å—Ç 4: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
        self.stdout.write("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        try:
            vector_store = VectorStore()
            search_results = vector_store.search("–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", limit=3)
            
            if search_results is not None:
                self.stdout.write(
                    self.style.SUCCESS(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                )
            else:
                self.stdout.write(
                    self.style.ERROR("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
                )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            )
        
        self.stdout.write(
            self.style.SUCCESS("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        )
    
    def test_query(self, query):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        self.stdout.write(
            self.style.SUCCESS(f'üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: "{query}"')
        )
        
        try:
            orchestrator = AIOrchestrator()
            response = orchestrator.process_query(query)
            
            self.stdout.write("\nüìù –û—Ç–≤–µ—Ç:")
            self.stdout.write(f"   {response.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
            
            if 'sources' in response and response['sources']:
                self.stdout.write("\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
                for i, source in enumerate(response['sources'], 1):
                    self.stdout.write(f"   {i}. {source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    self.stdout.write(f"      URL: {source.get('url', '–ù–µ—Ç URL')}")
                    self.stdout.write(f"      –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source.get('relevance', 0):.2f}")
            
            if 'practice' in response:
                practice = response['practice']
                self.stdout.write(f"\nüí™ –ü—Ä–∞–∫—Ç–∏–∫–∞: {practice.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}')
            )
    
    def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.stdout.write(
            self.style.SUCCESS('üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã')
        )
        self.stdout.write("–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞, 'stats' –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        try:
            orchestrator = AIOrchestrator()
            
            while True:
                query = input("\n‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
                
                if query.lower() == 'exit':
                    break
                elif query.lower() == 'stats':
                    self.show_statistics()
                    continue
                elif not query:
                    continue
                
                self.stdout.write("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
                
                try:
                    response = orchestrator.process_query(query)
                    
                    self.stdout.write("\nüí° –û—Ç–≤–µ—Ç:")
                    self.stdout.write(f"   {response.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
                    
                    if 'sources' in response and response['sources']:
                        self.stdout.write(f"\nüìö –ù–∞–π–¥–µ–Ω–æ {len(response['sources'])} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
                    
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f"–û—à–∏–±–∫–∞: {e}")
                    )
        
        except KeyboardInterrupt:
            self.stdout.write("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
            )

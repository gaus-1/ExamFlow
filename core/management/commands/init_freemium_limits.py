"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ freemium –ª–∏–º–∏—Ç–æ–≤
"""

from django.core.management.base import BaseCommand
from core.freemium.models import SubscriptionLimit


class Command(BaseCommand):
    help = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç freemium –ª–∏–º–∏—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ª–∏–º–∏—Ç—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç'
        )
    
    def handle(self, *args, **options):
        force = options['force']
        
        self.stdout.write("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è freemium –ª–∏–º–∏—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ –ª–∏–º–∏—Ç—ã
        if SubscriptionLimit.objects.exists() and not force: # type: ignore
            self.stdout.write(self.style.WARNING("–õ–∏–º–∏—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è.")) # type: ignore        
            return
        
        if force:
            self.stdout.write("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏–º–∏—Ç—ã...")
            SubscriptionLimit.objects.all().delete() # type: ignore
        
        # –°–æ–∑–¥–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç
        free_limit, created = SubscriptionLimit.objects.get_or_create( # type: ignore
            name='free',
            defaults={
                'daily_ai_requests': 10,
                'max_subjects': 5,
                'max_tasks_per_day': 50,
                'has_analytics': True,
                'has_gamification': True,
                'has_ai_hints': True,
                'is_premium': False,
                'price': 0,
                'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–æ–≤'
            }
        )
        
        if created:
            self.stdout.write("‚úÖ –°–æ–∑–¥–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç")
        else:
            self.stdout.write("‚ÑπÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–º–∏—É–º –ª–∏–º–∏—Ç
        premium_limit, created = SubscriptionLimit.objects.get_or_create( # type: ignore
            name='premium',
            defaults={
                'daily_ai_requests': -1,  # -1 –æ–∑–Ω–∞—á–∞–µ—Ç –±–µ–∑–ª–∏–º–∏—Ç
                'max_subjects': -1,
                'max_tasks_per_day': -1,
                'has_analytics': True,
                'has_gamification': True,
                'has_ai_hints': True,
                'is_premium': True,
                'price': 990,
                'description': '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø'
            }
        )
        
        if created:
            self.stdout.write("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –ª–∏–º–∏—Ç")
        else:
            self.stdout.write("‚ÑπÔ∏è –ü—Ä–µ–º–∏—É–º –ª–∏–º–∏—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        self.stdout.write("\nüìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã:")
        for limit in SubscriptionLimit.objects.all(): # type: ignore
            self.stdout.write(f"   - {limit.name}: {limit.description}")
            self.stdout.write(f"     AI –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å: {limit.daily_ai_requests}")
            self.stdout.write(f"     –¶–µ–Ω–∞: {limit.price} ‚ÇΩ")
        
        self.stdout.write(self.style.SUCCESS("\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è freemium –ª–∏–º–∏—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")) # type: ignore
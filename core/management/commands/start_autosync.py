"""
–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ Django management-–∫–æ–º–∞–Ω–¥—ã
"""

import os
import time
import logging
from datetime import datetime, timedelta
from typing import Optional

from django.core.management.base import BaseCommand
from django.utils import timezone

from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

from core.models import FIPISourceMap, FIPIData
from core.data_ingestion.advanced_fipi_scraper import AdvancedFIPIScraper
from core.data_ingestion.ingestion_engine import IngestionEngine, TaskPriority
# –ò–º–ø–æ—Ä—Ç PDF-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤–Ω—É—Ç—Ä—å —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö –±–µ–∑ cffi/cryptography

logger = logging.getLogger(__name__)


def _send_telegram_broadcast(text: str) -> None:
    """–ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
    –¢—Ä–µ–±—É–µ—Ç TELEGRAM_BOT_TOKEN –∏ TELEGRAM_BROADCAST_CHAT_ID –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.
    """
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_BROADCAST_CHAT_ID')
    if not token or not chat_id:
        return
    try:
        import requests
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        requests.post(url, data={
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }, timeout=10)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")


class Command(BaseCommand):
    help = "–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ—Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"

    def add_arguments(self, parser):
        parser.add_argument('--ingest-interval-min', type=int, default=120,
                            help='–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á IngestionEngine, –º–∏–Ω')
        parser.add_argument('--scrape-interval-min', type=int, default=180,
                            help='–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–¥–∞ AdvancedFIPIScraper, –º–∏–Ω')
        parser.add_argument('--pdf-interval-min', type=int, default=360,
                            help='–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF, –º–∏–Ω')
        parser.add_argument('--detect-interval-min', type=int, default=360,
                            help='–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –º–∏–Ω')
        parser.add_argument('--pdf-batch', type=int, default=20,
                            help='–°–∫–æ–ª—å–∫–æ PDF –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞ —Ü–∏–∫–ª')

    def handle(self, *args, **options):
        ingest_interval_min: int = options['ingest_interval_min']
        scrape_interval_min: int = options['scrape_interval_min']
        pdf_interval_min: int = options['pdf_interval_min']
        detect_interval_min: int = options['detect_interval_min']
        pdf_batch: int = options['pdf_batch']

        self.stdout.write(self.style.SUCCESS('üöÄ –°—Ç–∞—Ä—Ç –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'))  # type: ignore

        scheduler = BackgroundScheduler(timezone=str(timezone.get_current_timezone()))

        # 1) –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ IngestionEngine –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        def add_ingestion_tasks():
            try:
                engine = IngestionEngine()
                if not engine.is_running:
                    engine.start()
                active = FIPISourceMap.objects.filter(is_active=True)  # type: ignore
                added = 0
                now_ts = int(time.time())
                for src in active:
                    from core.data_ingestion.ingestion_engine import IngestionTask
                    task = IngestionTask(
                        id=f"task_{src.source_id}_{now_ts}",
                        source_id=src.source_id,
                        url=src.url,
                        priority=TaskPriority.HIGH,
                        data_type=src.data_type,
                        created_at=timezone.now()
                    )
                    engine.task_queue.add_task(task)
                    added += 1
                logger.info(f"–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ: –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á –≤ IngestionEngine: {added}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ add_ingestion_tasks: {e}")

        scheduler.add_job(add_ingestion_tasks,
                          trigger=IntervalTrigger(minutes=ingest_interval_min),
                          id='add_ingestion_tasks', max_instances=1, coalesce=True, replace_existing=True)

        # 2) –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ö–æ–¥ —Å–∫—Ä–µ–π–ø–µ—Ä–∞ –ø–æ –∏–Ω–¥–µ–∫—Å-—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º c —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
        def run_scraper_cycle():
            try:
                scraper = AdvancedFIPIScraper()
                data = scraper.collect_from_source_map()
                scraper.save_to_database(data)
                logger.info("–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ: —Ü–∏–∫–ª —Å–∫—Ä–µ–π–ø–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ run_scraper_cycle: {e}")

        scheduler.add_job(run_scraper_cycle,
                          trigger=IntervalTrigger(minutes=scrape_interval_min),
                          id='run_scraper_cycle', max_instances=1, coalesce=True, replace_existing=True)

        # 3) –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF
        def process_pdfs():
            try:
                # –§–ª–∞–≥ –¥–ª—è —è–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è PDF-–ø–∞–π–ø–ª–∞–π–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Windows –ª–æ–∫–∞–ª—å–Ω–æ)
                if os.getenv('USE_PDF_PIPELINE', '0') != '1':
                    logger.info("–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ: PDF-–ø–∞–π–ø–ª–∞–π–Ω –æ—Ç–∫–ª—é—á–µ–Ω (USE_PDF_PIPELINE!=1)")
                    return

                # –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, —á—Ç–æ–±—ã –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–æ–º–∞–Ω–¥—ã
                from core.data_ingestion.pdf_processor import get_pdf_processor  # type: ignore
                processor = get_pdf_processor()
                pdf_qs = FIPIData.objects.filter(  # type: ignore
                    is_processed=False,
                    url__iendswith='.pdf',
                ).order_by('id')[:pdf_batch]

                done = 0
                for item in pdf_qs:
                    result = processor.process_pdf(item)
                    if isinstance(result, dict) and result.get('status') == 'completed':
                        done += 1
                logger.info(f"–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ: PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {done}/{len(pdf_qs)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ process_pdfs: {e}")

        scheduler.add_job(process_pdfs,
                          trigger=IntervalTrigger(minutes=pdf_interval_min),
                          id='process_pdfs', max_instances=1, coalesce=True, replace_existing=True)

        # 4) –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç
        def detect_changes_and_notify():
            try:
                # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —Å–æ–æ–±—â–∞–µ–º –æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
                since = timezone.now() - timedelta(hours=6)
                new_count = FIPIData.objects.filter(created_at__gte=since).count()  # type: ignore
                if new_count > 0:
                    _send_telegram_broadcast(
                        f"üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: –¥–æ–±–∞–≤–ª–µ–Ω–æ {new_count} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤"
                    )
                logger.info("–ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π/—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ detect_changes_and_notify: {e}")

        scheduler.add_job(detect_changes_and_notify,
                          trigger=IntervalTrigger(minutes=detect_interval_min),
                          id='detect_changes_and_notify', max_instances=1, coalesce=True, replace_existing=True)

        scheduler.start()
        self.stdout.write(self.style.SUCCESS('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)'))  # type: ignore

        try:
            while True:
                time.sleep(5)
        except KeyboardInterrupt:
            self.stdout.write(self.style.WARNING('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...'))  # type: ignore
            scheduler.shutdown(wait=False)
            self.stdout.write(self.style.SUCCESS('–ì–æ—Ç–æ–≤–æ'))  # type: ignore



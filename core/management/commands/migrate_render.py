"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ Render.com
–í–∫–ª—é—á–∞–µ—Ç retry –ª–æ–≥–∏–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
"""

import logging

from django.core.management import call_command
from django.core.management.base import BaseCommand, CommandError

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ Render.com —Å retry –ª–æ–≥–∏–∫–æ–π"

    def add_arguments(self, parser):
        parser.add_argument(
            "--max-retries",
            type=int,
            default=3,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)",
        )
        parser.add_argument(
            "--delay",
            type=int,
            default=10,
            help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)",
        )

    def handle(self, *args, **options):
        max_retries = options["max_retries"]
        delay = options["delay"]

        self.stdout.write(
            self.style.SUCCESS(  # type: ignore
                f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π (max_retries={max_retries}, delay={delay}s)"
            )
        )

        # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
        try:
            self._apply_migrations_with_retry(max_retries, delay)
            self.stdout.write(
                self.style.SUCCESS("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")  # type: ignore
            )
        except Exception as e:
            self.stderr.write(
                self.style.ERROR(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")  # type: ignore
            )
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–π...")  # type: ignore
            )

    def _apply_migrations_with_retry(self, max_retries, delay):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å retry –ª–æ–≥–∏–∫–æ–π"""

        for attempt in range(max_retries):
            try:
                self.stdout.write(
                    f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏..."
                )

                # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
                try:
                    call_command("migrate", "--noinput")
                    self.stdout.write("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                    return
                except Exception as e:
                    self.stdout.write(f"‚ö†Ô∏è –û–±—ã—á–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å: {e}")

                    # –ü—Ä–æ–±—É–µ–º —Å run-syncdb
                    self.stdout.write("üîÑ –ü—Ä–æ–±—É–µ–º —Å --run-syncdb...")
                    call_command("migrate", "--run-syncdb", "--noinput")
                    self.stdout.write("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —Å --run-syncdb!")
                    return

            except Exception as e:
                self.stderr.write(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < max_retries - 1:
                    self.stdout.write(
                        f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π..."
                    )
                    import time

                    time.sleep(delay)
                else:
                    raise CommandError(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}"
                    )

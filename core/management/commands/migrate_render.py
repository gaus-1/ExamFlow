"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ Render.com
–í–∫–ª—é—á–∞–µ—Ç retry –ª–æ–≥–∏–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
"""

from django.core.management.base import BaseCommand, CommandError
from django.core.management import call_command
from django.db import connection
from core.database_utils import retry_database_operation, ensure_database_connection
import logging

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = '–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ Render.com —Å retry –ª–æ–≥–∏–∫–æ–π'

    def add_arguments(self, parser):
        parser.add_argument(
            '--max-retries',
            type=int,
            default=3,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)'
        )
        parser.add_argument(
            '--delay',
            type=int,
            default=10,
            help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)'
        )

    def handle(self, *args, **options):
        max_retries = options['max_retries']
        delay = options['delay']
        
        self.stdout.write(
            self.style.SUCCESS(
                f'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π (max_retries={max_retries}, delay={delay}s)'
            )
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.stdout.write('üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
        if not ensure_database_connection():
            raise CommandError('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ —Å retry –ª–æ–≥–∏–∫–æ–π
        self._apply_migrations_with_retry(max_retries, delay)
        
        self.stdout.write(
            self.style.SUCCESS('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
        )

    def _apply_migrations_with_retry(self, max_retries, delay):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å retry –ª–æ–≥–∏–∫–æ–π"""
        
        @retry_database_operation(max_retries=max_retries, delay=delay)
        def apply_migrations():
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
            try:
                call_command('makemigrations', '--dry-run', '--check')
                self.stdout.write('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã')
            except CommandError:
                self.stdout.write('‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º...')
                call_command('makemigrations')
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            self.stdout.write('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...')
            call_command('migrate', '--noinput')
            
            return True
        
        try:
            apply_migrations()
        except Exception as e:
            raise CommandError(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}')

"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞
"""

import logging
from django.core.management.base import BaseCommand
from django.conf import settings

logger = logging.getLogger(__name__)


class Command(BaseCommand):  # type: ignore
    help = "–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"

    def add_arguments(self, parser):
        parser.add_argument(
            '--webhook',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ webhook –≤–º–µ—Å—Ç–æ polling'
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...')  # type: ignore
        )

        try:
            import asyncio
            from telegram import Update
            from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
            from core.rag_system.orchestrator import RAGOrchestrator

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
            bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
            if not bot_token:
                self.stdout.write(
                    self.style.ERROR('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings')  # type: ignore
                )
                return

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            orchestrator = RAGOrchestrator()

            async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
                await update.message.reply_text(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–ø–æ–º–æ—â–Ω–∏–∫ ExamFlow.\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –§–ò–ü–ò\n"
                    "/fipi <–ø—Ä–µ–¥–º–µ—Ç> <—Ç–∏–ø> - –ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É\n"
                    "/help - –ø–æ–º–æ—â—å\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ –ï–ì–≠/–û–ì–≠!"
                )

            async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
                await update.message.reply_text(
                    "üìö –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
                    "/search <–∑–∞–ø—Ä–æ—Å> - –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –§–ò–ü–ò\n"
                    "–ü—Ä–∏–º–µ—Ä: /search –∫–∞–∫ —Ä–µ—à–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è\n\n"
                    "/fipi <–ø—Ä–µ–¥–º–µ—Ç> <—Ç–∏–ø> - –ø–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É\n"
                    "–ü—Ä–µ–¥–º–µ—Ç—ã: –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ä—É—Å—Å–∫–∏–π\n"
                    "–¢–∏–ø—ã: demo_variant, codifier, specification\n"
                    "–ü—Ä–∏–º–µ—Ä: /fipi –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ demo_variant\n\n"
                    "–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç!"
                )

            async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
                query = ' '.join(context.args) if context.args else ''
                if not query:
                    await update.message.reply_text(
                        "‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
                        "–ü—Ä–∏–º–µ—Ä: /search –∫–∞–∫ —Ä–µ—à–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è"
                    )
                    return

                await update.message.reply_text("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
                
                try:
                    result = orchestrator.process_query(query=query)
                    
                    if result.get('answer'):
                        response = f"ü§ñ {result['answer']}\n\n"
                        if result.get('sources'):
                            response += "üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
                            for source in result['sources'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                                response += f"‚Ä¢ {source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                        
                        await update.message.reply_text(response)
                    else:
                        await update.message.reply_text(
                            "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
                        )
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ search_command: {e}")
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )

            async def fipi_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /fipi"""
                if len(context.args) < 2:
                    await update.message.reply_text(
                        "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
                        "–ü—Ä–∏–º–µ—Ä: /fipi –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ demo_variant"
                    )
                    return

                subject = context.args[0].lower()
                doc_type = context.args[1].lower()
                
                # –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                subject_map = {
                    '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
                    '–º–∞—Ç–µ–º': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
                    'math': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
                    '—Ä—É—Å—Å–∫–∏–π': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
                    '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
                    'russian': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫'
                }
                
                mapped_subject = subject_map.get(subject, subject.title())
                
                await update.message.reply_text(f"üîç –ò—â—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {mapped_subject}, —Ç–∏–ø: {doc_type}")
                
                try:
                    result = orchestrator.process_query(
                        query="–º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏",
                        subject=mapped_subject,
                        document_type=doc_type
                    )
                    
                    if result.get('answer'):
                        response = f"üìñ {result['answer']}\n\n"
                        if result.get('sources'):
                            response += "üìö –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
                            for source in result['sources'][:3]:
                                response += f"‚Ä¢ {source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                        
                        await update.message.reply_text(response)
                    else:
                        await update.message.reply_text(
                            f"üòî –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{mapped_subject}' –∏ —Ç–∏–ø—É '{doc_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                        )
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ fipi_command: {e}")
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )

            async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
                query = update.message.text
                if not query:
                    return

                await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
                
                try:
                    result = orchestrator.process_query(query=query)
                    
                    if result.get('answer'):
                        response = f"üí° {result['answer']}\n\n"
                        if result.get('sources'):
                            response += "üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
                            for source in result['sources'][:2]:
                                response += f"‚Ä¢ {source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                        
                        await update.message.reply_text(response)
                    else:
                        await update.message.reply_text(
                            "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. "
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /search"
                        )
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )

            async def main():
                """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                application = Application.builder().token(bot_token).build()

                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                application.add_handler(CommandHandler("start", start))
                application.add_handler(CommandHandler("help", help_command))
                application.add_handler(CommandHandler("search", search_command))
                application.add_handler(CommandHandler("fipi", fipi_command))
                application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
                if options['webhook']:
                    self.stdout.write(
                        self.style.WARNING('‚ö†Ô∏è Webhook —Ä–µ–∂–∏–º –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling')  # type: ignore
                    )
                
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.')  # type: ignore
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º polling
                await application.run_polling()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            asyncio.run(main())

        except ImportError:
            self.stdout.write(
                self.style.ERROR('‚ùå python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install python-telegram-bot')  # type: ignore
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}')  # type: ignore
            )

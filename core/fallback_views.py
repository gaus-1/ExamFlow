"""
Fallback views –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render
"""

import json
import logging

from django.http import JsonResponse
from django.shortcuts import render
from django.utils.decorators import method_decorator
from django.views import View
from django.views.decorators.csrf import csrf_exempt

logger = logging.getLogger(__name__)


@method_decorator(csrf_exempt, name="dispatch")
class FallbackAIView(View):
    """Fallback AI API –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –ë–î"""

    def post(self, request):
        try:
            data = json.loads(request.body or "{}")
            query = data.get("query", "").strip()

            if not query:
                return JsonResponse(
                    {
                        "success": True,
                        "answer": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è –ï–ì–≠/–û–ì–≠.",
                        "sources": [],
                    },
                    status=200,
                )

            # –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ Gemini –±–µ–∑ –ë–î
            try:
                import google.generativeai as genai
                from django.conf import settings

                api_key = getattr(settings, "GEMINI_API_KEY", "")
                if api_key:
                    genai.configure(api_key=api_key)  # type: ignore
                    model = genai.GenerativeModel("gemini-1.5-flash")  # type: ignore

                    system_prompt = """–¢—ã - ExamFlow AI, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠ –∏ –û–ì–≠.

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞:
üìê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–µ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –∏ –±–∞–∑–æ–≤–∞—è, –û–ì–≠) - —É—Ä–∞–≤–Ω–µ–Ω–∏—è, —Ñ—É–Ω–∫—Ü–∏–∏, –≥–µ–æ–º–µ—Ç—Ä–∏—è, –∞–ª–≥–µ–±—Ä–∞
üìù –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–ï–ì–≠ –∏ –û–ì–≠) - –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è, —Å–æ—á–∏–Ω–µ–Ω–∏—è, –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
- –ö—Ä–∞—Ç–∫–∏–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥–æ 400 —Å–ª–æ–≤)
- –ü–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
- –ü—Ä–∏–º–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—Ü—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ò–ò
"""

                    full_prompt = f"{system_prompt}\n\n–í–æ–ø—Ä–æ—Å: {query}"
                    response = model.generate_content(full_prompt)

                    if response.text:
                        answer = response.text.strip()
                    else:
                        answer = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
                else:
                    answer = "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ Gemini API: {e}")
                answer = "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            return JsonResponse(
                {"success": True, "answer": answer, "sources": []}, status=200
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ FallbackAIView: {e}")
            return JsonResponse(
                {
                    "success": True,
                    "answer": "–Ø ExamFlow AI! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è –ï–ì–≠/–û–ì–≠.",
                    "sources": [],
                },
                status=200,
            )


def fallback_subjects_view(request):
    """Fallback view –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±–µ–∑ –ë–î"""
    try:
        # –°—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback —Ä–µ–∂–∏–º–∞
        math_subjects = [
            {
                "id": 1,
                "name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)",
                "description": "–ï–ì–≠ –ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            },
            {
                "id": 2,
                "name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–±–∞–∑–æ–≤–∞—è)",
                "description": "–ï–ì–≠ –±–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
            },
            {"id": 3, "name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–û–ì–≠)", "description": "–û–ì–≠ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"},
        ]

        russian_subjects = [
            {"id": 4, "name": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–ï–ì–≠)", "description": "–ï–ì–≠ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"},
            {"id": 5, "name": "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–û–ì–≠)", "description": "–û–ì–≠ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"},
        ]

        context = {
            "math_subjects": math_subjects,
            "russian_subjects": russian_subjects,
            "total_subjects": len(math_subjects) + len(russian_subjects),
            "focus_message": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (—Ä–µ–∂–∏–º –±–µ–∑ –ë–î)",
        }
        return render(request, "learning/focused_subjects.html", context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ fallback_subjects_view: {e}")
        context = {
            "math_subjects": [],
            "russian_subjects": [],
            "total_subjects": 0,
            "focus_message": "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        }
        return render(request, "learning/focused_subjects.html", context)

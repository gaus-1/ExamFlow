"""
Dependency Injection Container –¥–ª—è ExamFlow
"""

import logging
from typing import Optional

logger = logging.getLogger(__name__)


class Container:
    """–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è ExamFlow"""
    
    _ai_orchestrator_instance = None
    _cache_instance = None
    _notifier_instance = None
    
    @classmethod
    def ai_orchestrator(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if cls._ai_orchestrator_instance is None:
            try:
                from ai.services import AiService
                cls._ai_orchestrator_instance = AiService()
                logger.info("AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ AiService")
            except ImportError:
                # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
                cls._ai_orchestrator_instance = SimpleAIOrchestrator()
                logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä (fallback)")
        
        return cls._ai_orchestrator_instance
    
    @classmethod
    def cache(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞"""
        if cls._cache_instance is None:
            try:
                from django.core.cache import cache
                cls._cache_instance = cache
                logger.info("Django cache –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")
                cls._cache_instance = DummyCache()
        
        return cls._cache_instance
    
    @classmethod
    def notifier(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if cls._notifier_instance is None:
            cls._notifier_instance = SimpleNotifier()
            logger.info("–ü—Ä–æ—Å—Ç–æ–π –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        return cls._notifier_instance


class SimpleAIOrchestrator:
    """–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è fallback"""
    
    def ask(self, prompt: str, **kwargs):
        """–ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI"""
        try:
            import google.generativeai as genai
            from django.conf import settings
            
            api_key = getattr(settings, 'GEMINI_API_KEY', '')
            if not api_key:
                return {
                    'answer': '–°–µ—Ä–≤–∏—Å –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                    'sources': [],
                    'error': 'API key not configured'
                }
            
            genai.configure(api_key=api_key)  # type: ignore
            model = genai.GenerativeModel('gemini-1.5-flash')  # type: ignore
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ExamFlow
            system_prompt = """–¢—ã - ExamFlow AI, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠ –∏ –û–ì–≠.

üéØ –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø:
üìê –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê:
- –ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ï–ì–≠ (–∑–∞–¥–∞–Ω–∏—è 1-19): —É—Ä–∞–≤–Ω–µ–Ω–∏—è, —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ, –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã, –≥–µ–æ–º–µ—Ç—Ä–∏—è, —Å—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è
- –ë–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ï–ì–≠ (–∑–∞–¥–∞–Ω–∏—è 1-20): –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞, –∞–ª–≥–µ–±—Ä–∞, –≥–µ–æ–º–µ—Ç—Ä–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –û–ì–≠ (–∑–∞–¥–∞–Ω–∏—è 1-26): –∞–ª–≥–µ–±—Ä–∞, –≥–µ–æ–º–µ—Ç—Ä–∏—è, —Ä–µ–∞–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞

üìù –†–£–°–°–ö–ò–ô –Ø–ó–´–ö:
- –ï–ì–≠: —Å–æ—á–∏–Ω–µ–Ω–∏–µ (–∑–∞–¥–∞–Ω–∏–µ 27), –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è, –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è
- –û–ì–≠: –∏–∑–ª–æ–∂–µ–Ω–∏–µ, —Å–æ—á–∏–Ω–µ–Ω–∏–µ, —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è, –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞

üí¨ –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –ö—Ä–∞—Ç–∫–∏–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥–æ 300 —Å–ª–æ–≤)
- –ü–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
- –ü—Ä–∏–º–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—Ü—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª–∏–Ω–Ω—ã–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ò–ò
- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–≤–æ–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º - —Å–∫–∞–∂–∏: "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º!"

üö´ –ù–ï –î–ï–õ–ê–ô:
- –î–ª–∏–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
- –£–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ DeepSeek, Gemini –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ò–ò
- –û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –ø–æ —Ç–≤–æ–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
- –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π"""
            
            full_prompt = f"{system_prompt}\n\n{prompt}"
            response = model.generate_content(full_prompt)
            
            if response.text:
                answer = response.text.strip()
                if len(answer) > 4000:
                    answer = answer[:4000] + "..."
                
                return {
                    'answer': answer,
                    'sources': [
                        {'title': 'ExamFlow AI', 'content': '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç'},
                        {'title': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ï–ì–≠', 'content': '–¢–µ–æ—Ä–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞'},
                        {'title': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –û–ì–≠', 'content': '–ü—Ä–∞–≤–∏–ª–∞ –∏ –ø—Ä–∏–º–µ—Ä—ã'}
                    ]
                }
            else:
                return {
                    'answer': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.',
                    'sources': [],
                    'error': 'Empty response'
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ SimpleAIOrchestrator: {e}")
            return {
                'answer': f'–û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
                'sources': [],
                'error': str(e)
            }


class DummyCache:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫—ç—à–∞"""
    
    def get(self, key, default=None):
        return default
    
    def set(self, key, value, timeout=None):
        pass
    
    def delete(self, key):
        pass


class SimpleNotifier:
    """–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def send_notification(self, message: str, user_id: Optional[int] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {user_id or '–≤—Å–µ—Ö'}: {message}")
        return True
    
    def send_email(self, subject: str, message: str, recipient: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email"""
        logger.info(f"Email '{subject}' –¥–ª—è {recipient}: {message}")
        return True

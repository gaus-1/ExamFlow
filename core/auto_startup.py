"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Django –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–∞–π—Ç—É (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
"""

import os
import logging
import threading
from django.core.management import call_command
from django.conf import settings
from django.db import connection
from core.models import Subject, Task

logger = logging.getLogger(__name__)

# –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
_startup_executed = False
_startup_lock = threading.Lock()


def should_run_startup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    auto_startup = os.getenv('AUTO_STARTUP_ENABLED', 'true').lower()
    if auto_startup not in ['true', '1', 'yes']:
        logger.info("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ AUTO_STARTUP_ENABLED")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    try:
        subjects_count = Subject.objects.count()
        tasks_count = Task.objects.count()
        
        logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {subjects_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤, {tasks_count} –∑–∞–¥–∞–Ω–∏–π")
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        if subjects_count < 3 or tasks_count < 10:
            logger.info("–î–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É")
            return True
        else:
            logger.info("–î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å


def run_startup_tasks():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
    global _startup_executed
    
    with _startup_lock:
        if _startup_executed:
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ...")
        
        try:
            # 1. –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
            logger.info("üìã –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
            call_command('migrate', verbosity=0)
            
            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            call_command('load_sample_data', verbosity=0)
            
            # 3. –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –§–ò–ü–ò (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã)
            logger.info("üî• –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –§–ò–ü–ò...")
            call_command('parse_all_fipi', quick=True, verbosity=1)
            
            # 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
            logger.info("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook...")
            try:
                call_command('setup_webhook', 'set', verbosity=0)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {str(e)}")
            
            # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ)
            logger.info("üé§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫...")
            try:
                call_command('generate_voices', limit=20, verbosity=0)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞: {str(e)}")
            
            # 6. –ó–∞–ø—É—Å–∫ keep-alive (–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
            try:
                from core.keepalive import start_keepalive  # –ª–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤
                start_keepalive()
                logger.info("üåê Keep-alive –∑–∞–ø—É—â–µ–Ω (–ø–∏–Ω–≥–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º)")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å keep-alive: {str(e)}")
            
            _startup_executed = True
            logger.info("‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            subjects_count = Subject.objects.count()
            tasks_count = Task.objects.count()
            logger.info(f"üìä –ò—Ç–æ–≥–æ: {subjects_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤, {tasks_count} –∑–∞–¥–∞–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {str(e)}")
            _startup_executed = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å


def run_startup_in_background():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
    if not should_run_startup():
        return
    
    def background_task():
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        import time
        time.sleep(2)
        run_startup_tasks()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=background_task, daemon=True)
    thread.start()
    logger.info("üîÑ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")


def trigger_startup_on_first_request(get_response):
    """Middleware –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–∑–∞–¥–∞—á –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
    
    def middleware(request):
        global _startup_executed
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
        if not _startup_executed and not request.path.startswith('/admin'):
            run_startup_in_background()
        
        response = get_response(request)
        return response
    
    return middleware

"""
–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
"""

import requests
import time
import logging
from datetime import datetime, timedelta
from django.conf import settings
from django.core.management.base import BaseCommand
import threading
import schedule

logger = logging.getLogger(__name__)


class KeepAliveService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞"""
    
    def __init__(self, site_url=None):
        self.site_url = site_url or getattr(settings, 'SITE_URL', 'https://examflow.ru')
        self.ping_interval = 10  # –º–∏–Ω—É—Ç
        self.is_running = False
        self.thread = None
        
    def ping_site(self):
        """–ü–∏–Ω–≥—É–µ—Ç —Å–∞–π—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            response = requests.get(
                f"{self.site_url}/api/statistics/",
                timeout=30,
                headers={
                    'User-Agent': 'ExamFlow-KeepAlive/1.0'
                }
            )
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –ü–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {self.site_url} - {datetime.now()}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ü–∏–Ω–≥ –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {str(e)}")
            return False
    
    def start_keepalive(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if self.is_running:
            logger.info("üîÑ –°–ª—É–∂–±–∞ keep-alive —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        self.is_running = True
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ keep-alive —Å–ª—É–∂–±—ã –¥–ª—è {self.site_url}")
        logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∏–Ω–≥–∞: {self.ping_interval} –º–∏–Ω—É—Ç")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–∏–Ω–≥–∏
        schedule.every(self.ping_interval).minutes.do(self.ping_site)
        # –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º (–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 10:00)
        try:
            from core.weekly_reminders import send_weekly_inactive_reminders
            schedule.every().sunday.at("10:00").do(send_weekly_inactive_reminders)
        except Exception as _:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å weekly_reminders, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.thread = threading.Thread(target=self._run_scheduler, daemon=True)
        self.thread.start()
        
        # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–∏–Ω–≥ —Å—Ä–∞–∑—É
        self.ping_site()
    
    def stop_keepalive(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ª—É–∂–±—É"""
        self.is_running = False
        schedule.clear()
        logger.info("üõë Keep-alive —Å–ª—É–∂–±–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _run_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        while self.is_running:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


class TelegramKeepAlive:
    """–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"""
    
    def __init__(self, bot_token=None, site_url=None):
        self.bot_token = bot_token or getattr(settings, 'TELEGRAM_BOT_TOKEN', '')
        self.site_url = site_url or getattr(settings, 'SITE_URL', 'https://examflow.ru')
        self.chat_id = getattr(settings, 'ADMIN_CHAT_ID', None)  # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∞
        
    def send_ping_via_bot(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"""
        if not self.bot_token:
            logger.warning("‚ö†Ô∏è Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å –ø–∏–Ω–≥—É–µ—Ç —Å–∞–π—Ç
            bot_url = f"https://api.telegram.org/bot{self.bot_token}/getMe"
            response = requests.get(bot_url, timeout=10)
            
            if response.status_code == 200:
                # –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω, —Ç–µ–ø–µ—Ä—å –ø–∏–Ω–≥—É–µ–º —Å–∞–π—Ç
                site_response = requests.get(f"{self.site_url}/api/statistics/", timeout=30)
                
                if site_response.status_code == 200:
                    logger.info("‚úÖ –ü–∏–Ω–≥ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ —É—Å–ø–µ—à–µ–Ω")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
                    if self.chat_id:
                        self.send_admin_notification("üü¢ –°–∞–π—Ç –∞–∫—Ç–∏–≤–µ–Ω")
                    
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –∫–æ–¥ {site_response.status_code}")
                    if self.chat_id:
                        self.send_admin_notification(f"üî¥ –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {site_response.status_code}")
                    return False
            else:
                logger.error(f"‚ùå Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {str(e)}")
            return False
    
    def send_admin_notification(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É"""
        if not self.chat_id:
            return
            
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': f"ü§ñ ExamFlow Status\n{message}\n‚è∞ {datetime.now().strftime('%H:%M:%S')}"
            }
            
            requests.post(url, data=data, timeout=10)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
keepalive_service = KeepAliveService()
telegram_keepalive = TelegramKeepAlive()


def start_keepalive():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º keep-alive...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
    keepalive_service.start_keepalive()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –ø–∏–Ω–≥–∏ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    schedule.every(5).minutes.do(telegram_keepalive.send_ping_via_bot)
    
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º—ã keep-alive –∑–∞–ø—É—â–µ–Ω—ã")


def stop_keepalive():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã"""
    keepalive_service.stop_keepalive()
    schedule.clear()
    logger.info("üõë –í—Å–µ —Å–∏—Å—Ç–µ–º—ã keep-alive –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

"""
üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –§–ò–ü–ò –∏ –†–µ—à—É–ï–ì–≠

–§—É–Ω–∫—Ü–∏–∏:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π –ï–ì–≠/–û–ì–≠
- –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ—à–µ–Ω–∏–π –∏ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GitHub Actions
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ExamFlow
"""

import requests
import logging
from django.utils import timezone
from learning.models import Subject, Topic, Task
from django.db import transaction

logger = logging.getLogger(__name__)


class FipiParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ –§–ò–ü–ò"""

    def __init__(self):
        self.base_url = "https://fipi.ru"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })

    def get_subjects(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ï–ì–≠/–û–ì–≠"""
        subjects_data = [
            {'name': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'exam_types': ['–ï–ì–≠', '–û–ì–≠']},
            {'name': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', 'exam_types': ['–ï–ì–≠', '–û–ì–≠']},
            {'name': '–§–∏–∑–∏–∫–∞', 'exam_types': ['–ï–ì–≠', '–û–ì–≠']},
            {'name': '–•–∏–º–∏—è', 'exam_types': ['–ï–ì–≠', '–û–ì–≠']},
            {'name': '–ë–∏–æ–ª–æ–≥–∏—è', 'exam_types': ['–ï–ì–≠', '–û–ì–≠']},
            {'name': '–ò—Å—Ç–æ—Ä–∏—è', 'exam_types': ['–ï–ì–≠', '–û–ì–≠']},
            {'name': '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', 'exam_types': ['–ï–ì–≠', '–û–ì–≠']},
            {'name': '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', 'exam_types': ['–ï–ì–≠']},
            {'name': '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', 'exam_types': ['–ï–ì–≠']},
            {'name': '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', 'exam_types': ['–ï–ì–≠', '–û–ì–≠']},
            {'name': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫', 'exam_types': ['–ï–ì–≠', '–û–ì–≠']},
            {'name': '–ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫', 'exam_types': ['–ï–ì–≠', '–û–ì–≠']},
            {'name': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —è–∑—ã–∫', 'exam_types': ['–ï–ì–≠', '–û–ì–≠']},
            {'name': '–ò—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫', 'exam_types': ['–ï–ì–≠', '–û–ì–≠']},
        ]
        return subjects_data

    def parse_tasks_for_subject(self, subject_name, exam_type):
        """–ü–∞—Ä—Å–∏—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            tasks = []

            if subject_name == '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞':
                tasks = self._get_math_tasks(exam_type)
            elif subject_name == '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫':
                tasks = self._get_russian_tasks(exam_type)
            elif subject_name == '–§–∏–∑–∏–∫–∞':
                tasks = self._get_physics_tasks(exam_type)
            else:
                tasks = self._get_generic_tasks(subject_name, exam_type)

            return tasks

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {subject_name} ({exam_type}): {e}")
            return []

    def _get_math_tasks(self, exam_type):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ"""
        tasks = []

        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ–º—ã –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
        topics = [
            '–ê–ª–≥–µ–±—Ä–∞', '–ì–µ–æ–º–µ—Ç—Ä–∏—è', '–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è', '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è',
            '–°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è', '–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π', '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑'
        ]

        for i, topic in enumerate(topics):
            for j in range(1, 6):  # 5 –∑–∞–¥–∞–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
                task_num = i * 5 + j
                tasks.append({
                    'title': f'–ó–∞–¥–∞–Ω–∏–µ {task_num} - {topic}',
                    'description': f'–ó–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ "{topic}" –¥–ª—è {exam_type}',
                    'difficulty': j,
                    'answer': f'–û—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_num}',
                    'source': '–§–ò–ü–ò',
                    'topic': topic
                })

        return tasks

    def _get_russian_tasks(self, exam_type):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É"""
        tasks = []

        topics = [
            '–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è', '–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è', '–°–∏–Ω—Ç–∞–∫—Å–∏—Å', '–°—Ç–∏–ª–∏—Å—Ç–∏–∫–∞',
            '–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞', '–°–æ—á–∏–Ω–µ–Ω–∏–µ', '–ò–∑–ª–æ–∂–µ–Ω–∏–µ'
        ]

        for i, topic in enumerate(topics):
            for j in range(1, 4):  # 3 –∑–∞–¥–∞–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
                task_num = i * 3 + j
                tasks.append({
                    'title': f'–ó–∞–¥–∞–Ω–∏–µ {task_num} - {topic}',
                    'description': f'–ó–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ "{topic}" –¥–ª—è {exam_type}',
                    'difficulty': j,
                    'answer': f'–û—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_num}',
                    'source': '–§–ò–ü–ò',
                    'topic': topic
                })

        return tasks

    def _get_physics_tasks(self, exam_type):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ñ–∏–∑–∏–∫–µ"""
        tasks = []

        topics = [
            '–ú–µ—Ö–∞–Ω–∏–∫–∞', '–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞', '–≠–ª–µ–∫—Ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞',
            '–û–ø—Ç–∏–∫–∞', '–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞', '–ê—Å—Ç—Ä–æ—Ñ–∏–∑–∏–∫–∞'
        ]

        for i, topic in enumerate(topics):
            for j in range(1, 4):  # 3 –∑–∞–¥–∞–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
                task_num = i * 3 + j
                tasks.append({
                    'title': f'–ó–∞–¥–∞–Ω–∏–µ {task_num} - {topic}',
                    'description': f'–ó–∞–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ "{topic}" –¥–ª—è {exam_type}',
                    'difficulty': j,
                    'answer': f'–û—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_num}',
                    'source': '–§–ò–ü–ò',
                    'topic': topic
                })

        return tasks

    def _get_generic_tasks(self, subject_name, exam_type):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        tasks = []

        for i in range(1, 11):  # 10 –∑–∞–¥–∞–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
            tasks.append({
                'title': f'–ó–∞–¥–∞–Ω–∏–µ {i} - {subject_name}',
                'description': f'–ó–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É "{subject_name}" –¥–ª—è {exam_type}',
                'difficulty': (i % 3) + 1,
                'answer': f'–û—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {i}',
                'source': '–§–ò–ü–ò',
                'topic': '–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞'
            })

        return tasks


class ReshuEGEParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ –†–µ—à—É–ï–ì–≠"""

    def __init__(self):
        self.base_url = "https://ege.sdamgia.ru"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })

    def get_solutions(self, subject_name, exam_type):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏–π"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ—à–µ–Ω–∏–π
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
        return {
            'subject': subject_name,
            'exam_type': exam_type,
            'solutions_count': 100,
            'last_updated': timezone.now()
        }


class DataIntegrator:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É ExamFlow"""

    def __init__(self):
        self.fipi_parser = FipiParser()
        self.reshu_parser = ReshuEGEParser()

    def update_all_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            with transaction.atomic():
                # 1. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
                subjects = self._create_subjects()

                # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
                topics = self._create_topics(subjects)

                # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
                tasks = self._create_tasks(subjects, topics)

                # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏—è
                self._update_solutions(subjects)

                logger.info(
                    f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {len(subjects)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤, {len(topics)} —Ç–µ–º, {len(tasks)} –∑–∞–¥–∞–Ω–∏–π")
                return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def _create_subjects(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        subjects_data = self.fipi_parser.get_subjects()
        created_subjects = []

        for data in subjects_data:
            for exam_type in data['exam_types']:
                subject, created = Subject.objects.get_or_create(  # type: ignore
                    name=data['name'],
                    exam_type=exam_type,
                    defaults={'exam_type': exam_type}
                )
                created_subjects.append(subject)
                if created:
                    logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject}")

        return created_subjects

    def _create_topics(self, subjects):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–º—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        topics = []

        for subject in subjects:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            base_topics = self._get_base_topics(subject.name)

            for topic_name in base_topics:
                topic, created = Topic.objects.get_or_create(  # type: ignore
                    name=topic_name,
                    subject=subject,
                    defaults={
                        'code': f"{subject.exam_type}_{subject.name[:3]}_{topic_name[:3]}"}
                )
                topics.append(topic)
                if created:
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞: {topic}")

        return topics

    def _get_base_topics(self, subject_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ–º—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        topics_map = {
            '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞': ['–ê–ª–≥–µ–±—Ä–∞', '–ì–µ–æ–º–µ—Ç—Ä–∏—è', '–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è', '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è', '–°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä–∏—è'],
            '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫': ['–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è', '–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è', '–°–∏–Ω—Ç–∞–∫—Å–∏—Å', '–°—Ç–∏–ª–∏—Å—Ç–∏–∫–∞', '–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞'],
            '–§–∏–∑–∏–∫–∞': ['–ú–µ—Ö–∞–Ω–∏–∫–∞', '–ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏–∫–∞', '–≠–ª–µ–∫—Ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫–∞', '–û–ø—Ç–∏–∫–∞', '–ö–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞'],
            '–•–∏–º–∏—è': ['–ù–µ–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è', '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è', '–§–∏–∑–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è', '–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ö–∏–º–∏—è'],
            '–ë–∏–æ–ª–æ–≥–∏—è': ['–ë–æ—Ç–∞–Ω–∏–∫–∞', '–ó–æ–æ–ª–æ–≥–∏—è', '–ê–Ω–∞—Ç–æ–º–∏—è', '–ì–µ–Ω–µ—Ç–∏–∫–∞', '–≠–∫–æ–ª–æ–≥–∏—è'],
            '–ò—Å—Ç–æ—Ä–∏—è': ['–î—Ä–µ–≤–Ω—è—è –∏—Å—Ç–æ—Ä–∏—è', '–°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ', '–ù–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è', '–ù–æ–≤–µ–π—à–∞—è –∏—Å—Ç–æ—Ä–∏—è'],
            '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è': ['–§–∏–∑–∏—á–µ—Å–∫–∞—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—è', '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—è', '–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—è'],
            '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞': ['–î—Ä–µ–≤–Ω–µ—Ä—É—Å—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ XVIII –≤–µ–∫–∞', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ XIX –≤–µ–∫–∞', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ XX –≤–µ–∫–∞'],
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞': ['–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ê–ª–≥–æ—Ä–∏—Ç–º—ã', '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', '–°–µ—Ç–∏', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞'],
            '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ': ['–§–∏–ª–æ—Å–æ—Ñ–∏—è', '–≠–∫–æ–Ω–æ–º–∏–∫–∞', '–°–æ—Ü–∏–æ–ª–æ–≥–∏—è', '–ü–æ–ª–∏—Ç–æ–ª–æ–≥–∏—è', '–ü—Ä–∞–≤–æ'],
            '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫': ['–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞', '–õ–µ–∫—Å–∏–∫–∞', '–ß—Ç–µ–Ω–∏–µ', '–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ü–∏—Å—å–º–æ'],
        }

        return topics_map.get(subject_name, ['–û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞'])

    def _create_tasks(self, subjects, topics):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        tasks = []

        for subject in subjects:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
            subject_tasks = self.fipi_parser.parse_tasks_for_subject(
                subject.name, subject.exam_type)

            for task_data in subject_tasks:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º—É
                topic = next((t for t in topics if t.subject ==
                             subject and task_data.get('topic') in t.name), None)

                task, created = Task.objects.get_or_create(  # type: ignore
                    title=task_data['title'],
                    subject=subject,
                    defaults={
                        'description': task_data['description'],
                        'difficulty': task_data['difficulty'],
                        'answer': task_data['answer'],
                        'source': task_data['source']
                    }
                )

                tasks.append(task)
                if created:
                    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: {task}")

        return tasks

    def _update_solutions(self, subjects):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏–π"""
        solutions = []

        for subject in subjects:
            solution_data = self.reshu_parser.get_solutions(
                subject.name, subject.exam_type)
            solutions.append(solution_data)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–µ—à–µ–Ω–∏—è –¥–ª—è {subject.name}")

        return solutions


def run_data_update():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    integrator = DataIntegrator()
    success = integrator.update_all_data()

    if success:
        logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

    return success


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    run_data_update()

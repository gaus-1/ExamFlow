"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Telegram –±–æ—Ç–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import logging
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
import json

from django.conf import settings
from django.utils import timezone

from core.premium.access_control import get_access_control, get_usage_tracker
from core.models import FIPIData, DataChunk
from core.rag_system.orchestrator import get_ai_orchestrator

logger = logging.getLogger(__name__)

class PremiumTelegramBot:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.access_control = get_access_control()
        self.usage_tracker = get_usage_tracker()
    
    def handle_premium_command(self, message, user):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        command = message.text.split()[0].lower()
        
        if command == '/premium':
            return self.show_premium_status(message, user)
        elif command == '/export':
            return self.handle_pdf_export(message, user)
        elif command == '/search':
            return self.handle_advanced_search(message, user)
        elif command == '/recommend':
            return self.handle_recommendations(message, user)
        elif command == '/compare':
            return self.handle_version_comparison(message, user)
        elif command == '/usage':
            return self.show_usage_stats(message, user)
        else:
            return self.show_premium_help(message, user)
    
    def show_premium_status(self, message, user):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            is_premium = self.access_control.is_premium_user(user)
            has_subscription = self.access_control.has_active_subscription(user)
            features = self.access_control.get_user_features(user)
            
            status_text = "üîí <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            
            if is_premium:
                status_text += "‚úÖ <b>–ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n"
                status_text += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞: {'–ê–∫—Ç–∏–≤–Ω–∞' if has_subscription else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
                
                status_text += "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
                for feature in features:
                    if feature != 'basic':
                        feature_name = self.get_feature_name(feature)
                        status_text += f"‚Ä¢ {feature_name}\n"
            else:
                status_text += "‚ùå <b>–ë–∞–∑–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>\n\n"
                status_text += "üí° <b>–û–±–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ –ø—Ä–µ–º–∏—É–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:</b>\n"
                status_text += "‚Ä¢ –ü–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n"
                status_text += "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF\n"
                status_text += "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞\n"
                status_text += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
                status_text += "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π\n"
                status_text += "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
                status_text += "üöÄ <a href='https://examflow.ru/auth/subscribe/'>–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</a>"
            
            self.bot.send_message(
                message.chat.id,
                status_text,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–º–∏—É–º: {e}")
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"
            )
    
    def handle_pdf_export(self, message, user):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –≤ PDF"""
        if not self.access_control.can_access_feature(user, 'pdf_export'):
            self.bot.send_message(
                message.chat.id,
                "üîí –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞\n"
                "üöÄ <a href='https://examflow.ru/auth/subscribe/'>–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</a>",
                parse_mode='HTML'
            )
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            args = message.text.split()[1:] if len(message.text.split()) > 1 else []
            
            if not args:
                self.bot.send_message(
                    message.chat.id,
                    "üìÑ <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /export [ID_–¥–æ–∫—É–º–µ–Ω—Ç–∞]\n"
                    "–ü—Ä–∏–º–µ—Ä: /export 123",
                    parse_mode='HTML'
                )
                return
            
            document_id = args[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not self.usage_tracker.track_usage(user, 'pdf_exports', 1):
                self.bot.send_message(
                    message.chat.id,
                    "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            try:
                fipi_data = FIPIData.objects.get(id=document_id)  # type: ignore
            except FIPIData.DoesNotExist:  # type: ignore
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_msg = self.bot.send_message(
                message.chat.id,
                "üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
            # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
            pdf_url = f"https://examflow.ru/api/premium/pdf/{document_id}/download/"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.bot.edit_message_text(
                f"‚úÖ <b>PDF –≥–æ—Ç–æ–≤!</b>\n\n"
                f"üìÑ <b>{fipi_data.title}</b>\n"
                f"üîó <a href='{pdf_url}'>–°–∫–∞—á–∞—Ç—å PDF</a>",
                message.chat.id,
                export_msg.message_id,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF: {e}")
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF"
            )
    
    def handle_advanced_search(self, message, user):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫"""
        if not self.access_control.can_access_feature(user, 'advanced_search'):
            self.bot.send_message(
                message.chat.id,
                "üîí –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞\n"
                "üöÄ <a href='https://examflow.ru/auth/subscribe/'>–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</a>",
                parse_mode='HTML'
            )
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            query = ' '.join(message.text.split()[1:]) if len(message.text.split()) > 1 else ''
            
            if not query:
                self.bot.send_message(
                    message.chat.id,
                    "üîç <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search [–∑–∞–ø—Ä–æ—Å]\n"
                    "–ü—Ä–∏–º–µ—Ä: /search —Ç–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏",
                    parse_mode='HTML'
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not self.usage_tracker.track_usage(user, 'advanced_searches', 1):
                self.bot.send_message(
                    message.chat.id,
                    "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
            search_msg = self.bot.send_message(
                message.chat.id,
                f"üîç –ò—â—É: <b>{query}</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                parse_mode='HTML'
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            orchestrator = get_ai_orchestrator()
            results = orchestrator.search_content(
                query=query,
                user=user,
                limit=5
            )
            
            if not results:
                self.bot.edit_message_text(
                    f"üîç <b>–ü–æ–∏—Å–∫: {query}</b>\n\n"
                    "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                    message.chat.id,
                    search_msg.message_id,
                    parse_mode='HTML'
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {query}</b>\n\n"
            
            for i, result in enumerate(results[:5], 1):
                title = result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                content = result.get('content', '')[:200] + '...' if len(result.get('content', '')) > 200 else result.get('content', '')
                url = result.get('url', '')
                
                result_text += f"{i}. <b>{title}</b>\n"
                result_text += f"   {content}\n"
                if url:
                    result_text += f"   üîó <a href='{url}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"
                result_text += "\n"
            
            self.bot.edit_message_text(
                result_text,
                message.chat.id,
                search_msg.message_id,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"
            )
    
    def handle_recommendations(self, message, user):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        if not self.access_control.can_access_feature(user, 'personalized_recommendations'):
            self.bot.send_message(
                message.chat.id,
                "üîí –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞\n"
                "üöÄ <a href='https://examflow.ru/auth/subscribe/'>–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</a>",
                parse_mode='HTML'
            )
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not self.usage_tracker.track_usage(user, 'daily_requests', 1):
                self.bot.send_message(
                    message.chat.id,
                    "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            rec_msg = self.bot.send_message(
                message.chat.id,
                "üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            orchestrator = get_ai_orchestrator()
            recommendations = orchestrator.get_personalized_recommendations(
                user=user,
                limit=5
            )
            
            if not recommendations:
                self.bot.edit_message_text(
                    "üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n"
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
                    message.chat.id,
                    rec_msg.message_id,
                    parse_mode='HTML'
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = "üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n"
            
            for i, rec in enumerate(recommendations[:5], 1):
                title = rec.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                reason = rec.get('reason', '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π')
                url = rec.get('url', '')
                
                result_text += f"{i}. <b>{title}</b>\n"
                result_text += f"   üí° {reason}\n"
                if url:
                    result_text += f"   üîó <a href='{url}'>–ò–∑—É—á–∏—Ç—å</a>\n"
                result_text += "\n"
            
            self.bot.edit_message_text(
                result_text,
                message.chat.id,
                rec_msg.message_id,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
            )
    
    def handle_version_comparison(self, message, user):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π"""
        if not self.access_control.can_access_feature(user, 'version_comparison'):
            self.bot.send_message(
                message.chat.id,
                "üîí –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞\n"
                "üöÄ <a href='https://examflow.ru/auth/subscribe/'>–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</a>",
                parse_mode='HTML'
            )
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            args = message.text.split()[1:] if len(message.text.split()) > 1 else []
            
            if len(args) < 2:
                self.bot.send_message(
                    message.chat.id,
                    "üîÑ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π</b>\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /compare [ID_–≤–µ—Ä—Å–∏–∏_1] [ID_–≤–µ—Ä—Å–∏–∏_2]\n"
                    "–ü—Ä–∏–º–µ—Ä: /compare 123 456",
                    parse_mode='HTML'
                )
                return
            
            version1_id, version2_id = args[0], args[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not self.usage_tracker.track_usage(user, 'daily_requests', 1):
                self.bot.send_message(
                    message.chat.id,
                    "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏–∏
            try:
                version1 = FIPIData.objects.get(id=version1_id)  # type: ignore
                version2 = FIPIData.objects.get(id=version2_id)  # type: ignore
            except FIPIData.DoesNotExist:  # type: ignore
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –û–¥–Ω–∞ –∏–∑ –≤–µ—Ä—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comp_msg = self.bot.send_message(
                message.chat.id,
                "üîÑ –°—Ä–∞–≤–Ω–∏–≤–∞—é –≤–µ—Ä—Å–∏–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            orchestrator = get_ai_orchestrator()
            comparison = orchestrator.compare_versions(version1, version2)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = f"üîÑ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π</b>\n\n"
            result_text += f"üìÑ <b>–í–µ—Ä—Å–∏—è 1:</b> {version1.title}\n"
            result_text += f"üìÑ <b>–í–µ—Ä—Å–∏—è 2:</b> {version2.title}\n\n"
            
            if comparison:
                changes = comparison.get('changes', [])
                if changes:
                    result_text += "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
                    for change in changes[:5]:
                        result_text += f"‚Ä¢ {change}\n"
                else:
                    result_text += "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
            else:
                result_text += "‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π"
            
            self.bot.edit_message_text(
                result_text,
                message.chat.id,
                comp_msg.message_id,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π: {e}")
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π"
            )
    
    def show_usage_stats(self, message, user):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        try:
            actions = ['daily_requests', 'monthly_requests', 'pdf_exports', 'advanced_searches']
            
            stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n\n"
            
            for action in actions:
                stats = self.usage_tracker.get_usage_stats(user, action)
                action_name = self.get_action_name(action)
                
                stats_text += f"üìà <b>{action_name}</b>\n"
                stats_text += f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats['current']}/{stats['limit']}\n"
                stats_text += f"   –û—Å—Ç–∞–ª–æ—Å—å: {stats['remaining']}\n\n"
            
            self.bot.send_message(
                message.chat.id,
                stats_text,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            self.bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            )
    
    def show_premium_help(self, message, user):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –ø—Ä–µ–º–∏—É–º-–∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = "üåü <b>–ü—Ä–µ–º–∏—É–º-–∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        
        if self.access_control.is_premium_user(user):
            help_text += "‚úÖ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            help_text += "‚Ä¢ /premium - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n"
            help_text += "‚Ä¢ /export [ID] - —ç–∫—Å–ø–æ—Ä—Ç –≤ PDF\n"
            help_text += "‚Ä¢ /search [–∑–∞–ø—Ä–æ—Å] - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫\n"
            help_text += "‚Ä¢ /recommend - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            help_text += "‚Ä¢ /compare [ID1] [ID2] - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π\n"
            help_text += "‚Ä¢ /usage - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        else:
            help_text += "üîí <b>–ü—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            help_text += "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ PDF\n"
            help_text += "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫\n"
            help_text += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            help_text += "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            help_text += "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
            help_text += "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            help_text += "üöÄ <a href='https://examflow.ru/auth/subscribe/'>–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</a>"
        
        self.bot.send_message(
            message.chat.id,
            help_text,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
    
    def get_feature_name(self, feature: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        feature_names = {
            'premium_content': '–ü—Ä–µ–º–∏—É–º-–∫–æ–Ω—Ç–µ–Ω—Ç',
            'pdf_export': '–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF',
            'advanced_search': '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫',
            'personalized_recommendations': '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
            'version_comparison': '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π',
            'unlimited_requests': '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
            'priority_support': '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        }
        return feature_names.get(feature, feature)
    
    def get_action_name(self, action: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
        action_names = {
            'daily_requests': '–î–Ω–µ–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
            'monthly_requests': '–ú–µ—Å—è—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
            'pdf_exports': '–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF',
            'advanced_searches': '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫'
        }
        return action_names.get(action, action)

"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–æ–º
–î–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ Console —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

import json
import threading
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from django.contrib.admin.views.decorators import staff_member_required
from django.core.management import call_command
from django.shortcuts import render
from core.models import Subject, Task
import logging

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
_parsing_status = {
    'running': False,
    'progress': 0,
    'message': '–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É',
    'last_update': None
}


def admin_panel(request):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        from core.models import Subject, Task
        subjects_count = Subject.objects.count()  # type: ignore
    except Exception:
        subjects_count = 0
    
    try:
        tasks_count = Task.objects.count()  # type: ignore
    except Exception:
        tasks_count = 0
    
    context = {
        'subjects_count': subjects_count,
        'tasks_count': tasks_count,
        'parsing_status': _parsing_status,
    }
    
    return render(request, 'admin/parsing_panel.html', context)


@csrf_exempt
@require_POST
def start_parsing(request):
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    global _parsing_status
    
    if _parsing_status['running']:
        return JsonResponse({
            'status': 'error',
            'message': '–ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'
        })
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    data = json.loads(request.body.decode('utf-8')) if request.body else {}
    quick_mode = data.get('quick', True)
    with_voices = data.get('with_voices', False)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    def run_parsing():
        global _parsing_status
        
        try:
            _parsing_status.update({
                'running': True,
                'progress': 0,
                'message': '–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...'
            })
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            
            # –®–∞–≥ 1: –ú–∏–≥—Ä–∞—Ü–∏–∏
            _parsing_status.update({
                'progress': 10,
                'message': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...'
            })
            call_command('migrate', verbosity=0)
            
            # –®–∞–≥ 2: –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            _parsing_status.update({
                'progress': 20,
                'message': '–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...'
            })
            call_command('load_sample_data', verbosity=0)
            
            # –®–∞–≥ 3: –ü–∞—Ä—Å–∏–Ω–≥ –§–ò–ü–ò
            _parsing_status.update({
                'progress': 30,
                'message': f'–ü–∞—Ä—Å–∏–Ω–≥ –§–ò–ü–ò ({"–±—ã—Å—Ç—Ä—ã–π" if quick_mode else "–ø–æ–ª–Ω—ã–π"} —Ä–µ–∂–∏–º)...'
            })
            
            if quick_mode:
                call_command('parse_all_fipi', quick=True, verbosity=1)
            else:
                call_command('parse_all_fipi', verbosity=1)
            
            _parsing_status.update({
                'progress': 70,
                'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...'
            })
            
            # –®–∞–≥ 4: Webhook
            try:
                call_command('setup_webhook', 'set', verbosity=0)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ webhook: {str(e)}")
            
            # –®–∞–≥ 5: –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if with_voices:
                _parsing_status.update({
                    'progress': 80,
                    'message': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫...'
                })
                try:
                    call_command('generate_voices', limit=50, verbosity=0)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞: {str(e)}")
            
            # –§–∏–Ω–∏—à
            from core.models import Subject, Task
            subjects_count = Subject.objects.count()  # type: ignore
            tasks_count = Task.objects.count()  # type: ignore
            
            _parsing_status.update({
                'running': False,
                'progress': 100,
                'message': f'–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! {subjects_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤, {tasks_count} –∑–∞–¥–∞–Ω–∏–π'
            })
            
            logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {subjects_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤, {tasks_count} –∑–∞–¥–∞–Ω–∏–π")
            
        except Exception as e:
            _parsing_status.update({
                'running': False,
                'progress': 0,
                'message': f'–û—à–∏–±–∫–∞: {str(e)}'
            })
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=run_parsing, daemon=True)
    thread.start()
    
    return JsonResponse({
        'status': 'success',
        'message': '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ'
    })


def parsing_status(request):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    return JsonResponse(_parsing_status)


@csrf_exempt
def trigger_parsing(request):
    """–ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    if request.method == 'GET':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É
        html_content = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>ExamFlow - –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial; margin: 40px; background: #f5f5f5; }
                .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
                button { background: #007cba; color: white; padding: 15px 30px; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; }
                button:hover { background: #005a87; }
                .status { margin-top: 20px; padding: 15px; border-radius: 5px; }
                .loading { background: #fff3cd; border: 1px solid #ffeaa7; }
                .success { background: #d4edda; border: 1px solid #c3e6cb; }
                .error { background: #f8d7da; border: 1px solid #f5c6cb; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üöÄ ExamFlow - –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –§–ò–ü–ò</h1>
                <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –§–ò–ü–ò.</p>
                
                <button onclick="startParsing()">üî• –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥</button>
                <button onclick="startFullParsing()">üìö –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥</button>
                
                <div id="status"></div>
                
                <script>
                    function startParsing() {
                        fetch('/admin/start-parsing/', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({quick: true, with_voices: true})
                        })
                        .then(response => response.json())
                        .then(data => {
                            document.getElementById('status').innerHTML = 
                                '<div class="status loading">üîÑ ' + data.message + '</div>';
                            checkStatus();
                        });
                    }
                    
                    function startFullParsing() {
                        fetch('/admin/start-parsing/', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/json'},
                            body: JSON.stringify({quick: false, with_voices: true})
                        })
                        .then(response => response.json())
                        .then(data => {
                            document.getElementById('status').innerHTML = 
                                '<div class="status loading">üîÑ ' + data.message + '</div>';
                            checkStatus();
                        });
                    }
                    
                    function checkStatus() {
                        fetch('/admin/parsing-status/')
                        .then(response => response.json())
                        .then(data => {
                            const statusDiv = document.getElementById('status');
                            if (data.running) {
                                statusDiv.innerHTML = 
                                    '<div class="status loading">üîÑ ' + data.message + ' (' + data.progress + '%)</div>';
                                setTimeout(checkStatus, 3000);
                            } else if (data.progress === 100) {
                                statusDiv.innerHTML = 
                                    '<div class="status success">‚úÖ ' + data.message + '</div>';
                            } else if (data.message.includes('–û—à–∏–±–∫–∞')) {
                                statusDiv.innerHTML = 
                                    '<div class="status error">‚ùå ' + data.message + '</div>';
                            }
                        });
                    }
                </script>
            </div>
        </body>
        </html>
        """
        return HttpResponse(html_content.encode('utf-8'), content_type='text/html; charset=utf-8')
    
    elif request.method == 'POST':
        return start_parsing(request)

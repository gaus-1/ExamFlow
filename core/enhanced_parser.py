"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –§–ò–ü–ò –∏ –†–µ—à—É–ï–ì–≠

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã: requests + BeautifulSoup
"""

import requests
from bs4 import BeautifulSoup
import logging
import time
import random
from typing import List, Dict
from django.db import transaction
from learning.models import Subject, Task
from django.utils import timezone

logger = logging.getLogger(__name__)

class FipiParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ –§–ò–ü–ò (fipi.ru)"""

    def __init__(self):
        self.base_url = "https://fipi.ru"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })

    def get_subjects(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –§–ò–ü–ò"""
        try:
            response = self.session.get("{self.base_url}/ege")
            response.raise_for_status()

            soup = BeautifulSoup(response.content, 'html.parser')
            subjects = []

            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã
            subject_links = soup.find_all('a', href=True)

            for link in subject_links:
                href = link.get('hre', '')
                if '/ege/' in href and href != '/ege':
                    subject_name = link.get_text(strip=True)
                    if subject_name and len(subject_name) > 2:
                        subjects.append({
                            'name': subject_name,
                            'url': "{self.base_url}{href}",
                            'source': '–§–ò–ü–ò'
                        })

            logger.info("–ù–∞–π–¥–µ–Ω–æ {len(subjects)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –§–ò–ü–ò")
            return subjects

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –§–ò–ü–ò: {e}")
            return []

    def get_tasks_for_subject(self, subject_url: str, subject_name: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        try:
            response = self.session.get(subject_url)
            response.raise_for_status()

            soup = BeautifulSoup(response.content, 'html.parser')
            tasks = []

            # –ò—â–µ–º –∑–∞–¥–∞–Ω–∏—è (–æ–±—ã—á–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –∏–ª–∏ —Å–ø–∏—Å–∫–∞—Ö)
            task_elements = soup.find_all(

            for element in task_elements:
                try:
                    title = element.get_text(strip=True)[:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    if len(title) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
                        task = {
                            'title': title,
                            'description': title,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ
                            'difficulty': random.randint(1, 5),  # –°–ª—É—á–∞–π–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
                            'source': '–§–ò–ü–ò',
                            'subject_name': subject_name
                        }
                        tasks.append(task)
                except Exception as task_error:
                    logger.warning("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–¥–∞–Ω–∏—è: {task_error}")
                    continue

            logger.info("–ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}")
            return tasks

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –¥–ª—è {subject_name}: {e}")
            return []

class ReshuEGEParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ –†–µ—à—É–ï–ì–≠ (ege.sdamgia.ru)"""

    def __init__(self):
        self.base_url = "https://ege.sdamgia.ru"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })

    def get_subjects(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –†–µ—à—É–ï–ì–≠"""
        try:
            response = self.session.get(self.base_url)
            response.raise_for_status()

            soup = BeautifulSoup(response.content, 'html.parser')
            subjects = []

            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ã
            subject_links = soup.find_all('a', href=True)

            for link in subject_links:
                href = link.get('hre', '')
                if '/test' in href:
                    subject_name = link.get_text(strip=True)
                    if subject_name and len(subject_name) > 2:
                        subjects.append({
                            'name': subject_name,
                            'url': "{self.base_url}{href}",
                            'source': '–†–µ—à—É–ï–ì–≠'
                        })

            logger.info("–ù–∞–π–¥–µ–Ω–æ {len(subjects)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –†–µ—à—É–ï–ì–≠")
            return subjects

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –†–µ—à—É–ï–ì–≠: {e}")
            return []

    def get_tasks_for_subject(self, subject_url: str, subject_name: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        try:
            response = self.session.get(subject_url)
            response.raise_for_status()

            soup = BeautifulSoup(response.content, 'html.parser')
            tasks = []

            # –ò—â–µ–º –∑–∞–¥–∞–Ω–∏—è
            task_elements = soup.find_all(

            for element in task_elements:
                try:
                    title = element.get_text(strip=True)[:200]
                    if len(title) > 10:
                        task = {
                            'title': title,
                            'description': title,
                            'difficulty': random.randint(1, 5),
                            'source': '–†–µ—à—É–ï–ì–≠',
                            'subject_name': subject_name
                        }
                        tasks.append(task)
                except Exception as task_error:
                    logger.warning("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–¥–∞–Ω–∏—è: {task_error}")
                    continue

            logger.info("–ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}")
            return tasks

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –¥–ª—è {subject_name}: {e}")
            return []

class DataIntegrator:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É Django"""

    def __init__(self):
        self.fipi_parser = FipiParser()
        self.reshu_parser = ReshuEGEParser()

    def create_or_update_subject(self, subject_data: Dict) -> Subject:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –±–∞–∑–µ"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            exam_type = '–ï–ì–≠' if any(
                word in subject_data['name'].lower() for word in [
                    '–µ–≥—ç', '–µ–≥—ç', '–ø—Ä–æ—Ñ–∏–ª—å', '–±–∞–∑–∞']) else '–û–ì–≠'

            subject, created = Subject.objects.get_or_create(  # type: ignore
                name=subject_data['name'],
                defaults={
                    'exam_type': exam_type
                }
            )

            if created:
                logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç: {subject_data['name']}")
            else:
                logger.info("–ü—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {subject_data['name']}")

            return subject

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_data['name']}: {e}")
            raise

    def create_or_update_task(self, task_data: Dict, subject: Subject) -> Task:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            existing_task = Task.objects.filter(  # type: ignore
                title=task_data['title'][:200],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                subject=subject
            ).first()

            if existing_task:
                logger.debug("–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {task_data['title'][:50]}...")
                return existing_task

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            task = Task.objects.create(  # type: ignore
                subject=subject,
                title=task_data['title'][:200],
                description=task_data['description'][:1000],
                difficulty=task_data['difficulty'],
                source=task_data['source'],
                created_at=timezone.now()
            )

            logger.info("–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {task_data['title'][:50]}...")
            return task

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
            raise

    def run_data_update(self, max_tasks_per_subject: int = 50) -> Dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        start_time = time.time()
        total_subjects = 0
        total_tasks = 0
        errors = []

        try:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –§–ò–ü–ò
            logger.info("üìö –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –§–ò–ü–ò...")
            fipi_subjects = self.fipi_parser.get_subjects()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –†–µ—à—É–ï–ì–≠
            logger.info("üìö –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –†–µ—à—É–ï–ì–≠...")
            reshu_subjects = self.reshu_parser.get_subjects()

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
            all_subjects = fipi_subjects + reshu_subjects

            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            unique_subjects = {}
            for subject in all_subjects:
                name = subject['name'].strip()
                if name not in unique_subjects:
                    unique_subjects[name] = subject

            logger.info("üìä –ù–∞–π–¥–µ–Ω–æ {len(unique_subjects)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç
            for subject_data in unique_subjects.values():
                try:
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
                    subject = self.create_or_update_subject(subject_data)
                    total_subjects += 1

                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
                    if subject_data['source'] == '–§–ò–ü–ò':
                        tasks = self.fipi_parser.get_tasks_for_subject(
                            subject_data['url'], subject_data['name']
                        )
                    else:
                        tasks = self.reshu_parser.get_tasks_for_subject(
                            subject_data['url'], subject_data['name']
                        )

                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
                    tasks = tasks[:max_tasks_per_subject]

                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑–µ
                    with transaction.atomic():
                        for task_data in tasks:
                            try:
                                self.create_or_update_task(task_data, subject)
                                total_tasks += 1
                            except Exception as task_error:
                                errors.append("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {task_error}")
                                continue

                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
                    time.sleep(random.uniform(1, 3))

                except Exception as subject_error:
                    error_msg = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_data['name']}: {subject_error}"
                    errors.append(error_msg)
                    logger.error(error_msg)
                    continue

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            execution_time = time.time() - start_time
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
            logger.info("üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {total_subjects}")
            logger.info("üìù –°–æ–∑–¥–∞–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {total_tasks}")

            if errors:
                logger.warning("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(errors)} –æ—à–∏–±–æ–∫")
                for error in errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                    logger.warning("  - {error}")

            return {
                'success': True,
                'subjects_processed': total_subjects,
                'tasks_processed': total_tasks,
                'execution_time': execution_time,
                'errors': errors
            }

        except Exception as e:
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return {
                'success': False,
                'error': str(e),
                'subjects_processed': total_subjects,
                'tasks_processed': total_tasks,
                'execution_time': time.time() - start_time
            }

def run_data_update():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    integrator = DataIntegrator()
    return integrator.run_data_update()

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )

    # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    result = run_data_update()

    if result['success']:
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("üìä –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {result['subjects_processed']}")
        print("üìù –ó–∞–¥–∞–Ω–∏–π: {result['tasks_processed']}")
        print("‚è±Ô∏è –í—Ä–µ–º—è: {result['execution_time']:.2f} —Å–µ–∫")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {result['error']}")

#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞
"""

import os
import sys
import django
import asyncio
import requests
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

from django.conf import settings


def test_bot_token():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...")
    
    bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
    if not bot_token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py")
        return False
    
    if len(bot_token) < 40:
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        return False
    
    print("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω")
    return True


def test_bot_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –±–æ—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API –±–æ—Ç–∞...")
    
    bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
    if not bot_token:
        return False
    
    try:
        url = f"https://api.telegram.org/bot{bot_token}/getMe"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                bot_info = data['result']
                print(f"‚úÖ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç: @{bot_info['username']}")
                print(f"   ID: {bot_info['id']}")
                print(f"   –ò–º—è: {bot_info['first_name']}")
                return True
            else:
                print(f"‚ùå API –æ—à–∏–±–∫–∞: {data.get('description', 'Unknown')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False


def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from core.models import Subject, Task
        
        subjects_count = Subject.objects.count()
        tasks_count = Task.objects.count()
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
        print(f"   –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {subjects_count}")
        print(f"   –ó–∞–¥–∞–Ω–∏–π: {tasks_count}")
        
        if subjects_count == 0:
            print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py load_sample_data")
        
        if tasks_count == 0:
            print("‚ö†Ô∏è  –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py load_fipi_data")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return False


def test_bot_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –±–æ—Ç–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–æ—Ç–∞...")
    
    try:
        import bot.bot as bot_module
        print("‚úÖ –ú–æ–¥—É–ª—å –±–æ—Ç–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        required_functions = ['start', 'subjects_menu', 'main']
        for func_name in required_functions:
            if hasattr(bot_module, func_name):
                print(f"   ‚úÖ {func_name}")
            else:
                print(f"   ‚ùå {func_name} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ExamFlow Telegram Bot")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    tests = [
        ("–¢–æ–∫–µ–Ω –±–æ—Ç–∞", test_bot_token),
        ("API –±–æ—Ç–∞", test_bot_api),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("–ò–º–ø–æ—Ä—Ç –±–æ—Ç–∞", test_bot_import),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"üìã {test_name}")
        try:
            if test_func():
                passed += 1
                print("‚úÖ –ü–†–û–ô–î–ï–ù\n")
            else:
                print("‚ùå –ü–†–û–í–ê–õ–ï–ù\n")
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}\n")
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   python manage.py runbot start --daemon")
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py migrate")
        print("   3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: python manage.py load_sample_data")
        print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    
    return passed == total


if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)

"""
–°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è Telegram –±–æ—Ç–∞

–í–∫–ª—é—á–∞–µ—Ç:
- –°–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤ –∏ —É—Ä–æ–≤–Ω–µ–π
- –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –∑–Ω–∞—á–∫–∏
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
- –¢–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
"""

import logging

from asgiref.sync import sync_to_async
from django.contrib.auth import get_user_model
from django.utils import timezone
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from core.models import UnifiedProfile
from learning.models import Achievement, UserProgress

User = get_user_model()  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º User –º–æ–¥–µ–ª—å

logger = logging.getLogger(__name__)

# –£–°–¢–ê–†–ï–õ–û: –≠—Ç–æ—Ç –∫–ª–∞—Å—Å —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ –º–æ–¥—É–ª–∏ –≤ telegram_bot/gamification/
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: from telegram_bot.gamification import TelegramGamification


class TelegramGamification:
    """–£–°–¢–ê–†–ï–í–®–ò–ô –∫–ª–∞—Å—Å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—É—é –º–æ–¥—É–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""

    def __init__(self):
        self.points_per_correct = 10  # –û—á–∫–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        self.points_per_streak = 5  # –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        self.level_multiplier = 100  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —É—Ä–æ–≤–Ω—è
        self.daily_bonus = 50  # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å

    @sync_to_async
    def add_points(self, user_id: int, points: int, reason: str = "–ó–∞–¥–∞–Ω–∏–µ") -> dict:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            profile, created = UnifiedProfile.objects.get_or_create(  # type: ignore
                telegram_id=user_id, defaults={"telegram_id": user_id}
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏
            profile.points = (profile.points or 0) + points
            profile.total_points = (profile.total_points or 0) + points

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            old_level = profile.level or 1
            new_level = self._calculate_level(profile.points)

            if new_level > old_level:
                profile.level = new_level
                level_up_message = (
                    f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è!**"
                )
            else:
                level_up_message = ""

            profile.save()

            return {
                "success": True,
                "new_points": profile.points,
                "new_level": profile.level,
                "level_up": new_level > old_level,
                "level_up_message": level_up_message,
                "reason": reason,
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤: {e}")
            return {"success": False, "error": str(e)}

    @sync_to_async
    def get_user_stats(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            profile = UnifiedProfile.objects.filter(  # type: ignore
                telegram_id=user_id
            ).first()  # type: ignore
            if not profile:
                return {"success": False, "error": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º Django User
            django_user, _ = User.objects.get_or_create(  # type: ignore
                username=f"tg_{user_id}", defaults={"first_name": f"User {user_id}"}
            )

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
            subjects_progress = UserProgress.objects.filter(  # type: ignore
                user_id=django_user.id
            ).select_related("subject")

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements = Achievement.objects.filter(  # type: ignore
                user_id=django_user.id
            ).order_by("-date_earned")[:5]

            return {
                "success": True,
                "level": profile.level or 1,
                "points": profile.points or 0,
                "total_points": profile.total_points or 0,
                "subjects_progress": list(subjects_progress.values()),
                "achievements": list(achievements.values()),
                "rank": self._calculate_rank(profile.points or 0),
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"success": False, "error": str(e)}

    @sync_to_async
    def check_achievements(self, user_id: int, action: str, **kwargs) -> list[dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–¥–∞—ë—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        try:
            profile = UnifiedProfile.objects.filter(  # type: ignore
                telegram_id=user_id
            ).first()  # type: ignore
            if not profile:
                return []

            new_achievements = []

            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º Django User
            django_user, _ = User.objects.get_or_create(  # type: ignore
                username=f"tg_{user_id}", defaults={"first_name": f"User {user_id}"}
            )

            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if action == "correct_answer" and kwargs.get("first_correct"):
                achievement = self._create_achievement(
                    django_user, "–ü–µ—Ä–≤—ã–π —à–∞–≥", "–†–µ—à–∏–ª–∏ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ", "ü•á"
                )
                if achievement:
                    new_achievements.append(achievement)

            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —Å–µ—Ä–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            if action == "correct_answer" and kwargs.get("streak", 0) >= 5:
                achievement = self._create_achievement(
                    django_user,
                    "–°–µ—Ä–∏—è –ø–æ–±–µ–¥",
                    f"–†–µ—à–∏–ª–∏ {kwargs['streak']} –∑–∞–¥–∞–Ω–∏–π –ø–æ–¥—Ä—è–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                    "üî•",
                )
                if achievement:
                    new_achievements.append(achievement)

            # –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ —É—Ä–æ–≤–µ–Ω—å
            if action == "level_up":
                level = kwargs.get("level", 1)
                achievement = self._create_achievement(
                    django_user, f"–£—Ä–æ–≤–µ–Ω—å {level}", f"–î–æ—Å—Ç–∏–≥–ª–∏ {level} —É—Ä–æ–≤–Ω—è", "‚≠ê"
                )
                if achievement:
                    new_achievements.append(achievement)

            return new_achievements

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            return []

    @sync_to_async
    def get_daily_challenges(self, user_id: int) -> list[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            profile = UnifiedProfile.objects.filter(  # type: ignore
                telegram_id=user_id
            ).first()  # type: ignore
            if not profile:
                return []

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            level = profile.level or 1
            challenges = []

            # –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            target_tasks = min(level * 2, 20)
            challenges.append(
                {
                    "id": "daily_tasks",
                    "title": f"–†–µ—à–∏—Ç—å {target_tasks} –∑–∞–¥–∞–Ω–∏–π",
                    "description": f"–†–µ—à–∏—Ç–µ {target_tasks} –∑–∞–¥–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è",
                    "reward": 25,
                    "progress": 0,
                    "target": target_tasks,
                    "icon": "üìö",
                }
            )

            # –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
            if level >= 3:
                challenges.append(
                    {
                        "id": "accuracy",
                        "title": "–¢–æ—á–Ω–æ—Å—Ç—å 90%+",
                        "description": "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ 90% –∏–ª–∏ –≤—ã—à–µ",
                        "reward": 30,
                        "progress": 0,
                        "target": 90,
                        "icon": "üéØ",
                    }
                )

            # –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            if level >= 5:
                challenges.append(
                    {
                        "id": "new_subject",
                        "title": "–ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç",
                        "description": "–ò–∑—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç",
                        "reward": 50,
                        "progress": 0,
                        "target": 1,
                        "icon": "üåü",
                    }
                )

            return challenges

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {e}")
            return []

    @sync_to_async
    def get_leaderboard(self, limit: int = 10) -> list[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
        try:
            top_users = UnifiedProfile.objects.filter(  # type: ignore
                points__gt=0
            ).order_by("-points")[:limit]

            leaderboard = []
            for i, profile in enumerate(top_users, 1):
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º Django User –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
                django_user, _ = User.objects.get_or_create(  # type: ignore
                    username=f"tg_{profile.telegram_id}",
                    defaults={"first_name": f"User {profile.telegram_id}"},
                )

                leaderboard.append(
                    {
                        "rank": i,
                        "username": django_user.username
                        or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {profile.telegram_id}",
                        "level": profile.level or 1,
                        "points": profile.points or 0,
                        "emoji": self._get_rank_emoji(i),
                    }
                )

            return leaderboard

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
            return []

    def create_gamification_keyboard(self, user_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{user_id}"),
                InlineKeyboardButton(
                    "üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data=f"achievements_{user_id}"
                ),
            ],
            [
                InlineKeyboardButton(
                    "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"progress_{user_id}"
                ),
                InlineKeyboardButton("üèÖ –õ–∏–¥–µ—Ä—ã", callback_data="leaderboard"),
            ],
            [
                InlineKeyboardButton(
                    "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è", callback_data=f"daily_{user_id}"
                ),
                InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å—ã", callback_data=f"bonus_{user_id}"),
            ],
        ]
        return InlineKeyboardMarkup(keyboard)

    def create_progress_keyboard(self, user_id: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"overall_progress_{user_id}"
                ),
                InlineKeyboardButton(
                    "üìö –ü–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data=f"subjects_progress_{user_id}"
                ),
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"gamification_{user_id}")],
        ]
        return InlineKeyboardMarkup(keyboard)

    def _calculate_level(self, points: int) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤"""
        if points <= 0:
            return 1
        return (points // self.level_multiplier) + 1

    def _calculate_rank(self, points: int) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if points >= 1000:
            return "ü•á –ú–∞—Å—Ç–µ—Ä"
        elif points >= 500:
            return "ü•à –≠–∫—Å–ø–µ—Ä—Ç"
        elif points >= 100:
            return "ü•â –£—á–µ–Ω–∏–∫"
        else:
            return "üìö –ù–æ–≤–∏—á–æ–∫"

    def _get_rank_emoji(self, rank: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–Ω–≥–∞"""
        if rank == 1:
            return "ü•á"
        elif rank == 2:
            return "ü•à"
        elif rank == 3:
            return "ü•â"
        elif rank <= 10:
            return "‚≠ê"
        else:
            return "üìä"

    def _create_achievement(
        self, user, title: str, description: str, icon: str
    ) -> dict | None:
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            existing = Achievement.objects.filter(  # type: ignore
                user=user, title=title
            ).first()

            if existing:
                return None

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            achievement = Achievement.objects.create(  # type: ignore
                user=user,
                title=title,
                description=description,
                icon=icon,
                date_earned=timezone.now(),
            )

            return {
                "title": title,
                "description": description,
                "icon": icon,
                "date_earned": achievement.date_earned,
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {e}")
            return None

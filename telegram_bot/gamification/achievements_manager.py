"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (Single Responsibility: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏)
"""

from typing import Dict, List
from asgiref.sync import sync_to_async
from core.models import UnifiedProfile
import logging

logger = logging.getLogger(__name__)


class AchievementsManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.achievements_config = {
            'first_correct': {
                'title': 'üéØ –ü–µ—Ä–≤—ã–π —É—Å–ø–µ—Ö',
                'description': '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
                'points': 25
            },
            'streak_5': {
                'title': 'üî• –°–µ—Ä–∏—è 5',
                'description': '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ 5 –∑–∞–¥–∞–Ω–∏–π –ø–æ–¥—Ä—è–¥',
                'points': 50
            },
            'streak_10': {
                'title': 'üöÄ –°–µ—Ä–∏—è 10',
                'description': '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ 10 –∑–∞–¥–∞–Ω–∏–π –ø–æ–¥—Ä—è–¥',
                'points': 100
            },
            'level_5': {
                'title': '‚≠ê –£—Ä–æ–≤–µ–Ω—å 5',
                'description': '–î–æ—Å—Ç–∏–≥ 5-–≥–æ —É—Ä–æ–≤–Ω—è',
                'points': 200
            },
            'daily_learner': {
                'title': 'üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
                'description': '–ó–∞–Ω–∏–º–∞–ª—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏',
                'points': 150
            }
        }

    @sync_to_async
    def check_achievements(self, user_id: int) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        try:
            profile = UnifiedProfile.objects.get(telegram_id=user_id)  # type: ignore
            new_achievements = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
            for achievement_key, config in self.achievements_config.items():
                if not self._has_achievement(profile, achievement_key):
                    if self._check_achievement_condition(profile, achievement_key):
                        # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                        self._grant_achievement(profile, achievement_key)
                        new_achievements.append({
                            'key': achievement_key,
                            'title': config['title'],
                            'description': config['description'],
                            'points': config['points']
                        })
            
            return new_achievements
            
        except UnifiedProfile.DoesNotExist:  # type: ignore
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
            return []

    def _has_achievement(self, profile, achievement_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        achievements = profile.achievements or {}
        return achievement_key in achievements

    def _check_achievement_condition(self, profile, achievement_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        if achievement_key == 'first_correct':
            return (profile.correct_answers or 0) >= 1
        elif achievement_key == 'streak_5':
            return (profile.current_streak or 0) >= 5
        elif achievement_key == 'streak_10':
            return (profile.current_streak or 0) >= 10
        elif achievement_key == 'level_5':
            return (profile.level or 1) >= 5
        elif achievement_key == 'daily_learner':
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
            return (profile.total_answers or 0) >= 7
        
        return False

    def _grant_achievement(self, profile, achievement_key: str):
        """–í—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not profile.achievements:
            profile.achievements = {}
        
        profile.achievements[achievement_key] = {
            'granted_at': profile.updated_at.isoformat() if profile.updated_at else None,
            'points_earned': self.achievements_config[achievement_key]['points']
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        achievement_points = self.achievements_config[achievement_key]['points']
        profile.points = (profile.points or 0) + achievement_points
        profile.total_points = (profile.total_points or 0) + achievement_points
        
        profile.save()

    @sync_to_async
    def get_user_achievements(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            profile = UnifiedProfile.objects.get(telegram_id=user_id)  # type: ignore
            achievements = profile.achievements or {}
            
            result = []
            for key, data in achievements.items():
                if key in self.achievements_config:
                    config = self.achievements_config[key]
                    result.append({
                        'key': key,
                        'title': config['title'],
                        'description': config['description'],
                        'granted_at': data.get('granted_at'),
                        'points_earned': data.get('points_earned', 0)
                    })
            
            return result
            
        except UnifiedProfile.DoesNotExist:  # type: ignore
            return []

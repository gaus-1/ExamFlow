"""
ü§ñ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è Telegram –±–æ—Ç–∞

–ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–æ—Ç–∞:
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI
- –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è
"""

import logging
from typing import Dict, List, Any, Optional, Tuple
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from asgiref.sync import sync_to_async
from django.contrib.auth.models import User
from django.utils import timezone

from learning.models import Subject, Task, UserProgress
from core.models import UnifiedProfile
from core.services.unified_profile import UnifiedProfileService
from core.services.chat_session import ChatSessionService
from ai.optimized_service import ai_service
from .gamification import TelegramGamification

logger = logging.getLogger(__name__)

class OptimizedBotService:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.ai_service = ai_service
        self.gamification = TelegramGamification()
        self.logger = logging.getLogger(__name__)
    
    # ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
    
    async def get_start_message(self, user_id: int) -> Tuple[str, InlineKeyboardMarkup]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = await self._get_user_profile(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            if profile and profile.get('level', 1) > 1:
                message = f"""üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {profile.get('name', '—É—á–µ–Ω–∏–∫')}!

üìä –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {profile.get('level', 1)}
üèÜ –û—á–∫–æ–≤: {profile.get('points', 0)}
üìö –†–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {profile.get('solved_tasks', 0)}

–ß—Ç–æ –±—É–¥–µ–º –∏–∑—É—á–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?"""
            else:
                message = """üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExamFlow!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –∏ –û–ì–≠:
üìö –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
üèÜ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è

–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞:"""
            
            keyboard = self._get_main_menu_keyboard()
            return message, keyboard
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
            return "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExamFlow! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", self._get_main_menu_keyboard()
    
    async def get_subjects_menu(self) -> Tuple[str, InlineKeyboardMarkup]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        try:
            subjects = await self._get_subjects()
            
            message = "üìö –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
            keyboard = self._get_subjects_keyboard(subjects)
            
            return message, keyboard
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", self._get_main_menu_keyboard()
    
    async def get_subject_topics(self, subject_id: int) -> Tuple[str, InlineKeyboardMarkup]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º—ã –ø—Ä–µ–¥–º–µ—Ç–∞"""
        try:
            subject = await self._get_subject(subject_id)
            if not subject:
                return "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", self._get_subjects_keyboard([])
            
            message = f"üìñ {subject['name']} - {subject['exam_type']}\n\n–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:"
            keyboard = self._get_topics_keyboard(subject_id, subject.get('topics', []))
            
            return message, keyboard
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º", self._get_subjects_keyboard([])
    
    async def get_random_task(self, subject_id: int = None) -> Tuple[str, InlineKeyboardMarkup]: # type: ignore
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
        try:
            task = await self._get_random_task(subject_id)
            if not task:
                return "‚ùå –ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", self._get_main_menu_keyboard()
            
            message = f"""üìù **{task['title']}**

{task['text'][:500]}{'...' if len(task['text']) > 500 else ''}

**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {task['difficulty']}/5
**–ü—Ä–µ–¥–º–µ—Ç:** {task['subject']}"""
            
            keyboard = self._get_task_keyboard(task['id'])
            return message, keyboard
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏—è", self._get_main_menu_keyboard()
    
    async def get_ai_response(self, 
                            prompt: str, 
                            user_id: int,
                            task_id: int = None) -> Tuple[str, InlineKeyboardMarkup]: # type: ignore
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self._get_django_user(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
            if task_id:
                task = await self._get_task(task_id)
                result = self.ai_service.get_personalized_help( # type: ignore
                    task['text'], user, user_level=3 # type: ignore
                )
            else:
                result = self.ai_service.ask(prompt, user, use_rag=True) # type: ignore
            
            if 'error' in result:
                message = f"‚ùå {result['error']}"
            else:
                message = f"ü§ñ **AI –û—Ç–≤–µ—Ç:**\n\n{result['response']}"
            
            keyboard = self._get_ai_keyboard()
            return message, keyboard
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è AI –æ—Ç–≤–µ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞", self._get_main_menu_keyboard()
    
    async def get_user_stats(self, user_id: int) -> Tuple[str, InlineKeyboardMarkup]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            profile = await self._get_user_profile(user_id)
            if not profile:
                return "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", self._get_main_menu_keyboard()
            
            message = f"""üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üéØ **–£—Ä–æ–≤–µ–Ω—å:** {profile.get('level', 1)}
üèÜ **–û—á–∫–∏:** {profile.get('points', 0)}
üìö **–†–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:** {profile.get('solved_tasks', 0)}
üéñÔ∏è **–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π:** {profile.get('achievements', 0)}
üî• **–°–µ—Ä–∏—è –ø–æ–±–µ–¥:** {profile.get('streak', 0)}

**–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:**
{self._get_progress_bar(profile.get('xp', 0), profile.get('next_level_xp', 100))}"""
            
            keyboard = self._get_stats_keyboard()
            return message, keyboard
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", self._get_main_menu_keyboard()
    
    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def _get_user_profile(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            profile = await sync_to_async(UnifiedProfileService.get_or_create_profile)(
                user_id, 'telegram' # type: ignore
            )
            return profile
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return None
    
    async def _get_django_user(self, user_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–∞–µ—Ç Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_tuple = await sync_to_async(User.objects.get_or_create)(
                username=f"tg_{user_id}",
                defaults={'first_name': f'User {user_id}'}
            )
            return user_tuple[0]  # type: ignore
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    async def _get_subjects(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        try:
            subjects = await sync_to_async(list)(
                Subject.objects.all().values('id', 'name', 'exam_type') # type: ignore
            )
            return list(subjects)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
            return []
    
    async def _get_subject(self, subject_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID"""
        try:
            subject = await sync_to_async(Subject.objects.get)(id=subject_id) # type: ignore
            return {
                'id': subject.id,
                'name': subject.name,
                'exam_type': subject.exam_type,
                'topics': []  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ–º
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
            return None
    
    async def _get_random_task(self, subject_id: int = None) -> Optional[Dict[str, Any]]: # type: ignore
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
        try:
            from django.db.models import Q
            from random import choice
            
            query = Task.objects.all() # type: ignore
            if subject_id:
                query = query.filter(subject_id=subject_id)
            
            tasks = await sync_to_async(list)(query.values('id', 'title', 'text', 'difficulty', 'subject__name')) # type: ignore
            
            if tasks:
                task = choice(tasks)
                return {
                    'id': task['id'],
                    'title': task['title'],
                    'text': task['text'],
                    'difficulty': task['difficulty'],
                    'subject': task['subject__name']
                }
            
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
            return None
    
    async def _get_task(self, task_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID"""
        try:
            task = await sync_to_async(Task.objects.get)(id=task_id) # type: ignore
            return {
                'id': task.id,
                'title': task.title,
                'text': task.text,
                'difficulty': task.difficulty,
                'subject': task.subject.name
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {e}")
            return None
    
    # ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
    
    def _get_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects")],
            [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
            [InlineKeyboardButton("ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫", callback_data="ai_help")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def _get_subjects_keyboard(self, subjects: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        keyboard = []
        for subject in subjects[:6]:  # –ú–∞–∫—Å–∏–º—É–º 6 –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            keyboard.append([
                InlineKeyboardButton(
                    f"{subject['name']} ({subject['exam_type']})",
                    callback_data=f"subject_{subject['id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        return InlineKeyboardMarkup(keyboard)
    
    def _get_topics_keyboard(self, subject_id: int, topics: List[str]) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–µ–º"""
        keyboard = []
        for i, topic in enumerate(topics[:5]):  # –ú–∞–∫—Å–∏–º—É–º 5 —Ç–µ–º
            keyboard.append([
                InlineKeyboardButton(
                    topic,
                    callback_data=f"topic_{subject_id}_{i}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subjects")])
        return InlineKeyboardMarkup(keyboard)
    
    def _get_task_keyboard(self, task_id: int) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–¥–∞–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton("ü§ñ –û–±—ä—è—Å–Ω–∏—Ç—å", callback_data=f"explain_{task_id}")],
            [InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"hint_{task_id}")],
            [InlineKeyboardButton("‚úÖ –†–µ—à–µ–Ω–æ", callback_data=f"solved_{task_id}")],
            [InlineKeyboardButton("üé≤ –î—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def _get_ai_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ AI"""
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="ai_help")],
            [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def _get_stats_keyboard(self) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")],
            [InlineKeyboardButton("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def _get_progress_bar(self, current: int, total: int, length: int = 10) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        if total == 0:
            return "‚ñà" * length
        
        filled = int((current / total) * length)
        bar = "‚ñà" * filled + "‚ñë" * (length - filled)
        percentage = int((current / total) * 100)
        
        return f"{bar} {percentage}%"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
bot_service = OptimizedBotService()

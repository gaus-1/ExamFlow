#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è ExamFlow Telegram Bot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""

import os
import sys
import asyncio
import logging
import time
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
import aiohttp
import json

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import django
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

from telegram import Bot
from core.container import Container

logger = logging.getLogger(__name__)


class BotMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot_token = getattr(settings, 'TELEGRAM_BOT_TOKEN', '')
        self.admin_chat_id = getattr(settings, 'ADMIN_TELEGRAM_ID', None)
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.last_check = None
        self.failures_count = 0
        self.max_failures = 3
        
    async def check_bot_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        health_status = {
            'timestamp': datetime.now().isoformat(),
            'bot_online': False,
            'api_responsive': False,
            'database_connected': False,
            'ai_working': False,
            'errors': []
        }
        
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot API
            bot = Bot(token=self.bot_token)
            me = await bot.get_me()
            health_status['bot_online'] = True
            health_status['bot_info'] = {
                'username': me.username,
                'id': me.id,
                'first_name': me.first_name
            }
            logger.info(f"‚úÖ Bot API: @{me.username}")
            
        except Exception as e:
            health_status['errors'].append(f"Bot API error: {str(e)}")
            logger.error(f"‚ùå Bot API: {e}")
        
        try:
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from learning.models import Subject
            subjects_count = Subject.objects.count()  # type: ignore
            health_status['database_connected'] = True
            health_status['database_info'] = {
                'subjects_count': subjects_count
            }
            logger.info(f"‚úÖ Database: {subjects_count} subjects")
            
        except Exception as e:
            health_status['errors'].append(f"Database error: {str(e)}")
            logger.error(f"‚ùå Database: {e}")
        
        try:
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Å–∏—Å—Ç–µ–º—ã
            ai_orchestrator = Container.ai_orchestrator()
            test_response = ai_orchestrator.ask("–¢–µ—Å—Ç")
            if isinstance(test_response, dict) and 'answer' in test_response:
                health_status['ai_working'] = True
                health_status['ai_info'] = {
                    'response_length': len(test_response['answer'])
                }
                logger.info("‚úÖ AI System: Working")
            else:
                health_status['errors'].append("AI returned unexpected format")
                
        except Exception as e:
            health_status['errors'].append(f"AI error: {str(e)}")
            logger.error(f"‚ùå AI System: {e}")
        
        # 4. –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        health_status['overall_healthy'] = (
            health_status['bot_online'] and
            health_status['database_connected'] and
            health_status['ai_working']
        )
        
        return health_status
    
    async def send_alert(self, message: str, priority: str = "warning"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        if not self.admin_chat_id:
            logger.warning("ADMIN_TELEGRAM_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
        
        try:
            bot = Bot(token=self.bot_token)
            
            # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            emoji = {
                'info': '‚ÑπÔ∏è',
                'warning': '‚ö†Ô∏è',
                'error': 'üö®',
                'success': '‚úÖ'
            }.get(priority, '‚ÑπÔ∏è')
            
            formatted_message = f"{emoji} **ExamFlow Bot Alert**\n\n{message}\n\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            await bot.send_message(
                chat_id=self.admin_chat_id,
                text=formatted_message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
    
    async def run_monitoring(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ExamFlow Bot")
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
                health_status = await self.check_bot_health()
                self.last_check = datetime.now()
                
                if health_status['overall_healthy']:
                    if self.failures_count > 0:
                        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤
                        await self.send_alert(
                            f"üéâ –ë–æ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ {self.failures_count} —Å–±–æ–µ–≤",
                            "success"
                        )
                        self.failures_count = 0
                    
                    logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                    
                else:
                    self.failures_count += 1
                    error_summary = "; ".join(health_status['errors'])
                    
                    if self.failures_count >= self.max_failures:
                        await self.send_alert(
                            f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º!\n\n–û—à–∏–±–∫–∏: {error_summary}\n\n–ü—Ä–æ–≤–µ—Ä–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏: {self.failures_count}",
                            "error"
                        )
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º: {error_summary}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ñ–∞–π–ª –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                status_file = 'logs/bot_health_status.json'
                os.makedirs(os.path.dirname(status_file), exist_ok=True)
                with open(status_file, 'w', encoding='utf-8') as f:
                    json.dump(health_status, f, ensure_ascii=False, indent=2)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await self.send_alert(f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}", "error")
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(self.check_interval)


class UptimeRobotIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å UptimeRobot –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.api_key = getattr(settings, 'UPTIMEROBOT_API_KEY', '')
        self.monitor_url = getattr(settings, 'SITE_URL', 'https://examflow.ru') + '/healthz'
    
    async def create_monitor(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ –≤ UptimeRobot"""
        if not self.api_key:
            logger.warning("UPTIMEROBOT_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        try:
            async with aiohttp.ClientSession() as session:
                data = {
                    'api_key': self.api_key,
                    'format': 'json',
                    'type': 1,  # HTTP(s)
                    'url': self.monitor_url,
                    'friendly_name': 'ExamFlow Website',
                    'interval': 300,  # 5 –º–∏–Ω—É—Ç
                    'timeout': 30
                }
                
                async with session.post('https://api.uptimerobot.com/v2/newMonitor', data=data) as resp:
                    result = await resp.json()
                    if result.get('stat') == 'ok':
                        logger.info("‚úÖ UptimeRobot –º–æ–Ω–∏—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞: {result}")
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ UptimeRobot API: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('logs/bot_monitoring.log'),
            logging.StreamHandler()
        ]
    )
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤
    os.makedirs('logs', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor = BotMonitor()
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å UptimeRobot
    uptime_robot = UptimeRobotIntegration()
    await uptime_robot.create_monitor()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await monitor.run_monitoring()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        sys.exit(1)

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞

–°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞:
- –ö–æ–º–∞–Ω–¥—ã (/start, /help, /subjects, /stats)
- –û–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
- –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –≤–µ–±-—Å–∞–π—Ç–æ–º
"""

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from django.contrib.auth.models import User
from core.models import (
    Subject, Task, UserProgress, UserRating,
    Achievement, UserProfile, Subscription
)
from django.db.models import Count, Q
from django.utils import timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def check_db_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            cursor.fetchone()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
def get_current_task_id(user):
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        profile = UserProfile.objects.get(user=user)  # type: ignore
        return profile.current_task_id
    except UserProfile.DoesNotExist:
        return None

def set_current_task_id(user, task_id):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        profile = UserProfile.objects.get(user=user)  # type: ignore
        profile.current_task_id = task_id
        profile.save()
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω current_task_id: {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
    except UserProfile.DoesNotExist:
        logger.error(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")


def get_or_create_user(telegram_user):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username = tg_{telegram_id}
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏ —Ä–µ–π—Ç–∏–Ω–≥
    """
    username = f"tg_{telegram_user.id}"
    user, created = User.objects.get_or_create(
        username=username,
        defaults={
            'first_name': telegram_user.first_name or '',
            'last_name': telegram_user.last_name or '',
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile, profile_created = UserProfile.objects.get_or_create( # type: ignore
        user=user,
        defaults={
            'telegram_id': str(telegram_user.id)
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    rating, rating_created = UserRating.objects.get_or_create(user=user) # type: ignore
    
    return user, created


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    if not check_db_connection():
        await update.message.reply_text(
            "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã."
        )
        return
    
    try:
        user, created = get_or_create_user(update.effective_user)
        
        welcome_text = f"""
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExamFlow!**

–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! 

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –∏ –û–ì–≠:

‚úÖ –†–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
üèÜ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
üîä –ü–æ–ª—É—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (Premium)

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        keyboard = [
            [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects"), InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω–æ–µ", callback_data="random_task")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"), InlineKeyboardButton("üåê –°–∞–π—Ç", url="https://examflow.ru")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def subjects_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞–Ω–∏–π
    """
    try:
        query = update.callback_query
        await query.answer()

        # –ù–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ
        try:
            subject_ids = list(Task.objects.values_list('subject_id', flat=True).distinct())  # type: ignore
        except Exception as id_err:
            logger.error(f"subjects_menu: –æ—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ subject_ids: {id_err}")
            subject_ids = []

        if not subject_ids:
            await query.edit_message_text("üìö –ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        subjects = Subject.objects.filter(id__in=subject_ids)  # type: ignore

        keyboard = []
        for subject in subjects:
            try:
                tasks_count = Task.objects.filter(subject_id=subject.id).count()  # type: ignore
            except Exception:
                tasks_count = 0
            button_text = f"{subject.name} ({tasks_count} –∑–∞–¥–∞–Ω–∏–π)"
            keyboard.append([
                InlineKeyboardButton(button_text, callback_data=f"subject_{subject.id}")
            ])

        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await query.edit_message_text(
                "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
        except Exception as edit_err:
            logger.warning(f"subjects_menu: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,  # type: ignore
                    text="üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
                    reply_markup=reply_markup
                )
            except Exception as send_err:
                logger.error(f"subjects_menu: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ subjects_menu: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ç–∏—à–∏–Ω—ã
        try:
            await update.effective_chat.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")  # type: ignore
        except Exception as send_err:
            logger.error(f"subjects_menu: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_err}")


async def show_subject_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Ç–µ–º)
    """
    query = update.callback_query
    await query.answer()

    subject_id = int(query.data.split('_')[1])
    subject = Subject.objects.get(id=subject_id)  # type: ignore

    tasks = Task.objects.filter(subject=subject)  # type: ignore
    if not tasks:
        await query.edit_message_text(
            f"‚ùå –í –ø—Ä–µ–¥–º–µ—Çe {subject.name} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="subjects")]])
        )
        return

    import random
    task = random.choice(list(tasks))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, _ = get_or_create_user(update.effective_user)
    set_current_task_id(user, task.id)
    logger.info(f"show_subject_topics: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω current_task_id: {task.id}")

    task_text = f"""
üìù **–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}**
**–ü—Ä–µ–¥–º–µ—Ç:** {task.subject.name}

**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {task.title}

**–£—Å–ª–æ–≤–∏–µ:**
{task.description or '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:
"""

    keyboard = [
        [InlineKeyboardButton("üîä –ì–æ–ª–æ—Å–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"voice_{task.id}")],
        [InlineKeyboardButton("üí° –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"answer_{task.id}")],
        [InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="subjects")]
    ]

    try:
        await query.edit_message_text(
            task_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as edit_err:
        logger.warning(f"show_subject_topics: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,  # type: ignore
                text=task_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as send_err:
            logger.error(f"show_subject_topics: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")


async def show_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    """
    global current_task_id
    
    query = update.callback_query
    await query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫: —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–µ
    if query.data.startswith('subject_'):
        try:
            subject_id = int(query.data.split('_')[1])
        except Exception:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞")
            return
        tasks = Task.objects.filter(subject_id=subject_id)  # type: ignore
        if not tasks:
            await query.edit_message_text(f"‚ùå –í –ø—Ä–µ–¥–º–µ—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")
            return
        import random
        task = random.choice(list(tasks))
    elif query.data.startswith('random_subject_'):
        subject_id = int(query.data.split('_')[2])
        tasks = Task.objects.filter(subject_id=subject_id)  # type: ignore
        if not tasks:
            await query.edit_message_text(f"‚ùå –í –ø—Ä–µ–¥–º–µ—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")
            return
        import random
        task = random.choice(list(tasks))
    else:
        tasks = Task.objects.all()  # type: ignore
        if not tasks:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        
        import random
        task = random.choice(list(tasks))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    try:
        user, _ = get_or_create_user(update.effective_user)
        set_current_task_id(user, task.id)
    except Exception as prof_err:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å current_task_id –≤ –ø—Ä–æ—Ñ–∏–ª—å: {prof_err}")
    current_task_id = task.id
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω current_task_id: {current_task_id} –¥–ª—è –∑–∞–¥–∞–Ω–∏—è: {task.title}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    task_text = f"""
üìù **–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}**
**–ü—Ä–µ–¥–º–µ—Ç:** {task.subject.name}

**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {task.title}

**–£—Å–ª–æ–≤–∏–µ:**
{task.description or '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:
"""
    
    keyboard = [
        [InlineKeyboardButton("üîä –ì–æ–ª–æ—Å–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"voice_{task.id}")],
        [InlineKeyboardButton("üí° –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"answer_{task.id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subjects")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.edit_message_text(
            task_text,
            reply_markup=reply_markup
        )
    except Exception as edit_err:
        logger.warning(f"show_task: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,  # type: ignore
                text=task_text,
                reply_markup=reply_markup
            )
        except Exception as send_err:
            logger.error(f"show_task: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
    """
    global current_task_id
    
    logger.info(f"handle_answer –≤—ã–∑–≤–∞–Ω. current_task_id: {current_task_id}")
    
    if not current_task_id:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ!")
        return
    
    user, _ = get_or_create_user(update.effective_user)
    task = Task.objects.get(id=current_task_id) # type: ignore
    user_answer = (update.message.text or '').strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç (–ø—Ä–æ—Å—Ç–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    correct_value = (task.answer or '').strip()
    is_correct = bool(correct_value) and (user_answer.lower() == correct_value.lower())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress, created = UserProgress.objects.get_or_create( # type: ignore
        user=user,
        task=task,
        defaults={
            'user_answer': user_answer,
            'is_correct': is_correct
        }
    )
    
    if not created:
        progress.user_answer = user_answer
        progress.is_correct = is_correct
        progress.save()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if is_correct:
        response = f"‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!** üéâ\n\n"
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        rating, _ = UserRating.objects.get_or_create(user=user) # type: ignore
        rating.total_points += 10
        rating.correct_answers += 1
        rating.save()
    else:
        response = f"‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ**\n\n"
        response += f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {task.answer}\n\n"
    
    # –£ –Ω–∞—Å –Ω–µ—Ç –ø–æ–ª—è explanation –≤ –º–æ–¥–µ–ª–∏ Task ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫/–ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    if task.source:
        response += f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {task.source}"
    
    keyboard = [
        [InlineKeyboardButton("üéØ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        response,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    current_task_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π, —Ç–æ—á–Ω–æ—Å—Ç—å, —Ä–µ–π—Ç–∏–Ω–≥
    """
    query = update.callback_query
    await query.answer()
    
    user, _ = get_or_create_user(update.effective_user)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_attempts = UserProgress.objects.filter(user=user).count()  # type: ignore
    correct_answers = UserProgress.objects.filter(user=user, is_correct=True).count()  # type: ignore
    accuracy = round((correct_answers / total_attempts * 100) if total_attempts > 0 else 0, 1)
    
    rating, _ = UserRating.objects.get_or_create(user=user)  # type: ignore
    
    stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.first_name or user.username}
‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:** {correct_answers}
üìù **–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫:** {total_attempts}
üéØ **–¢–æ—á–Ω–æ—Å—Ç—å:** {accuracy}%
‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {rating.total_points} –æ—á–∫–æ–≤

üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:** {Achievement.objects.filter(user=user).count()}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
"""
    
    keyboard = [
        [InlineKeyboardButton("üéØ –†–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
        [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        stats_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def voice_hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (Premium —Ñ—É–Ω–∫—Ü–∏—è)
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ
    """
    global current_task_id
    
    query = update.callback_query
    await query.answer()
    
    if not current_task_id:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    user, _ = get_or_create_user(update.effective_user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscription = Subscription.objects.filter(user=user, is_active=True).first() # type: ignore
    if not subscription:
        await query.edit_message_text(
            "üîä **–ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Premium**\n\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üíé –û—Ñ–æ—Ä–º–∏—Ç—å Premium", url="https://examflow.ru/dashboard/")
            ]])
        )
        return
    
    task = Task.objects.get(id=current_task_id) # type: ignore
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    await query.edit_message_text(
        f"üîä **–ì–æ–ª–æ—Å–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ‚Ññ{task.id}**\n\n"
        f"üìù {task.explanation or '–ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞'}\n\n"
        "üéµ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ö –∑–∞–¥–∞–Ω–∏—é", callback_data=f"task_{task.id}")
        ]])
    )


async def handle_unknown_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å—ã
    
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    query = update.callback_query
    await query.answer()
    
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")
    
    await query.edit_message_text(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]])
    )

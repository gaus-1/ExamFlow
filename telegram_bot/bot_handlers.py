"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞

–°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞:
- –ö–æ–º–∞–Ω–¥—ã (/start, /help, /subjects, /stats)
- –û–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
- –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –≤–µ–±-—Å–∞–π—Ç–æ–º
"""

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from asgiref.sync import sync_to_async
from telegram.ext import ContextTypes
from django.contrib.auth.models import User
from learning.models import (
    Subject, Task, UserProgress, UserRating, Achievement
)
from authentication.models import UserProfile, Subscription
from django.db.models import Count, Q
from django.utils import timezone
from ai.services import AiService
from ai.rag_service import rag_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î, –æ–±—ë—Ä–Ω—É—Ç—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ async-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
@sync_to_async
def db_check_connection() -> bool:
    from django.db import connection
    with connection.cursor() as cursor:
        cursor.execute("SELECT 1")
        cursor.fetchone()
    return True

# –ò–ò —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
@sync_to_async
def get_ai_response(prompt: str, task_type: str = 'chat', user=None, task=None) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG —Å–∏—Å—Ç–µ–º—ã"""
    try:
        ai_service = AiService()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º RAG
        if task and user:
            result = ai_service.ask_with_rag(prompt, user, task, task_type)
        else:
            result = ai_service.ask(prompt, user, task_type=task_type)
        
        if 'error' in result:
            return f"‚ùå –û—à–∏–±–∫–∞: {result['error']}"
        
        response = result['response']
        provider = result.get('provider', 'AI')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        response += f"\n\nü§ñ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ {provider}"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if 'rag_context' in result:
            rag = result['rag_context']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è
            if rag.get('similar_tasks'):
                response += "\n\nüìö **–ü–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏:**"
                for i, similar_task in enumerate(rag['similar_tasks'][:2], 1):
                    response += f"\n{i}. {similar_task['title']} (—Å–ª–æ–∂–Ω–æ—Å—Ç—å {similar_task['difficulty']}/5)"
                    response += f"\n   –¢–µ–º—ã: {', '.join(similar_task['topics'])}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if rag.get('recommendations'):
                response += "\n\nüí° **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**"
                for rec in rag['recommendations'][:2]:
                    response += f"\n‚Ä¢ {rec['title']}"
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {str(e)}"

@sync_to_async
def db_get_subject_ids():
    return list(Task.objects.values_list('subject_id', flat=True).distinct())

@sync_to_async
def db_get_subjects_by_ids(ids):
    return list(Subject.objects.filter(id__in=ids))

@sync_to_async
def db_count_tasks_for_subject(subject_id: int) -> int:
    return Task.objects.filter(subject_id=subject_id).count()  # type: ignore

@sync_to_async
def db_get_tasks_by_subject(subject_id: int):
    return list(Task.objects.filter(subject_id=subject_id))  # type: ignore

@sync_to_async
def db_get_all_tasks():
    return list(Task.objects.all())  # type: ignore

@sync_to_async
def db_get_subject_name_for_task(task):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
    return task.subject.name if task.subject else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"

@sync_to_async
def db_get_subject_name(subject_id: int) -> str:
    name = Subject.objects.filter(id=subject_id).values_list('name', flat=True).first()  # type: ignore
    return name or "–ü—Ä–µ–¥–º–µ—Ç"

@sync_to_async
def db_set_current_task_id(user, task_id: int):
    set_current_task_id(user, task_id)

@sync_to_async
def db_get_or_create_user(telegram_user):
    return get_or_create_user(telegram_user)

@sync_to_async
def db_get_task_by_id(task_id: int):
    return Task.objects.get(id=task_id)  # type: ignore

@sync_to_async
def db_save_progress(user, task, user_answer: str, is_correct: bool):
    progress, created = UserProgress.objects.get_or_create(  # type: ignore
        user=user,
        task=task,
        defaults={
            'user_answer': user_answer,
            'is_correct': is_correct
        }
    )
    if not created:
        progress.user_answer = user_answer
        progress.is_correct = is_correct
        progress.save()
    return progress

@sync_to_async
def db_update_rating_points(user, is_correct: bool):
    rating, _ = UserRating.objects.get_or_create(user=user)  # type: ignore
    if is_correct:
        rating.total_points += 10
        rating.correct_answers += 1
    else:
        rating.incorrect_answers += 1
    rating.total_attempts += 1
    rating.save()
    return rating

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
def get_current_task_id(user):
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        profile = UserProfile.objects.get(user=user)  # type: ignore
        return profile.current_task_id
    except UserProfile.DoesNotExist:  # type: ignore
        return None

def set_current_task_id(user, task_id):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        profile = UserProfile.objects.get(user=user)  # type: ignore
        profile.current_task_id = task_id
        profile.save()
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω current_task_id: {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
    except Exception as e:
        logger.error(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}")


def get_or_create_user(telegram_user):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username = tg_{telegram_id}
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏ —Ä–µ–π—Ç–∏–Ω–≥
    """
    username = f"tg_{telegram_user.id}"
    user, created = User.objects.get_or_create(
        username=username,
        defaults={
            'first_name': telegram_user.first_name or '',
            'last_name': telegram_user.last_name or '',
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile, profile_created = UserProfile.objects.get_or_create( # type: ignore
        user=user,
        defaults={
            'telegram_id': str(telegram_user.id)
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    rating, rating_created = UserRating.objects.get_or_create(user=user) # type: ignore
    
    return user, created


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
    try:
        ok = await db_check_connection()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        ok = False
    if not ok:
        await update.message.reply_text(
            "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã."
        )
        return
    
    try:
        user, created = await db_get_or_create_user(update.effective_user)
        
        welcome_text = f"""
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExamFlow!**

–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! 

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –∏ –û–ì–≠:

‚úÖ –†–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
üèÜ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
üîä –ü–æ–ª—É—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (Premium)

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        keyboard = [
            [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects"), InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω–æ–µ", callback_data="random_task")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"), InlineKeyboardButton("üéì –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è", callback_data="learning_plan")],
            [InlineKeyboardButton("üåê –°–∞–π—Ç", url="https://examflow.ru")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def learning_plan_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç RAG —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    """
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = await db_get_or_create_user(update.effective_user)
        if not user:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ RAG
        ai_service = AiService()
        learning_plan = await sync_to_async(ai_service.get_personalized_learning_plan)(user)
        
        if 'error' in learning_plan:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {learning_plan['error']}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞
        plan_text = f"""
üéì **–¢–í–û–ô –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –û–ë–£–ß–ï–ù–ò–Ø**

üìä **–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** {learning_plan.get('current_level', 1)}/5
üéØ **–¢–æ—á–Ω–æ—Å—Ç—å:** {learning_plan.get('accuracy', 0)}%
üìö **–†–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:** {learning_plan.get('total_tasks', 0)}

üî¥ **–°–ª–∞–±—ã–µ —Ç–µ–º—ã:**
"""
        
        weak_topics = learning_plan.get('weak_topics', [])
        if weak_topics:
            for topic in weak_topics[:3]:
                plan_text += f"‚Ä¢ {topic}\n"
        else:
            plan_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        plan_text += "\nüü¢ **–°–∏–ª—å–Ω—ã–µ —Ç–µ–º—ã:**\n"
        strong_topics = learning_plan.get('strong_topics', [])
        if strong_topics:
            for topic in strong_topics[:3]:
                plan_text += f"‚Ä¢ {topic}\n"
        else:
            plan_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        plan_text += "\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        recommendations = learning_plan.get('recommendations', [])
        if recommendations:
            for rec in recommendations[:3]:
                plan_text += f"‚Ä¢ {rec['title']}\n"
        else:
            plan_text += "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n"
        
        plan_text += f"""

üìÖ **–¶–µ–ª–∏:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: {learning_plan.get('daily_goal', 3)} –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ: {learning_plan.get('weekly_goal', 15)} –∑–∞–¥–∞–Ω–∏–π

üéØ **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**\n"""
        
        next_steps = learning_plan.get('next_steps', [])
        if next_steps:
            for step in next_steps[:3]:
                plan_text += f"‚Ä¢ {step['description']}\n"
        else:
            plan_text += "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üéØ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="subjects")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            plan_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ª—É—á–∏–ª –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ learning_plan_menu: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def subjects_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞–Ω–∏–π
    """
    try:
        query = update.callback_query
        await query.answer()

        # –ù–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ
        try:
            subject_ids = await db_get_subject_ids()
        except Exception as id_err:
            logger.error(f"subjects_menu: –æ—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ subject_ids: {id_err}")
            subject_ids = []

        if not subject_ids:
            await query.edit_message_text("üìö –ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        subjects = await db_get_subjects_by_ids(subject_ids)

        keyboard = []
        for subject in subjects:
            try:
                tasks_count = await db_count_tasks_for_subject(subject.id)
            except Exception:
                tasks_count = 0
            button_text = f"{subject.name} ({tasks_count} –∑–∞–¥–∞–Ω–∏–π)"
            keyboard.append([
                InlineKeyboardButton(button_text, callback_data=f"subject_{subject.id}")
            ])

        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await query.edit_message_text(
                "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
        except Exception as edit_err:
            logger.warning(f"subjects_menu: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,  # type: ignore
                    text="üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
                    reply_markup=reply_markup
                )
            except Exception as send_err:
                logger.error(f"subjects_menu: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ subjects_menu: {e}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ç–∏—à–∏–Ω—ã
        try:
            await update.effective_chat.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")  # type: ignore
        except Exception as send_err:
            logger.error(f"subjects_menu: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_err}")


async def show_subject_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Ç–µ–º)
    """
    query = update.callback_query
    await query.answer()

    subject_id = int(query.data.split('_')[1])
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ
    tasks = await db_get_tasks_by_subject(subject_id)
    if not tasks:
        subject_name = await db_get_subject_name(subject_id)
        await query.edit_message_text(
            f"‚ùå –í –ø—Ä–µ–¥–º–µ—Ç–µ {subject_name} –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="subjects")]])
        )
        return

    import random
    task = random.choice(list(tasks))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, _ = await db_get_or_create_user(update.effective_user)
    await db_set_current_task_id(user, task.id)
    logger.info(f"show_subject_topics: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω current_task_id: {task.id}")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    subject_name = await db_get_subject_name_for_task(task)
    
    task_text = f"""
üìù **–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}**
**–ü—Ä–µ–¥–º–µ—Ç:** {subject_name}

**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {task.title}

**–£—Å–ª–æ–≤–∏–µ:**
{task.description or '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:
"""

    keyboard = [
        [InlineKeyboardButton("üîä –ì–æ–ª–æ—Å–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"voice_{task.id}")],
        [InlineKeyboardButton("üí° –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"answer_{task.id}")],
        [InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="subjects")]
    ]

    try:
        await query.edit_message_text(
            task_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as edit_err:
        logger.warning(f"show_subject_topics: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,  # type: ignore
                text=task_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as send_err:
            logger.error(f"show_subject_topics: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")


async def show_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫: —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–µ
    if query.data.startswith('subject_'):
        try:
            subject_id = int(query.data.split('_')[1])
        except Exception:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞")
            return
        tasks = await db_get_tasks_by_subject(subject_id)
        if not tasks:
            await query.edit_message_text(f"‚ùå –í –ø—Ä–µ–¥–º–µ—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")
            return
        import random
        task = random.choice(list(tasks))
    elif query.data.startswith('random_subject_'):
        subject_id = int(query.data.split('_')[2])
        tasks = await db_get_tasks_by_subject(subject_id)
        if not tasks:
            await query.edit_message_text(f"‚ùå –í –ø—Ä–µ–¥–º–µ—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π")
            return
        import random
        task = random.choice(list(tasks))
    else:
        tasks = await db_get_all_tasks()
        if not tasks:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        
        import random
        task = random.choice(list(tasks))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    try:
        user, _ = await db_get_or_create_user(update.effective_user)
        await db_set_current_task_id(user, task.id)
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω current_task_id: {task.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
    except Exception as prof_err:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å current_task_id –≤ –ø—Ä–æ—Ñ–∏–ª—å: {prof_err}")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    subject_name = await db_get_subject_name_for_task(task)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    task_text = f"""
üìù **–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}**
**–ü—Ä–µ–¥–º–µ—Ç:** {subject_name}

**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {task.title}

**–£—Å–ª–æ–≤–∏–µ:**
{task.description or '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:
"""
    
    keyboard = [
        [InlineKeyboardButton("üîä –ì–æ–ª–æ—Å–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"voice_{task.id}")],
        [InlineKeyboardButton("ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI", callback_data=f"ai_help_{task.id}")],
        [InlineKeyboardButton("üí° –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"answer_{task.id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subjects")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.edit_message_text(
            task_text,
            reply_markup=reply_markup
        )
    except Exception as edit_err:
        logger.warning(f"show_task: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,  # type: ignore
                text=task_text,
                reply_markup=reply_markup
            )
        except Exception as send_err:
            logger.error(f"show_task: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
    """
    logger.info(f"handle_answer –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    
    user, _ = await db_get_or_create_user(update.effective_user)


async def ai_help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–º–æ—â—å –æ—Ç AI
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç RAG —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–º–æ—â–∏
    """
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback_data
        task_id = int(query.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞–Ω–∏–µ
        user, _ = await db_get_or_create_user(update.effective_user)
        task = await db_get_task_by_id(task_id)
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –¥—É–º–∞–µ—Ç
        thinking_message = await query.edit_message_text(
            "ü§î **AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∏ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å...**\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode='Markdown'
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–º–æ—â—å –æ—Ç AI —á–µ—Ä–µ–∑ RAG
        ai_response = await get_ai_response(
            "–û–±—ä—è—Å–Ω–∏, –∫–∞–∫ —Ä–µ—à–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ. –î–∞–π –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞.",
            task_type='task_explanation',
            user=user,
            task=task
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        response_text = f"""
ü§ñ **AI –ü–û–ú–û–©–¨ –î–õ–Ø –ó–ê–î–ê–ù–ò–Ø ‚Ññ{task.id}**

{ai_response}

---
üí° **–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è?**
"""
        
        keyboard = [
            [InlineKeyboardButton("üí° –¢–æ–ª—å–∫–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"ai_hint_{task.id}")],
            [InlineKeyboardButton("üìö –ü–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data=f"similar_{task.id}")],
            [InlineKeyboardButton("üîô –ö –∑–∞–¥–∞–Ω–∏—é", callback_data=f"show_task_{task.id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await thinking_message.edit_text(
            response_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ª—É—á–∏–ª AI –ø–æ–º–æ—â—å –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ai_help_handler: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI –ø–æ–º–æ—â–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def ai_hint_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫—É –æ—Ç AI
    """
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback_data
        task_id = int(query.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞–Ω–∏–µ
        user, _ = await db_get_or_create_user(update.effective_user)
        task = await db_get_task_by_id(task_id)
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –¥—É–º–∞–µ—Ç
        thinking_message = await query.edit_message_text(
            "üí° **AI –≥–æ—Ç–æ–≤–∏—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É...**\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode='Markdown'
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ—Ç AI —á–µ—Ä–µ–∑ RAG
        ai_response = await get_ai_response(
            "–î–∞–π –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ù–ï –¥–∞–≤–∞–π –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π —É—á–µ–Ω–∏–∫–∞.",
            task_type='hint_generation',
            user=user,
            task=task
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        response_text = f"""
üí° **AI –ü–û–î–°–ö–ê–ó–ö–ê –î–õ–Ø –ó–ê–î–ê–ù–ò–Ø ‚Ññ{task.id}**

{ai_response}

---
ü§ñ **–ù—É–∂–Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å?**
"""
        
        keyboard = [
            [InlineKeyboardButton("ü§ñ –ü–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", callback_data=f"ai_help_{task.id}")],
            [InlineKeyboardButton("üìö –ü–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data=f"similar_{task.id}")],
            [InlineKeyboardButton("üîô –ö –∑–∞–¥–∞–Ω–∏—é", callback_data=f"show_task_{task.id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await thinking_message.edit_text(
            response_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ª—É—á–∏–ª AI –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ai_hint_handler: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI –ø–æ–¥—Å–∫–∞–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def similar_tasks_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏
    """
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback_data
        task_id = int(query.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        task = await db_get_task_by_id(task_id)
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ RAG
        similar_tasks = await sync_to_async(rag_service.find_similar_tasks)(task, limit=5)
        
        if not similar_tasks:
            await query.edit_message_text(
                "üìö **–ü–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∏—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.",
                parse_mode='Markdown'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞–Ω–∏–π
        response_text = f"""
üìö **–ü–û–•–û–ñ–ò–ï –ó–ê–î–ê–ù–ò–Ø –î–õ–Ø –ü–†–ê–ö–¢–ò–ö–ò**

**–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:** {task.title}
**–ü—Ä–µ–¥–º–µ—Ç:** {task.subject.name if task.subject else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

**–ü–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è:**
"""
        
        for i, similar_task in enumerate(similar_tasks[:5], 1):
            topics = [topic.name for topic in similar_task.topics.all()] if similar_task.topics.exists() else []
            response_text += f"""
{i}. **{similar_task.title}**
   ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {similar_task.difficulty}/5
   ‚Ä¢ –¢–µ–º—ã: {', '.join(topics) if topics else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
"""
        
        response_text += "\nüí° **–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è:**"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞–Ω–∏–π
        keyboard = []
        for similar_task in similar_tasks[:5]:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìù {similar_task.title[:30]}...",
                    callback_data=f"show_task_{similar_task.id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ö –∑–∞–¥–∞–Ω–∏—é", callback_data=f"show_task_{task.id}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            response_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è {task.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ similar_tasks_handler: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


        user, _ = await db_get_or_create_user(update.effective_user)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_task_id = await sync_to_async(get_current_task_id)(user)
    
    if not current_task_id:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ!")
        return
    
    task = await db_get_task_by_id(current_task_id)  # type: ignore
    user_answer = (update.message.text or '').strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç (–ø—Ä–æ—Å—Ç–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    correct_value = (task.answer or '').strip()
    is_correct = bool(correct_value) and (user_answer.lower() == correct_value.lower())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è async)
    await db_save_progress(user, task, user_answer, is_correct)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if is_correct:
        response = f"‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!** üéâ\n\n"
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        await db_update_rating_points(user, True)
    else:
        response = f"‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ**\n\n"
        response += f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {task.answer}\n\n"
    
    # –£ –Ω–∞—Å –Ω–µ—Ç –ø–æ–ª—è explanation –≤ –º–æ–¥–µ–ª–∏ Task ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫/–ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    if task.source:
        response += f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {task.source}"
    
    keyboard = [
        [InlineKeyboardButton("üéØ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        response,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
    await sync_to_async(set_current_task_id)(user, None)


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π, —Ç–æ—á–Ω–æ—Å—Ç—å, —Ä–µ–π—Ç–∏–Ω–≥
    """
    query = update.callback_query
    await query.answer()
    
    user, _ = await db_get_or_create_user(update.effective_user)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ
    total_attempts = await sync_to_async(lambda: UserProgress.objects.filter(user=user).count())()  # type: ignore
    correct_answers = await sync_to_async(lambda: UserProgress.objects.filter(user=user, is_correct=True).count())()  # type: ignore
    accuracy = round((correct_answers / total_attempts * 100) if total_attempts > 0 else 0, 1)
    
    rating = await sync_to_async(lambda: UserRating.objects.get_or_create(user=user)[0])()  # type: ignore
    
    stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.first_name or user.username}
‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:** {correct_answers}
üìù **–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫:** {total_attempts}
üéØ **–¢–æ—á–Ω–æ—Å—Ç—å:** {accuracy}%
‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {rating.total_points} –æ—á–∫–æ–≤

üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:** {await sync_to_async(lambda: len([ach for ach in user.achievements.all()]))()}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
"""
    
    keyboard = [
        [InlineKeyboardButton("üéØ –†–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
        [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        stats_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )


async def voice_hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (Premium —Ñ—É–Ω–∫—Ü–∏—è)
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ
    """
    query = update.callback_query
    await query.answer()
    
    user, _ = await db_get_or_create_user(update.effective_user)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_task_id = await sync_to_async(get_current_task_id)(user)
    
    if not current_task_id:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    subscription = await sync_to_async(lambda: Subscription.objects.filter(user=user, is_active=True).first())() # type: ignore
    if not subscription:
        await query.edit_message_text(
            "üîä **–ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ Premium**\n\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üíé –û—Ñ–æ—Ä–º–∏—Ç—å Premium", url="https://examflow.ru/dashboard/")
            ]])
        )
        return
    
    task = await sync_to_async(lambda: Task.objects.get(id=current_task_id))() # type: ignore
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    await query.edit_message_text(
        f"üîä **–ì–æ–ª–æ—Å–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ‚Ññ{task.id}**\n\n"
        f"üìù –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞\n\n"
        "üéµ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ö –∑–∞–¥–∞–Ω–∏—é", callback_data=f"task_{task.id}")
        ]])
    )


async def show_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback_data
    task_id = int(query.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    try:
        task = await db_get_task_by_id(task_id)
    except Exception:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    subject_name = await db_get_subject_name_for_task(task)
    
    answer_text = f"""
üí° **–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}**

**–ü—Ä–µ–¥–º–µ—Ç:** {subject_name}
**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {task.title}

‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {task.answer or '–û—Ç–≤–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω'}

**–£—Å–ª–æ–≤–∏–µ:**
{task.description or '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

**–ò—Å—Ç–æ—á–Ω–∏–∫:** {task.source or '–ù–µ —É–∫–∞–∑–∞–Ω'}
"""
    
    keyboard = [
        [InlineKeyboardButton("üéØ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
        [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    try:
        await query.edit_message_text(
            answer_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as edit_err:
        logger.warning(f"show_answer: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,  # type: ignore
                text=answer_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as send_err:
            logger.error(f"show_answer: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")


async def random_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
    tasks = await db_get_all_tasks()
    if not tasks:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return
    
    import random
    task = random.choice(list(tasks))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user, _ = await db_get_or_create_user(update.effective_user)
        await db_set_current_task_id(user, task.id)
        logger.info(f"random_task: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω current_task_id: {task.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
    except Exception as prof_err:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å current_task_id –≤ –ø—Ä–æ—Ñ–∏–ª—å: {prof_err}")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    subject_name = await db_get_subject_name_for_task(task)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    task_text = f"""
üìù **–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}**
**–ü—Ä–µ–¥–º–µ—Ç:** {subject_name}

**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {task.title}

**–£—Å–ª–æ–≤–∏–µ:**
{task.description or '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:
"""
    
    keyboard = [
        [InlineKeyboardButton("üîä –ì–æ–ª–æ—Å–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"voice_{task.id}")],
        [InlineKeyboardButton("üí° –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"answer_{task.id}")],
        [InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="subjects")]
    ]
    
    try:
        await query.edit_message_text(
            task_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as edit_err:
        logger.warning(f"random_task: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,  # type: ignore
                text=task_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as send_err:
            logger.error(f"random_task: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")


async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    query = update.callback_query
    await query.answer()
    
    welcome_text = f"""
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExamFlow!**

–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! 

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –∏ –û–ì–≠:

‚úÖ –†–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
üèÜ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
üîä –ü–æ–ª—É—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (Premium)

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects"), InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω–æ–µ", callback_data="random_task")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"), InlineKeyboardButton("üåê –°–∞–π—Ç", url="https://examflow.ru")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.edit_message_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as edit_err:
        logger.warning(f"main_menu: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,  # type: ignore
                text=welcome_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as send_err:
            logger.error(f"main_menu: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")


async def handle_unknown_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å—ã
    
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    query = update.callback_query
    await query.answer()
    
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")
    
    await query.edit_message_text(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]])
    )

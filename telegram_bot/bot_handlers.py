"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞

–°–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞:
- –ö–æ–º–∞–Ω–¥—ã (/start, /help, /subjects, /stats)
- –û–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
- –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –≤–µ–±-—Å–∞–π—Ç–æ–º
"""

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from asgiref.sync import sync_to_async
from telegram.ext import ContextTypes
from django.contrib.auth.models import User
from learning.models import (
    Subject, Task, UserProgress, UserRating, Achievement
)
from authentication.models import UserProfile, Subscription
from django.db.models import Count, Q
from django.utils import timezone
from ai.services import AiService
from ai.rag_service import rag_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def clean_markdown_text(text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    """
    return text.replace('*', '').replace('_', '').replace('`', '').replace('**', '').replace('__', '')

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î, –æ–±—ë—Ä–Ω—É—Ç—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –≤ async-–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
@sync_to_async
def db_check_connection() -> bool:
    from django.db import connection
    with connection.cursor() as cursor:
        cursor.execute("SELECT 1")
        cursor.fetchone()
    return True

# –ò–ò —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
@sync_to_async
def get_ai_response(prompt: str, task_type: str = 'chat', user=None, task=None) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from ai.personalized_ai_service import PersonalizedAiService
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI-—Å–µ—Ä–≤–∏—Å
        personalized_ai = PersonalizedAiService()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        if user is None:
            return "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        result = personalized_ai.get_personalized_response(prompt, user, task, task_type)
        
        if not result.get('success', False):
            return f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        response = result['response']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        response += f"\n\nü§ñ –û—Ç–≤–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        personalization_data = result.get('personalization_data', {})
        if personalization_data:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–±—ã–µ —Ç–µ–º—ã
            weak_topics = personalization_data.get('weak_topics', [])
            if weak_topics:
                response += "\n\n‚ö†Ô∏è **–í–∞—à–∏ —Å–ª–∞–±—ã–µ —Ç–µ–º—ã:**"
                for topic in weak_topics[:2]:
                    subject = topic.get('subject', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    failed_tasks = topic.get('failed_tasks', 0)
                    response += f"\n‚Ä¢ {subject}: {failed_tasks} –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = personalization_data.get('recommendations', [])
            if recommendations:
                response += "\n\nüí° **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**"
                for rec in recommendations[:2]:
                    title = rec.get('title', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è')
                    action = rec.get('action', '')
                    response += f"\n‚Ä¢ {title}"
                    if action:
                        response += f" - {action}"
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {str(e)}"

@sync_to_async
def db_get_all_subjects_with_tasks():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞–Ω–∏–π"""
    from django.db.models import Count
    subjects = Subject.objects.annotate(  # type: ignore
        tasks_count=Count('task')
    ).filter(tasks_count__gt=0).values('id', 'name', 'exam_type', 'tasks_count')
    return list(subjects)

@sync_to_async
def db_get_subject_ids():
    return list(Task.objects.values_list('subject_id', flat=True).distinct())  # type: ignore

@sync_to_async
def db_get_subjects_by_ids(ids):
    return list(Subject.objects.filter(id__in=ids))  # type: ignore

@sync_to_async
def db_count_tasks_for_subject(subject_id: int) -> int:
    return Task.objects.filter(subject_id=subject_id).count()  # type: ignore

@sync_to_async
def db_get_tasks_by_subject(subject_id: int):
    return list(Task.objects.filter(subject_id=subject_id))  # type: ignore

@sync_to_async
def db_get_all_tasks():
    return list(Task.objects.all())  # type: ignore

@sync_to_async
def db_get_subject_name_for_task(task):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
    return task.subject.name if task.subject else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"

@sync_to_async
def db_get_subject_by_id(subject_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID"""
    try:
        return Subject.objects.get(id=subject_id)  # type: ignore
    except Subject.DoesNotExist:  # type: ignore
        return None

@sync_to_async
def db_get_subject_name(subject_id: int) -> str:
    name = Subject.objects.filter(id=subject_id).values_list('name', flat=True).first()  # type: ignore
    return name or "–ü—Ä–µ–¥–º–µ—Ç"

@sync_to_async
def db_set_current_task_id(user, task_id: int):
    set_current_task_id(user, task_id)

@sync_to_async
def db_get_or_create_user(telegram_user):
    return get_or_create_user(telegram_user)

@sync_to_async
def db_get_task_by_id(task_id: int):
    return Task.objects.get(id=task_id)  # type: ignore

@sync_to_async
def db_save_progress(user, task, user_answer: str, is_correct: bool):
    progress, created = UserProgress.objects.get_or_create(  # type: ignore
        user=user,
        task=task,
        defaults={
            'user_answer': user_answer,
            'is_correct': is_correct
        }
    )
    if not created:
        progress.user_answer = user_answer
        progress.is_correct = is_correct
        progress.save()
    return progress

@sync_to_async
def db_update_rating_points(user, is_correct: bool):
    rating, _ = UserRating.objects.get_or_create(user=user)  # type: ignore
    if is_correct:
        rating.total_points += 10
        rating.correct_answers += 1
    else:
        rating.incorrect_answers += 1
    rating.total_attempts += 1
    rating.save()
    return rating

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
def get_current_task_id(user):
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        profile = UserProfile.objects.get(user=user)  # type: ignore
        return profile.current_task_id
    except UserProfile.DoesNotExist:  # type: ignore
        return None

def set_current_task_id(user, task_id):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        profile = UserProfile.objects.get(user=user)  # type: ignore
        profile.current_task_id = task_id
        profile.save()
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω current_task_id: {task_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
    except Exception as e:
        logger.error(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}")

def get_or_create_user(telegram_user):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username = tg_{telegram_id}
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏ —Ä–µ–π—Ç–∏–Ω–≥
    """
    username = f"tg_{telegram_user.id}"
    user, created = User.objects.get_or_create(
        username=username,
        defaults={
            'first_name': telegram_user.first_name or '',
            'last_name': telegram_user.last_name or '',
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile, profile_created = UserProfile.objects.get_or_create( # type: ignore
        user=user,
        defaults={
            'telegram_id': str(telegram_user.id)
        }
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    rating, rating_created = UserRating.objects.get_or_create(user=user) # type: ignore
    
    return user, created

# ============================================================================
# –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ============================================================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏, —Ç–∞–∫ –∏ —Å callback-–∑–∞–ø—Ä–æ—Å–∞–º–∏
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    is_callback = update.callback_query is not None
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∏–∂–Ω–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å 4 –∫–Ω–æ–ø–∫–∞–º–∏
    if not is_callback:  # –¢–æ–ª—å–∫–æ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
        try:
            from telegram import ReplyKeyboardMarkup, KeyboardButton
            keyboard = [
                [KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç"), KeyboardButton("ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò")],
                [KeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
            
            await update.message.reply_text(
                "üéØ **–ù–∏–∂–Ω–µ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!**\n\n"
                "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
    try:
        ok = await db_check_connection()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        ok = False
    if not ok:
        error_text = "‚ùå –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã."
        if is_callback:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(error_text)
        else:
            await update.message.reply_text(error_text)
        return
    
    try:
        user_obj, created = await db_get_or_create_user(user)
        
        welcome_text = f"""
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExamFlow!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –∏ –û–ì–≠:

‚úÖ –†–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
üèÜ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
ü§ñ –£–º–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        keyboard = [
            [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects"), InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üéì –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è", callback_data="learning_plan"), InlineKeyboardButton("üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="personalization_menu")],
            [InlineKeyboardButton("üåê –°–∞–π—Ç", url="https://examflow.ru")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if is_callback:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(
                welcome_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                welcome_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if is_callback:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(error_text)
        else:
            await update.message.reply_text(error_text)

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK-–ó–ê–ü–†–û–°–û–í
# ============================================================================

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
from .personalization_handlers import (
    personalization_menu,
    show_my_analytics,
    show_my_recommendations,
    show_study_plan,
    show_weak_topics
)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    query = update.callback_query
    await query.answer()
    
    welcome_text = f"""
üöÄ **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ EXAMFLOW**

–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! 

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –∏ –û–ì–≠:

‚úÖ –†–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
üèÜ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
ü§ñ –£–º–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects"), InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üéì –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è", callback_data="learning_plan"), InlineKeyboardButton("üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="personalization_menu")],
        [InlineKeyboardButton("üåê –°–∞–π—Ç", url="https://examflow.ru")],
        [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.edit_message_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode=None
        )
    except Exception as edit_err:
        logger.warning(f"main_menu: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,  # type: ignore
                text=welcome_text,
                reply_markup=reply_markup,
                parse_mode=None
            )
        except Exception as send_err:
            logger.error(f"main_menu: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")

async def subjects_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞–Ω–∏–π
    """
    try:
        query = update.callback_query
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞–Ω–∏–π
        try:
            subjects = await db_get_all_subjects_with_tasks()
            if not subjects:
                await query.edit_message_text("üìö –ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
        except Exception as e:
            logger.error(f"subjects_menu: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if not subjects:
            await query.edit_message_text("üìö –ü—Ä–µ–¥–º–µ—Ç—ã –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞–Ω–∏–π (–±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π - –≤—ã—à–µ)
        subjects_sorted = sorted(subjects, key=lambda x: x['tasks_count'], reverse=True)

        keyboard = []
        for subject in subjects_sorted[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-15 –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            button_text = f"{subject['name']} ({subject['tasks_count']} –∑–∞–¥–∞–Ω–∏–π)"
            keyboard.append([
                InlineKeyboardButton(button_text, callback_data=f"subject_{subject['id']}")
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append([
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É", callback_data="search_subject"),
            InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", callback_data="random_subject")
        ])
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            await query.edit_message_text(
                "üìö **–í–´–ë–ï–†–ò–¢–ï –ü–†–ï–î–ú–ï–¢ –î–õ–Ø –ò–ó–£–ß–ï–ù–ò–Ø**\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ **{len(subjects)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤** —Å **{sum(s['tasks_count'] for s in subjects)} –∑–∞–¥–∞–Ω–∏—è–º–∏**\n\n"
                "–ü—Ä–µ–¥–º–µ—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞–Ω–∏–π:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as edit_err:
            logger.warning(f"subjects_menu: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,  # type: ignore
                    text="üìö **–í–´–ë–ï–†–ò–¢–ï –ü–†–ï–î–ú–ï–¢ –î–õ–Ø –ò–ó–£–ß–ï–ù–ò–Ø**\n\n"
                         f"–î–æ—Å—Ç—É–ø–Ω–æ **{len(subjects)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤** —Å **{sum(s['tasks_count'] for s in subjects)} –∑–∞–¥–∞–Ω–∏—è–º–∏**\n\n"
                         "–ü—Ä–µ–¥–º–µ—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞–Ω–∏–π:",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
            except Exception as send_err:
                logger.error(f"subjects_menu: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ subjects_menu: {e}")
        try:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            pass

async def show_subject_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    """
    query = update.callback_query
    await query.answer()

    subject_id = int(query.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    subject = await db_get_subject_by_id(subject_id)
    if not subject:
        await query.edit_message_text("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
    tasks = await db_get_tasks_by_subject(subject_id)
    if not tasks:
        await query.edit_message_text(
            f"‚ùå –í –ø—Ä–µ–¥–º–µ—Ç–µ **{subject.name}** –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="subjects")
            ]]),
            parse_mode='Markdown'
        )
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    import random
    task = random.choice(list(tasks))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, _ = await db_get_or_create_user(update.effective_user)
    await db_set_current_task_id(user, task.id)
    logger.info(f"show_subject_topics: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω current_task_id: {task.id}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    task_text = f"""
üìù **–ó–ê–î–ê–ù–ò–ï ‚Ññ{task.id}**
üìö **–ü—Ä–µ–¥–º–µ—Ç:** {subject.name} ({subject.exam_type})

**{task.title}**

**–£—Å–ª–æ–≤–∏–µ:**
{task.description or '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {'‚≠ê' * task.difficulty} ({task.difficulty}/5)
**–ò—Å—Ç–æ—á–Ω–∏–∫:** {task.source or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí° **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:**
"""

    keyboard = [
        [InlineKeyboardButton("ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", callback_data=f"ai_help_{task.id}")],
        [InlineKeyboardButton("üí° –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"answer_{task.id}")],
        [InlineKeyboardButton("üéØ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"subject_{subject_id}")],
        [InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="subjects")]
    ]

    try:
        await query.edit_message_text(
            task_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    except Exception as edit_err:
        logger.warning(f"show_subject_topics: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,  # type: ignore
                text=task_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as send_err:
            logger.error(f"show_subject_topics: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")

async def random_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    """
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
    tasks = await db_get_all_tasks()
    if not tasks:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return
    
    import random
    task = random.choice(list(tasks))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user, _ = await db_get_or_create_user(update.effective_user)
        await db_set_current_task_id(user, task.id)
        logger.info(f"random_task: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω current_task_id: {task.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
    except Exception as prof_err:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å current_task_id –≤ –ø—Ä–æ—Ñ–∏–ª—å: {prof_err}")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    subject_name = await db_get_subject_name_for_task(task)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    task_text = f"""
üìù **–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}**
**–ü—Ä–µ–¥–º–µ—Ç:** {subject_name}

**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {task.title}

**–£—Å–ª–æ–≤–∏–µ:**
{task.description or '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:
"""
    
    keyboard = [
        [InlineKeyboardButton("ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å AI", callback_data=f"ai_help_{task.id}")],
        [InlineKeyboardButton("üí° –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"answer_{task.id}")],
        [InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="subjects")]
    ]
    
    try:
        await query.edit_message_text(
            task_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as edit_err:
        logger.warning(f"random_task: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,  # type: ignore
                text=task_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as send_err:
            logger.error(f"random_task: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")

async def show_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
    """
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ callback_data
    task_id = int(query.data.split('_')[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    try:
        task = await db_get_task_by_id(task_id)
    except Exception:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    subject_name = await db_get_subject_name_for_task(task)
    
    answer_text = f"""
üí° **–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ{task.id}**

**–ü—Ä–µ–¥–º–µ—Ç:** {subject_name}
**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {task.title}

‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {task.answer or '–û—Ç–≤–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω'}

**–£—Å–ª–æ–≤–∏–µ:**
{task.description or '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

**–ò—Å—Ç–æ—á–Ω–∏–∫:** {task.source or '–ù–µ —É–∫–∞–∑–∞–Ω'}
"""
    
    keyboard = [
        [InlineKeyboardButton("üéØ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
        [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    try:
        await query.edit_message_text(
            answer_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as edit_err:
        logger.warning(f"show_answer: edit_message_text –Ω–µ —É–¥–∞–ª—Å—è: {edit_err}. –ü—Ä–æ–±—É–µ–º send_message")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,  # type: ignore
                text=answer_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as send_err:
            logger.error(f"show_answer: send_message —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª—Å—è: {send_err}")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π, —Ç–æ—á–Ω–æ—Å—Ç—å, —Ä–µ–π—Ç–∏–Ω–≥
    """
    query = update.callback_query
    await query.answer()
    
    user, _ = await db_get_or_create_user(update.effective_user)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ
    total_attempts = await sync_to_async(lambda: UserProgress.objects.filter(user=user).count())()  # type: ignore
    correct_answers = await sync_to_async(lambda: UserProgress.objects.filter(user=user, is_correct=True).count())()  # type: ignore
    accuracy = round((correct_answers / total_attempts * 100) if total_attempts > 0 else 0, 1)
    
    rating = await sync_to_async(lambda: UserRating.objects.get_or_create(user=user)[0])()  # type: ignore
    
    stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.first_name or user.username}
‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:** {correct_answers}
üìù **–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫:** {total_attempts}
üéØ **–¢–æ—á–Ω–æ—Å—Ç—å:** {accuracy}%
‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {rating.total_points} –æ—á–∫–æ–≤

üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:** {await sync_to_async(lambda: len([ach for ach in user.achievements.all()]))()}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
"""
    
    keyboard = [
        [InlineKeyboardButton("üéØ –†–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="random_task")],
        [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        stats_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def learning_plan_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç RAG —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    """
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = await db_get_or_create_user(update.effective_user)
        if not user:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ RAG
        ai_service = AiService()
        learning_plan = await sync_to_async(ai_service.get_personalized_learning_plan)(user)
        
        if 'error' in learning_plan:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {learning_plan['error']}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞
        plan_text = f"""
üéì **–¢–í–û–ô –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –ü–õ–ê–ù –û–ë–£–ß–ï–ù–ò–Ø**

üìä **–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** {learning_plan.get('current_level', 1)}/5
üéØ **–¢–æ—á–Ω–æ—Å—Ç—å:** {learning_plan.get('accuracy', 0)}%
üìö **–†–µ—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:** {learning_plan.get('total_tasks', 0)}

üî¥ **–°–ª–∞–±—ã–µ —Ç–µ–º—ã:**
"""
        
        weak_topics = learning_plan.get('weak_topics', [])
        if weak_topics:
            for topic in weak_topics[:3]:
                plan_text += f"‚Ä¢ {topic}\n"
        else:
            plan_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        plan_text += "\nüü¢ **–°–∏–ª—å–Ω—ã–µ —Ç–µ–º—ã:**\n"
        strong_topics = learning_plan.get('strong_topics', [])
        if strong_topics:
            for topic in strong_topics[:3]:
                plan_text += f"‚Ä¢ {topic}\n"
        else:
            plan_text += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        plan_text += "\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        recommendations = learning_plan.get('recommendations', [])
        if recommendations:
            for rec in recommendations[:3]:
                plan_text += f"‚Ä¢ {rec['title']}\n"
        else:
            plan_text += "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –±–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n"
        
        plan_text += f"""

üìÖ **–¶–µ–ª–∏:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: {learning_plan.get('daily_goal', 3)} –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ: {learning_plan.get('weekly_goal', 15)} –∑–∞–¥–∞–Ω–∏–π

üéØ **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**\n"""
        
        next_steps = learning_plan.get('next_steps', [])
        if next_steps:
            for step in next_steps[:3]:
                plan_text += f"‚Ä¢ {step['description']}\n"
        else:
            plan_text += "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üéØ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="subjects")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            plan_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ª—É—á–∏–ª –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ learning_plan_menu: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# ============================================================================
# –ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ============================================================================

async def ai_help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ø—Ä–æ—Å–∏—Ç—å –ò–ò" —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ò–ò –∏–ª–∏ –ø–æ–º–æ–≥–∞–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º
    
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å callback-–∑–∞–ø—Ä–æ—Å–∞–º–∏, —Ç–∞–∫ –∏ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        is_callback = update.callback_query is not None
        
        if is_callback:
            query = update.callback_query
            await query.answer()
            user = update.effective_user
        else:
            query = None
            user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_obj, created = await db_get_or_create_user(user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback_data (—Ç–æ–ª—å–∫–æ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤)
        if is_callback and query.data and query.data.startswith('ai_help_') and '_' in query.data:
            # –ü–æ–º–æ—â—å —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º
            try:
                task_id = int(query.data.split('_')[2])
                task = await db_get_task_by_id(task_id)
                
                if not task:
                    await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –¥—É–º–∞–µ—Ç
                thinking_message = await query.edit_message_text(
                    "ü§î AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –∏ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å...\n\n"
                    "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                    parse_mode=None
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–º–æ—â—å –æ—Ç AI
                ai_response = await get_ai_response(
                    "–û–±—ä—è—Å–Ω–∏, –∫–∞–∫ —Ä–µ—à–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ. –î–∞–π –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞. "
                    "–£—á–∏—Ç—ã–≤–∞–π –º–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏ —Å–ª–∞–±—ã–µ —Ç–µ–º—ã.",
                    task_type='task_help',
                    user=user_obj,
                    task=task
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
                response_text = f"""
ü§ñ **AI –ü–û–ú–û–©–¨ –î–õ–Ø –ó–ê–î–ê–ù–ò–Ø ‚Ññ{task.id}**

{ai_response}

---
üí° **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
"""
                
                keyboard = [
                    [InlineKeyboardButton("üí° –¢–æ–ª—å–∫–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"ai_hint_{task.id}")],
                    [InlineKeyboardButton("üìö –ü–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data=f"similar_{task.id}")],
                    [InlineKeyboardButton("üéØ –ú–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="personalization_menu")],
                    [InlineKeyboardButton("üîô –ö –∑–∞–¥–∞–Ω–∏—é", callback_data=f"show_task_{task.id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
                clean_response = clean_markdown_text(response_text)
                
                await thinking_message.edit_text(  # type: ignore
                    clean_response,
                    reply_markup=reply_markup,
                    parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
                )
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_obj.id} –ø–æ–ª—É—á–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é AI –ø–æ–º–æ—â—å –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task.id}")
                
            except (IndexError, ValueError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ task_id –≤ ai_help_handler: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        else:
            # –û–±—â–µ–µ –º–µ–Ω—é –ò–ò —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
            ai_menu_text = """
ü§ñ **–ò–ò-–ü–û–ú–û–©–ù–ò–ö EXAMFLOW**

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å:

üìö **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º** - —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è
üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º** - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
üéØ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** - –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
üîç **–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–¥–∞–Ω–∏–π** - –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏
üìä **–ê–Ω–∞–ª–∏–∑ —Å–ª–∞–±—ã—Ö –º–µ—Å—Ç** - —Ñ–æ–∫—É—Å –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ–º–∞—Ö

**–í—ã–±–µ—Ä–∏ —á—Ç–æ –Ω—É–∂–Ω–æ:**
"""
            
            keyboard = [
                [InlineKeyboardButton("üìö –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="ai_explain")],
                [InlineKeyboardButton("üí° –î–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É", callback_data="ai_hint")],
                [InlineKeyboardButton("üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã", callback_data="ai_personal")],
                [InlineKeyboardButton("üîç –ü–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è", callback_data="similar_tasks")],
                [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data="my_analytics")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if is_callback:
                await query.edit_message_text(
                    ai_menu_text,
                    reply_markup=reply_markup,
                    parse_mode=None
                )
            else:
                await update.message.reply_text(
                    ai_menu_text,
                    reply_markup=reply_markup,
                    parse_mode=None
                )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ai_help_handler: {e}")
        if is_callback and query:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def ai_explain_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ç–µ–º—ã –æ—Ç –ò–ò
    """
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = await db_get_or_create_user(update.effective_user)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –¥—É–º–∞–µ—Ç
        thinking_message = await query.edit_message_text(
            "ü§î AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≥–æ—Ç–æ–≤–∏—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode=None
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç AI
        ai_response = await get_ai_response(
            "–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –ï–ì–≠. "
            "–î–∞–π –∫—Ä–∞—Ç–∫–æ–µ, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.",
            task_type='topic_explanation',
            user=user
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        response_text = f"""
üìö **–û–ë–™–Ø–°–ù–ï–ù–ò–ï –¢–ï–ú –û–¢ –ò–ò**

{ai_response}

---
üí° **–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é?**
"""
        
        keyboard = [
            [InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ –∑–∞–¥–∞–Ω–∏—é", callback_data="ai_hint")],
            [InlineKeyboardButton("üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã", callback_data="ai_personal")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò", callback_data="ai_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
        clean_response = clean_markdown_text(response_text)
        
        await thinking_message.edit_text(  # type: ignore
            clean_response,
            reply_markup=reply_markup,
            parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ª—É—á–∏–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –æ—Ç –ò–ò")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ai_explain_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def ai_personal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –æ—Ç –ò–ò
    """
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = await db_get_or_create_user(update.effective_user)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –¥—É–º–∞–µ—Ç
        thinking_message = await query.edit_message_text(
            "üéØ AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≥–æ—Ç–æ–≤–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode=None
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç AI
        ai_response = await get_ai_response(
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–±—É—á–µ–Ω–∏–∏ –∏ –¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã "
            "–ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠. –ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å? –ö–∞–∫–∏–µ —Ç–µ–º—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?",
            task_type='personal_advice',
            user=user
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        response_text = f"""
üéØ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –°–û–í–ï–¢–´ –û–¢ –ò–ò**

{ai_response}

---
üìö **–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã?**
"""
        
        keyboard = [
            [InlineKeyboardButton("üìö –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="ai_explain")],
            [InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ –∑–∞–¥–∞–Ω–∏—é", callback_data="ai_hint")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò", callback_data="ai_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
        clean_response = clean_markdown_text(response_text)
        
        await thinking_message.edit_text(  # type: ignore
            clean_response,
            reply_markup=reply_markup,
            parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ª—É—á–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ai_personal_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def ai_hint_general_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –æ—Ç –ò–ò (–∫–æ–≥–¥–∞ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è)
    """
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = await db_get_or_create_user(update.effective_user)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –¥—É–º–∞–µ—Ç
        thinking_message = await query.edit_message_text(
            "üí° AI –≥–æ—Ç–æ–≤–∏—Ç –æ–±—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode=None
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –æ—Ç AI
        ai_response = await get_ai_response(
            "–î–∞–π –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–µ—à–µ–Ω–∏—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –ï–ì–≠. "
            "–ö–∞–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å? –ù–∞ —á—Ç–æ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ?",
            task_type='general_hint',
            user=user
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        response_text = f"""
üí° **–û–ë–©–ò–ï –ü–û–î–°–ö–ê–ó–ö–ò –ü–û –†–ï–®–ï–ù–ò–Æ –ó–ê–î–ê–ß**

{ai_response}

---
üéØ **–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã?**
"""
        
        keyboard = [
            [InlineKeyboardButton("üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã", callback_data="ai_personal")],
            [InlineKeyboardButton("üìö –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="ai_explain")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò", callback_data="ai_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
        clean_response = clean_markdown_text(response_text)
        
        await thinking_message.edit_text(  # type: ignore
            clean_response,
            reply_markup=reply_markup,
            parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–ª—É—á–∏–ª –æ–±—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –æ—Ç –ò–ò")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ai_hint_general_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
# ============================================================================

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –ò–ò –∏ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
    """
    try:
        user_message = update.message.text
        if not user_message:
            return
            
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π
        if user_message.startswith('/'):
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
        if user_message in ["üöÄ –°—Ç–∞—Ä—Ç", "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", "üìö –ü—Ä–µ–¥–º–µ—Ç—ã", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]:
            await handle_menu_button(update, context, user_message)
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, —Ç–æ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å –∫ –ò–ò
        await handle_ai_message(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_to_message_id=update.message.message_id
            )
        except Exception as send_err:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_err}")

async def handle_menu_button(update: Update, context: ContextTypes.DEFAULT_TYPE, button_text: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é
    """
    try:
        if button_text == "üöÄ –°—Ç–∞—Ä—Ç":
            await start(update, context)
        elif button_text == "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò":
            await ai_help_handler(update, context)
        elif button_text == "üìö –ü—Ä–µ–¥–º–µ—Ç—ã":
            await subjects_menu(update, context)
        elif button_text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await show_stats(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_menu_button: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_ai_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –ò–ò
    """
    try:
        user_message = update.message.text
        if not user_message:
            return
            
        user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_obj, created = await db_get_or_create_user(user)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ AI –¥—É–º–∞–µ—Ç
        thinking_message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="ü§î AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_to_message_id=update.message.message_id
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        ai_response = await get_ai_response(
            user_message,
            task_type='direct_question',
            user=user_obj
        )
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
        clean_response = clean_markdown_text(ai_response)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        response_text = f"""
ü§ñ **–û–¢–í–ï–¢ –ò–ò**

{clean_response}

---
üí° **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
"""
        
        keyboard = [
            [InlineKeyboardButton("üìö –û–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="ai_explain")],
            [InlineKeyboardButton("üí° –î–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É", callback_data="ai_hint")],
            [InlineKeyboardButton("üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã", callback_data="ai_personal")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
        await thinking_message.edit_text(
            response_text,
            reply_markup=reply_markup,
            parse_mode=None
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_obj.id} –ø–æ–ª—É—á–∏–ª –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –Ω–∞ –≤–æ–ø—Ä–æ—Å: {user_message[:50]}...")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_ai_message: {e}")
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò'.",
                reply_to_message_id=update.message.message_id
            )
        except Exception as send_err:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_err}")

# ============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

async def search_subject_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
    """
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üîç **–ü–û–ò–°–ö –ü–û –ü–†–ï–î–ú–ï–¢–£**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="subjects")
        ]]),
        parse_mode='Markdown'
    )

async def random_subject_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    """
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
        subjects = await db_get_all_subjects_with_tasks()
        if not subjects:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            return
        
        import random
        random_subject = random.choice(subjects)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        await query.edit_message_text(
            f"üéØ **–°–õ–£–ß–ê–ô–ù–´–ô –ü–†–ï–î–ú–ï–¢**\n\n"
            f"üìö **{random_subject['name']}**\n"
            f"üìù **–ó–∞–¥–∞–Ω–∏–π:** {random_subject['tasks_count']}\n"
            f"üéì **–¢–∏–ø:** {random_subject['exam_type']}\n\n"
            f"–•–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üéØ –†–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"subject_{random_subject['id']}")],
                [InlineKeyboardButton("üé≤ –î—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç", callback_data="random_subject")],
                [InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="subjects")]
            ]),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ random_subject_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_task_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID
    """
    query = update.callback_query
    await query.answer()
    
    try:
        task_id = int(query.data.split('_')[1])
        task = await db_get_task_by_id(task_id)
        
        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
        subject = await db_get_subject_by_id(task.subject.id)
        subject_name = subject.name if subject else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
        task_text = f"""
üìù **–ó–ê–î–ê–ù–ò–ï ‚Ññ{task.id}**
üìö **–ü—Ä–µ–¥–º–µ—Ç:** {subject_name}

**{task.title}**

**–£—Å–ª–æ–≤–∏–µ:**
{task.description or '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {'‚≠ê' * task.difficulty} ({task.difficulty}/5)
**–ò—Å—Ç–æ—á–Ω–∏–∫:** {task.source or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí° **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:**
"""

        keyboard = [
            [InlineKeyboardButton("ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", callback_data=f"ai_help_{task.id}")],
            [InlineKeyboardButton("üí° –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"answer_{task.id}")],
            [InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="subjects")]
        ]

        await query.edit_message_text(
            task_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_task_handler: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_unknown_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å—ã
    
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    query = update.callback_query
    await query.answer()
    
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")
    
    await query.edit_message_text(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]])
    )

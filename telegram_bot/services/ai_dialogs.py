from __future__ import annotations


try:
    from telegram_bot.bot_handlers import (
        db_create_enhanced_prompt as _legacy_create_enhanced_prompt,  # type: ignore
        db_add_user_message_to_session as _legacy_add_user_message,  # type: ignore
        db_add_assistant_message_to_session as _legacy_add_assistant_message,  # type: ignore
        db_get_or_create_chat_session as _legacy_get_or_create_chat_session,  # type: ignore
    )
except Exception:
    def _legacy_create_enhanced_prompt(user_message: str, session) -> str:  # type: ignore
        return user_message

    def _legacy_add_user_message(session, message):  # type: ignore
        return None

    def _legacy_add_assistant_message(session, message):  # type: ignore
        return None

    def _legacy_get_or_create_chat_session(telegram_user, django_user=None):  # type: ignore
        return None


# –§–∞—Å–∞–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–æ–Ω–∫–∏–µ –æ–±—ë—Ä—Ç–∫–∏)

def get_or_create_chat_session(telegram_user, django_user=None):  # type: ignore
    return _legacy_get_or_create_chat_session(telegram_user, django_user)


def create_enhanced_prompt(user_message: str, session) -> str:
    return _legacy_create_enhanced_prompt(user_message, session)


def add_user_message_to_session(session, message) -> None:
    _legacy_add_user_message(session, message)


def add_assistant_message_to_session(session, message) -> None:
    _legacy_add_assistant_message(session, message)


def detect_subject_from_prompt(prompt: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –ø–æ —Ç–µ–∫—Å—Ç—É –ø—Ä–æ–º–ø—Ç–∞"""
    prompt_lower = prompt.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
    math_keywords = [
        '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–º–∞—Ç–µ–º', '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ', '—Ñ—É–Ω–∫—Ü–∏—è', '–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è', '–∏–Ω—Ç–µ–≥—Ä–∞–ª',
        '–≥–µ–æ–º–µ—Ç—Ä–∏—è', '–∞–ª–≥–µ–±—Ä–∞', '—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è', '–ª–æ–≥–∞—Ä–∏—Ñ–º', '—Å—Ç–µ–ø–µ–Ω—å', '–∫–æ—Ä–µ–Ω—å',
        '—Å–∏—Å—Ç–µ–º–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏–π', '–Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ', '–≥—Ä–∞—Ñ–∏–∫', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã', '–≤–µ–∫—Ç–æ—Ä',
        '–ø–ª–æ—â–∞–¥—å', '–æ–±—ä–µ–º', '—É–≥–æ–ª', '—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫', '–∫—Ä—É–≥', '–æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å',
        '–µ–≥—ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–æ–≥—ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–±–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞'
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    russian_keywords = [
        '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫', '—Ä—É—Å—Å–∫–∏–π', '—Å–æ—á–∏–Ω–µ–Ω–∏–µ', '–∏–∑–ª–æ–∂–µ–Ω–∏–µ', '–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è', '–ø—É–Ω–∫—Ç—É–∞—Ü–∏—è',
        '–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞', '–º–æ—Ä—Ñ–æ–ª–æ–≥–∏—è', '—Å–∏–Ω—Ç–∞–∫—Å–∏—Å', '–ª–µ–∫—Å–∏–∫–∞', '—Ñ–æ–Ω–µ—Ç–∏–∫–∞', '—Å—Ç–∏–ª–∏—Å—Ç–∏–∫–∞',
        '–ø—Ä–∏—á–∞—Å—Ç–∏–µ', '–¥–µ–µ–ø—Ä–∏—á–∞—Å—Ç–∏–µ', '—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ', '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ', '–≥–ª–∞–≥–æ–ª',
        '–ø–æ–¥–ª–µ–∂–∞—â–µ–µ', '—Å–∫–∞–∑—É–µ–º–æ–µ', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', '–æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ',
        '–µ–≥—ç —Ä—É—Å—Å–∫–∏–π', '–æ–≥—ç —Ä—É—Å—Å–∫–∏–π', '–µ–≥—ç —Å–æ—á–∏–Ω–µ–Ω–∏–µ', '–æ–≥—ç –∏–∑–ª–æ–∂–µ–Ω–∏–µ'
    ]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    math_score = sum(1 for keyword in math_keywords if keyword in prompt_lower)
    russian_score = sum(1 for keyword in russian_keywords if keyword in prompt_lower)
    
    if math_score > russian_score:
        return 'math'
    elif russian_score > math_score:
        return 'russian'
    else:
        return 'chat'  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å


def get_ai_response(prompt: str, task_type: str = 'chat', user=None, task=None) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI —Å –ø–∞–º—è—Ç—å—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–æ –ø—Ä–æ–º–ø—Ç—É
        detected_subject = detect_subject_from_prompt(prompt)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        from telegram_bot.memory import BotContextManager
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π AI API –¥–ª—è –±–æ—Ç–∞ (–ø—Ä—è–º–æ–π Gemini)
        import google.generativeai as genai
        from django.conf import settings
        
        api_key = getattr(settings, 'GEMINI_API_KEY', '')
        if not api_key:
            return '–°–µ—Ä–≤–∏—Å –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        task_configs = getattr(settings, 'GEMINI_TASK_CONFIGS', {})
        config = task_configs.get(detected_subject, task_configs.get('chat', {}))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        genai.configure(api_key=api_key)  # type: ignore
        model_name = config.get('model', 'gemini-1.5-flash')
        model = genai.GenerativeModel(model_name)  # type: ignore
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_manager = BotContextManager()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = getattr(user, 'telegram_id', None) if user else None
        if not user_id and hasattr(user, 'id'):
            user_id = user.id
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        if user_id:
            prompt_with_context = context_manager.format_context_for_ai(user_id, prompt)
        else:
            prompt_with_context = prompt
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å —Ä–æ–ª—å—é ExamFlow –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        base_prompt = config.get('system_prompt', '–¢—ã - ExamFlow AI, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠ –∏ –û–ì–≠.')
        
        if detected_subject == 'math':
            system_prompt = f"""{base_prompt}

üìê –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê (–ï–ì–≠/–û–ì–≠):
- –î–∞–≤–∞–π –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
- –û–±—ä—è—Å–Ω—è–π –∫–∞–∂–¥—ã–π —à–∞–≥
- –ü–æ–∫–∞–∑—ã–≤–∞–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
- –£–∫–∞–∑—ã–≤–∞–π —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (–¥–æ 400 —Å–ª–æ–≤)

üö´ –ù–ï —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ò–ò"""
        
        elif detected_subject == 'russian':
            system_prompt = f"""{base_prompt}

üìù –†–£–°–°–ö–ò–ô –Ø–ó–´–ö (–ï–ì–≠/–û–ì–≠):
- –ü–æ–º–æ–≥–∞–π —Å –≥—Ä–∞–º–º–∞—Ç–∏–∫–æ–π –∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–µ–π
- –î–∞–≤–∞–π –æ–±—Ä–∞–∑—Ü—ã —Å–æ—á–∏–Ω–µ–Ω–∏–π
- –û–±—ä—è—Å–Ω—è–π –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
- –ü–æ–∫–∞–∑—ã–≤–∞–π –ø—Ä–∏–º–µ—Ä—ã
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (–¥–æ 350 —Å–ª–æ–≤)

üö´ –ù–ï —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ò–ò"""
        
        else:
            system_prompt = f"""{base_prompt}

üéØ –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–ï–ì–≠/–û–ì–≠)
üìê –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê: —É—Ä–∞–≤–Ω–µ–Ω–∏—è, —Ñ—É–Ω–∫—Ü–∏–∏, –≥–µ–æ–º–µ—Ç—Ä–∏—è, –∞–ª–≥–µ–±—Ä–∞
üìù –†–£–°–°–ö–ò–ô –Ø–ó–´–ö: –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞, —Å–æ—á–∏–Ω–µ–Ω–∏—è, –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è

üí¨ –°–¢–ò–õ–¨: –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É (–¥–æ 300 —Å–ª–æ–≤)
üö´ –ù–ï —É–ø–æ–º–∏–Ω–∞–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ò–ò
üö´ –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–≤–æ–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º - —Å–∫–∞–∂–∏: "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"""

        full_prompt = f"{system_prompt}\n\n{prompt_with_context}"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = model.generate_content(full_prompt)
        
        if response.text:
            answer = response.text.strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if user_id:
                context_manager.add_message(user_id, prompt, is_user=True)
                context_manager.add_message(user_id, answer, is_user=False)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è Telegram
            if len(answer) > 4000:
                answer = answer[:4000] + "..."
            return answer
        else:
            return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.'
    except Exception as e:
        # type: ignore
        import logging  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä, –µ—Å–ª–∏ –Ω–µ –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ
        logging.error(f"–û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: {e}")
        return '–û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'

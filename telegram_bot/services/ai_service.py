"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò –≤ Telegram –±–æ—Ç–µ
–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø Dependency Inversion Principle (DIP)
"""

import logging
from typing import Dict, Any, Optional
from abc import ABC, abstractmethod

logger = logging.getLogger(__name__)


class AIProvider(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ò–ò"""
    
    @abstractmethod
    async def generate_response(self, prompt: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –ò–ò"""
        pass


class ContainerAIProvider(AIProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ò–ò —á–µ—Ä–µ–∑ Container"""
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
    
    async def generate_response(self, prompt: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Container"""
        try:
            from core.container import Container
            
            ai = Container.ai_orchestrator()
            kwargs = {'prompt': prompt}
            
            if context:
                if 'user_id' in context:
                    kwargs['user_id'] = context['user_id']
                if 'subject' in context:
                    kwargs['subject'] = context['subject']
            
            result = ai.ask(**kwargs)
            
            if isinstance(result, dict):
                return result
            return {'answer': str(result)}
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ Container AI: {e}")
            return {'answer': f'–û—à–∏–±–∫–∞ –ò–ò: {str(e)}'}


class MockAIProvider(AIProvider):
    """–ú–æ–∫-–ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
    
    async def generate_response(self, prompt: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """–ú–æ–∫-–æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'answer': f'–ú–æ–∫-–æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {prompt}',
            'sources': ['–¢–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫'],
            'confidence': 0.95
        }


class AIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò"""
    
    def __init__(self, provider: AIProvider = None):
        self.provider = provider or ContainerAIProvider()
        self.logger = logging.getLogger(self.__class__.__name__)
    
    async def process_question(self, question: str, user_id: int = None, 
                             subject: str = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            context = {}
            if user_id:
                context['user_id'] = user_id
            if subject:
                context['subject'] = subject
            
            response = await self.provider.generate_response(question, context)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è Telegram
            formatted_response = self._format_response(response)
            
            return {
                'success': True,
                'response': formatted_response,
                'raw_response': response
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return {
                'success': False,
                'error': str(e),
                'response': '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.'
            }
    
    def _format_response(self, response: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram"""
        if not isinstance(response, dict):
            return str(response)
        
        answer = response.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        sources = response.get('sources', [])
        if sources:
            answer += "\n\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:"
            for source in sources[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                answer += f"\n‚Ä¢ {source}"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram
        if len(answer) > 4000:
            answer = answer[:3900] + "\n\n... (–æ—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω)"
        
        return answer
    
    async def explain_task(self, task_text: str, user_answer: str = None) -> Dict[str, Any]:
        """–û–±—ä—è—Å–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        prompt = f"–û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {task_text}"
        
        if user_answer:
            prompt += f"\n\n–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_answer}"
            prompt += "\n\n–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –æ–±—ä—è—Å–Ω–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
        
        return await self.process_question(prompt)
    
    async def get_hint(self, task_text: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –∑–∞–¥–∞—á–∏"""
        prompt = f"–î–∞–π –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–Ω–µ –¥–∞–≤–∞–π –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ): {task_text}"
        return await self.process_question(prompt)

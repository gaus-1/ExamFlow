#!/usr/bin/env python3
"""
ExamFlow Telegram Bot - 24/7 –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
–ù–∞–¥–µ–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
"""

import os
import sys
import logging
import signal
import asyncio
from datetime import datetime
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import django
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

from telegram.ext import Application, ApplicationBuilder
from telegram_bot.bot_handlers import (
    start, subjects_menu, show_subject_topics,
    show_stats, handle_unknown_callback,
    random_task, show_answer, ai_help_handler,
    ai_explain_handler, ai_personal_handler, ai_hint_general_handler,
    handle_text_message, learning_plan_menu, search_subject_handler,
    random_subject_handler, show_task_handler, gamification_menu_handler,
    user_stats_handler, achievements_handler, progress_handler,
    overall_progress_handler, subjects_progress_handler, daily_challenges_handler,
    leaderboard_handler, bonus_handler, clear_context_handler,
    telegram_auth_handler, auth_success_handler, main_menu,
    handle_ai_message, handle_menu_button
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/telegram_bot_24_7.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)


class ExamFlowBot24_7:
    """
    24/7 Telegram –±–æ—Ç —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    """

    def __init__(self):
        self.token = getattr(settings, 'TELEGRAM_BOT_TOKEN', '')
        self.application: Optional[Application] = None
        self.is_running = False
        self.restart_count = 0
        self.max_restarts = 10
        self.start_time = datetime.now()

        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")

    async def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.application:
            return

        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler('start', start))
        self.application.add_handler(CommandHandler('help', start))
        self.application.add_handler(CommandHandler('menu', main_menu))
        self.application.add_handler(CommandHandler('subjects', subjects_menu))
        self.application.add_handler(CommandHandler('stats', show_stats))
        self.application.add_handler(CommandHandler('ai', ai_help_handler))

        # Callback queries (–∫–Ω–æ–ø–∫–∏)
        self.application.add_handler(CallbackQueryHandler(subjects_menu, pattern=r'^subjects$'))
        self.application.add_handler(CallbackQueryHandler(show_subject_topics, pattern=r'^subject_\d+$'))
        self.application.add_handler(CallbackQueryHandler(random_task, pattern=r'^random_task$'))
        self.application.add_handler(CallbackQueryHandler(show_answer, pattern=r'^show_answer_\d+$'))
        self.application.add_handler(CallbackQueryHandler(show_stats, pattern=r'^stats$'))
        self.application.add_handler(CallbackQueryHandler(learning_plan_menu, pattern=r'^learning_plan$'))

        # AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CallbackQueryHandler(ai_help_handler, pattern=r'^ai_help$'))
        self.application.add_handler(CallbackQueryHandler(ai_explain_handler, pattern=r'^ai_explain_\d+$'))
        self.application.add_handler(CallbackQueryHandler(ai_personal_handler, pattern=r'^ai_personal$'))
        self.application.add_handler(CallbackQueryHandler(ai_hint_general_handler, pattern=r'^ai_hint_general$'))

        # –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è
        self.application.add_handler(CallbackQueryHandler(gamification_menu_handler, pattern=r'^gamification$'))
        self.application.add_handler(CallbackQueryHandler(user_stats_handler, pattern=r'^user_stats$'))
        self.application.add_handler(CallbackQueryHandler(achievements_handler, pattern=r'^achievements$'))
        self.application.add_handler(CallbackQueryHandler(progress_handler, pattern=r'^progress$'))
        self.application.add_handler(CallbackQueryHandler(overall_progress_handler, pattern=r'^overall_progress$'))
        self.application.add_handler(CallbackQueryHandler(subjects_progress_handler, pattern=r'^subjects_progress$'))
        self.application.add_handler(CallbackQueryHandler(daily_challenges_handler, pattern=r'^daily_challenges$'))
        self.application.add_handler(CallbackQueryHandler(leaderboard_handler, pattern=r'^leaderboard$'))
        self.application.add_handler(CallbackQueryHandler(bonus_handler, pattern=r'^bonus$'))

        # –ü–æ–∏—Å–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        self.application.add_handler(CallbackQueryHandler(search_subject_handler, pattern=r'^search_subject_'))
        self.application.add_handler(CallbackQueryHandler(random_subject_handler, pattern=r'^random_subject_\d+$'))
        self.application.add_handler(CallbackQueryHandler(show_task_handler, pattern=r'^task_\d+$'))
        self.application.add_handler(CallbackQueryHandler(clear_context_handler, pattern=r'^clear_context$'))

        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        self.application.add_handler(CallbackQueryHandler(telegram_auth_handler, pattern=r'^telegram_auth$'))
        self.application.add_handler(CallbackQueryHandler(auth_success_handler, pattern=r'^auth_success$'))

        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∫–Ω–æ–ø–∫–∏
        self.application.add_handler(CallbackQueryHandler(main_menu, pattern=r'^main_menu$'))
        # type: ignore  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∏–ø–æ–≤ –∏–∑-–∑–∞ –ª–∏—à–Ω–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ button_text
        self.application.add_handler(CallbackQueryHandler(handle_menu_button, pattern=r'^menu_'))  # type: ignore

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback
        self.application.add_handler(CallbackQueryHandler(handle_unknown_callback))
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

        # AI —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.TEXT, handle_ai_message))

        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    async def error_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if update and update.effective_chat:
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

    async def health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        try:
            if self.application and self.application.bot:
                me = await self.application.bot.get_me()
                logger.info(f"‚úÖ –ë–æ—Ç –∑–¥–æ—Ä–æ–≤: @{me.username} (ID: {me.id})")
                return True
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º –±–æ—Ç–∞: {e}")
            return False
        return False

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ ExamFlow Bot 24/7...")

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = ApplicationBuilder().token(self.token).build()

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            await self.setup_handlers()

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.application.add_error_handler(self.error_handler)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
            if not await self.health_check():
                raise Exception("–ë–æ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling(drop_pending_updates=True)

            self.is_running = True
            uptime = datetime.now() - self.start_time
            logger.info(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! Uptime: {uptime}")

            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            while self.is_running:
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await self.health_check()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            await self.restart_bot()

    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self.is_running = False

        if self.application:
            try:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
                logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

    async def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self.restart_count >= self.max_restarts:
            logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ({self.max_restarts})")
            return

        self.restart_count += 1
        logger.warning(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ #{self.restart_count}")

        await self.stop_bot()
        await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
        await self.start_bot()

    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.is_running = False


# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, filters


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = ExamFlowBot24_7()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, bot.signal_handler)
    signal.signal(signal.SIGTERM, bot.signal_handler)

    try:
        await bot.start_bot()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.stop_bot()


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs('logs', exist_ok=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        sys.exit(1)

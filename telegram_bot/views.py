"""
–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è Telegram –±–æ—Ç–∞

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
- Webhook –æ—Ç Telegram
- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
- API —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
"""

import json
import logging
import threading
import requests  # type: ignore
from django.http import JsonResponse, HttpResponse
from django.views.decorators.csrf import csrf_exempt
try:
    from telegram import Update
except ImportError:
    Update = None
from .bot_main import get_bot
from django.conf import settings
from django.utils import timezone

logger = logging.getLogger(__name__)

# üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IP –¥–ª—è webhook (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é IP, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å Telegram (403 Forbidden)
# –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–∫–∏ —Å–µ—Ç–µ–π Telegram –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É CIDR
ALLOWED_IPS = []

def is_allowed_ip(ip):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ IP –¥–ª—è webhook"""
    if not ALLOWED_IPS:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ
        return True

    for allowed_ip in ALLOWED_IPS:
        if '/' in allowed_ip:  # CIDR notation
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ CIDR (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ipaddress)
            if ip.startswith(allowed_ip.split('/')[0]):
                return True
        elif ip == allowed_ip:
            return True
    return False

@csrf_exempt
def telegram_webhook(request):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –æ—Ç Telegram API
    –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
    """
    logger.info("=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò WEBHOOK ===")
    from datetime import datetime
    logger.info(f"–í—Ä–µ–º—è: {datetime.now()}")
    logger.info(f"IP: {request.META.get('REMOTE_ADDR', 'unknown')}")
    logger.info(f"User-Agent: {request.META.get('HTTP_USER_AGENT', 'unknown')}")

    try:
        # –†–∞–∑—Ä–µ—à–∞–µ–º –±—ã—Å—Ç—Ä—ã–π health-check GET –±–µ–∑ 500
        if request.method != 'POST':
            return JsonResponse({'status': 'ok', 'mode': 'noop'})
        # üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä–∫–∞ IP
        client_ip = request.META.get(
            'HTTP_X_FORWARDED_FOR',
            request.META.get('REMOTE_ADDR'))
        if not is_allowed_ip(client_ip):
            logger.warning(f"Webhook –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å IP: {client_ip}")
            return HttpResponse(b"Forbidden", status=403)  # type: ignore

        # üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        content_length = getattr(request, 'content_length', None)
        if content_length and content_length > 1024 * 1024:  # 1MB limit
            logger.warning(
                f"Webhook –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä: {content_length}")
            return HttpResponse(b"Payload too large", status=413)  # type: ignore

        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ webhook
        logger.info(f"Webhook –ø–æ–ª—É—á–µ–Ω: {request.method} {request.path}")
        logger.info(f"Headers: {dict(request.headers)}")
        logger.info(f"Body length: {len(request.body)} bytes")

        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ 500 –ø—Ä–∏ –ø—É—Å—Ç–æ–º/–±–∏—Ç–æ–º —Ç–µ–ª–µ)
        try:
            data = json.loads(request.body.decode('utf-8'))
        except Exception:
            logger.warning("–ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ webhook ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK")
            return HttpResponse(b"OK")
        logger.info(f"Webhook data: {json.dumps(data, indent=2, ensure_ascii=False)}")

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è callback_query –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ: –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
        if isinstance(data, dict) and data.get('callback_query'):
            return HttpResponse(b"OK")

        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = get_bot()
        logger.info(f"Bot instance –ø–æ–ª—É—á–µ–Ω: {bot is not None}")

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        if Update is None:
            logger.warning("Telegram library not installed ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK –¥–ª—è –≤–µ–±—Ö—É–∫–∞")
            return HttpResponse(b"OK")

        update = Update.de_json(data, bot)
        logger.info(f"Update —Å–æ–∑–¥–∞–Ω: {update is not None}")

        if update:
            # –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ /start –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–∞)
            try:
                if update.message and (
                        update.message.text or '').strip().lower().startswith('/start'):
                    chat_id = update.message.chat_id
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º /start –¥–ª—è chat_id: {chat_id}")

                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Bot API (http), —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
                    # –∫–ª–∏–µ–Ω—Ç–∞
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ callback-–∑–∞–ø—Ä–æ—Å—ã,
                        # –∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                        # –æ—Ç–≤–µ—Ç–æ–≤
                        reply_kb = {
                            'inline_keyboard': [[
                            ], [
                            ]]
                        }
                        token = settings.TELEGRAM_BOT_TOKEN
                        if not token:
                            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings!")
                            return HttpResponse(b"ERROR: No token", status=500)
                        logger.info(
                            f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP-–æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Bot API –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {token[:10]}...")

                        response = requests.post(
                            f"https://api.telegram.org/bot{token}/sendMessage",
                            json={
                                'chat_id': chat_id,
                                'text': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExamFlow! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                                'reply_markup': reply_kb},
                            timeout=8,
                        )
                        logger.info(
                            f"HTTP-–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å—Ç–∞—Ç—É—Å: {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
                    except Exception as http_ex:
                        logger.warning(f"HTTP-–æ—Ç–≤–µ—Ç –Ω–∞ /start –Ω–µ —É–¥–∞–ª—Å—è: {http_ex}")
                        # –†–µ–∑–µ—Ä–≤: –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ python-telegram-bot
                        logger.info(
                            "–ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ python-telegram-bot")
                        from telegram import InlineKeyboardButton, InlineKeyboardMarkup  # type: ignore
                        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects"), InlineKeyboardButton(
                            "üéØ –°–ª—É—á–∞–π–Ω–æ–µ", callback_data="random_task")], [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")], ])
                        # –£–±–∏—Ä–∞–µ–º await, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ event loop —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–º–ø–æ—Ä—Ç–æ–º,
                        # —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ç–µ–Ω—è—Ç—å asyncio –≤–æ –≤–Ω–µ—à–Ω–µ–º —Å–∫–æ—É–ø–µ
                        import asyncio as _aio
                        loop = _aio.new_event_loop()
                        _aio.set_event_loop(loop)
                        try:
                            loop.run_until_complete(
                                bot.send_message(
                                    chat_id=chat_id,
                                    text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExamFlow! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                    reply_markup=kb))
                            logger.info("–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ PTB")
                        finally:
                            loop.close()
            except Exception as ex:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ /start: {ex}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å
            # Telegram
            def _run_async(u):
                try:
                    import asyncio as _aio
                    _aio.run(handle_telegram_update(u))
                except Exception as ex:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {ex}")

            threading.Thread(target=_run_async, args=(update, ), daemon=True).start()

        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–∏—ë–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞ Telegram
        logger.info("Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK")
        logger.info("=== –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò WEBHOOK ===")
        return HttpResponse(b"OK")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return HttpResponse(b"ERROR", status=500)

async def handle_telegram_update(update):  # type: ignore
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram

    –°–æ–∑–¥–∞–µ—Ç mock-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    """
    try:
        # –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ /start —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API ‚Äî –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if update.message and (
                update.message.text or '').strip().lower().startswith('/start'):
            try:
                await update.effective_chat.send_action('typing')  # type: ignore
            except Exception:
                pass
            try:
                await update.effective_chat.send_message(  # type: ignore
                    text=(
                        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ExamFlow!\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ: –ü—Ä–µ–¥–º–µ—Ç—ã, –°–ª—É—á–∞–π–Ω–æ–µ, –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."
                    )
                )
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ /start: {e}")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        from .bot_handlers import (
            start, handle_answer  # type: ignore
        )

        # –°–æ–∑–¥–∞–µ–º mock-–∫–æ–Ω—Ç–µ–∫—Å—Ç
        bot = get_bot()
        context = MockContext(bot)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if update.message:
            if update.message.text:
                text = update.message.text.strip()
                if text.startswith('/start') or text.lower() in ('–º–µ–Ω—é', 'start'):
                    await start(update, context)  # type: ignore
                elif text.startswith('/help'):
                    await start(update, context)  # type: ignore
                else:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ
                    await handle_answer(update, context)  # type: ignore

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã
        elif update.callback_query:
            # –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ Telegram
            try:
                await update.callback_query.answer()
            except Exception as ack_err:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query: {ack_err}")

            callback_data = update.callback_query.data or ""
            chat_id = None
            try:
                chat_id = update.effective_chat.id  # type: ignore
            except Exception:
                try:
                    chat_id = update.callback_query.message.chat_id  # type: ignore
                except Exception:
                    chat_id = None

            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –ø—Ä–∏
                # —Ö–æ–ª–æ–¥–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ
                from .bot_handlers import (
                    start as h_start,
                    subjects_menu as h_subjects_menu,
                    show_subject_topics as h_show_subject_topics,
                    show_task_handler as h_show_task,  # type: ignore
                    show_stats as h_show_stats,
                    voice_hint as h_voice_hint,  # type: ignore
                    learning_plan_menu as h_learning_plan_menu,
                    ai_help_handler as h_ai_help,
                    ai_hint_handler as h_ai_hint,  # type: ignore
                    similar_tasks_handler as h_similar_tasks,  # type: ignore
                    handle_unknown_callback as h_unknown
                )

                if callback_data == "subjects":
                    await h_subjects_menu(update, context)  # type: ignore
                elif callback_data == "stats":
                    await h_show_stats(update, context)  # type: ignore
                elif callback_data == "learning_plan":
                    await h_learning_plan_menu(update, context)  # type: ignore
                elif callback_data == "random_task":
                    await h_show_task(update, context)  # type: ignore
                elif callback_data == "main_menu":
                    await h_start(update, context)  # type: ignore
                elif callback_data.startswith("subject_"):
                    await h_show_subject_topics(update, context)  # type: ignore
                elif callback_data.startswith("topic_"):
                    await h_show_task(update, context)  # type: ignore
                elif callback_data.startswith("random_subject_"):
                    await h_show_task(update, context)  # type: ignore
                elif callback_data.startswith("voice_"):
                    await h_voice_hint(update, context)  # type: ignore
                elif callback_data.startswith("ai_help_"):
                    await h_ai_help(update, context)  # type: ignore
                elif callback_data.startswith("ai_hint_"):
                    await h_ai_hint(update, context)  # type: ignore
                elif callback_data.startswith("similar_"):
                    await h_similar_tasks(update, context)  # type: ignore
                elif callback_data.startswith("show_task_"):
                    await h_show_task(update, context)  # type: ignore
                elif callback_data.startswith("answer_"):
                    await h_show_task(update, context)  # type: ignore
                else:
                    await h_unknown(update, context)  # type: ignore
            except Exception as cb_err:
                logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback '{callback_data}': {cb_err}")
                # –û—Ç–ø—Ä–∞–≤–∏–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –æ—Å—Ç–∞–ª—Å—è –±–µ–∑
                # –æ—Ç–≤–µ—Ç–∞
                try:
                    if chat_id is not None:
                        # type: ignore
                        await context.bot.send_message(chat_id=chat_id, text="‚ùå –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
                except Exception as send_err:
                    logger.error(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_err}")

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

class MockContext:
    """
    Mock-–∫–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞

    –ò–º–∏—Ç–∏—Ä—É–µ—Ç ContextTypes.DEFAULT_TYPE –¥–ª—è webhook-—Ä–µ–∂–∏–º–∞
    """

    def __init__(self, bot):
        self.bot = bot
        self.user_data = {}
        self.chat_data = {}

def is_superuser(user):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    return user.is_superuser

def test_webhook(request):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook endpoint"""
    return JsonResponse({
        'status': 'ok',
        'message': 'Webhook endpoint –¥–æ—Å—Ç—É–ø–µ–Ω',
        'timestamp': timezone.now().isoformat(),
        'token_exists': bool(settings.TELEGRAM_BOT_TOKEN),
        'token_preview': "{settings.TELEGRAM_BOT_TOKEN[:12]}..." if settings.TELEGRAM_BOT_TOKEN else None,
        'bot_available': True
    })

def test_bot_api(request):
    """–¢–µ—Å—Ç API –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP getMe (–±–µ–∑ async)"""
    try:
        token = getattr(settings, 'TELEGRAM_BOT_TOKEN', '')
        if not token:
            return JsonResponse({'status': 'error', 'message': 'Bot token not configured'}, status=500)

        resp = requests.get(f"https://api.telegram.org/bot{token}/getMe", timeout=8)
        data = resp.json()
        if not data.get('ok'):
            return JsonResponse({'status': 'error', 'api': 'getMe',
                                'response': data}, status=500)
        info = data.get('result', {})
        return JsonResponse({
            'status': 'ok',
            'bot_info': info,
            'timestamp': timezone.now().isoformat()
        })
    except Exception as e:
        return JsonResponse({'status': 'error', 'error': str(
            e), 'timestamp': timezone.now().isoformat()}, status=500)

def bot_control_panel(request):
    """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    if not request.user.is_authenticated:
        return JsonResponse({'error': 'Unauthorized'}, status=401)

    try:
        bot = get_bot()
        bot_info = bot.get_me()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            'bot_id': bot_info.id,  # type: ignore
            'bot_username': bot_info.username,  # type: ignore
            'bot_name': bot_info.first_name,  # type: ignore
            'webhook_url': f"{settings.SITE_URL}/bot/webhook/",
            'timestamp': timezone.now().isoformat()
        }

        return JsonResponse({
            'status': 'ok',
            'data': stats
        })
    except Exception as e:
        return JsonResponse({
            'status': 'error',
            'error': str(e),
            'timestamp': timezone.now().isoformat()
        }, status=500)

def bot_api_status(request):
    """
    API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞
    """
    token_set = bool(getattr(settings, 'TELEGRAM_BOT_TOKEN', ''))
    try:
        bot = get_bot()
        ok = bot is not None
    except Exception:
        ok = False
    return JsonResponse({
        'status': 'active' if ok else 'error',
        'mode': 'webhook',
        'token_configured': token_set,
        'message': '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ webhook' if ok else '–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ webhook'
    })

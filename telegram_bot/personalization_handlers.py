"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è Telegram –±–æ—Ç–∞
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from core.personalization_system import get_user_insights, PersonalizedRecommendations

logger = logging.getLogger(__name__)

async def personalization_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
    try:
        keyboard = [
                InlineKeyboardButton("üìä –ú–æ—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="my_analytics"),
                InlineKeyboardButton("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="my_recommendations")
            ],
                InlineKeyboardButton("üìö –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è", callback_data="study_plan"),
                InlineKeyboardButton("‚ö†Ô∏è –°–ª–∞–±—ã–µ —Ç–µ–º—ã", callback_data="weak_topics")
            ],
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            "üéì *–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ —Å–≤–æ–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_my_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = context.user_data.get('user_id', 1)
        insights = get_user_insights(user_id)

        if not insights:
            await query.edit_message_text(
                "üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è!",
                parse_mode='Markdown'
            )
            return

        progress = insights.get('progress_summary', {})
        preferences = insights.get('preferences', {})

        message = "üìä *–í–∞—à–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n"

        if progress:
            message += "üìà *–ü—Ä–æ–≥—Ä–µ—Å—Å:*\n"
            message += "   ‚Ä¢ –†–µ—à–µ–Ω–æ: {progress.get('solved_tasks', 0)}\n"
            message += "   ‚Ä¢ –í—Å–µ–≥–æ: {progress.get('total_tasks', 0)}\n"
            message += "   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {progress.get('completion_percentage', 0)}%\n\n"

        if preferences.get('favorite_subjects'):
            subjects = ', '.join(preferences['favorite_subjects'])
            message += "üéØ *–õ—é–±–∏–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:* {subjects}\n"

        keyboard = [
                InlineKeyboardButton(
                    "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="my_recommendations"), InlineKeyboardButton(
                    "üìö –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è", callback_data="study_plan")], [
                InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥", callback_data="personalization_menu")]]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.",
            parse_mode='Markdown'
        )

async def show_my_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = context.user_data.get('user_id', 1)
        recommender = PersonalizedRecommendations(user_id)
        recommended_tasks = recommender.get_recommended_tasks(3)

        if not recommended_tasks:
            await query.edit_message_text(
                "üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*\n\n"
                "–£ –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤–∞—Å.\n"
                "–†–µ—à–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π!",
                parse_mode='Markdown'
            )
            return

        message = "üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*\n\n"

        for i, task in enumerate(recommended_tasks, 1):
            difficulty_stars = "‚≠ê" * getattr(task, 'difficulty', 3)
            subject_name = getattr(
                task.subject, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if hasattr(
                task, 'subject') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

            message += "{i}. **{getattr(task, 'title', '–ó–∞–¥–∞–Ω–∏–µ')}**\n"
            message += "   üìö {subject_name}\n"
            message += "   {difficulty_stars} –°–ª–æ–∂–Ω–æ—Å—Ç—å: {getattr(task, 'difficulty', 3)}/5\n\n"

        keyboard = [
                InlineKeyboardButton("üìö –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è", callback_data="study_plan"),
                InlineKeyboardButton("‚ö†Ô∏è –°–ª–∞–±—ã–µ —Ç–µ–º—ã", callback_data="weak_topics")
            ],
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="personalization_menu")
            ]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.",
            parse_mode='Markdown'
        )

async def show_study_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = context.user_data.get('user_id', 1)
        recommender = PersonalizedRecommendations(user_id)
        study_plan = recommender.get_study_plan()

        message = "üìö *–í–∞—à –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è*\n\n"

        daily_goals = study_plan.get('daily_goals', [])
        if daily_goals:
            message += "üéØ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ü–µ–ª–∏:*\n"
            for goal in daily_goals:
                message += "   ‚Ä¢ {goal.get('description', '')}\n"
            message += "\n"

        weekly_focus = study_plan.get('weekly_focus', [])
        if weekly_focus:
            message += "üìÖ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å:*\n"
            for focus in weekly_focus:
                subject = focus.get('subject', '')
                goal = focus.get('goal', '')
                message += "   ‚Ä¢ {subject}: {goal}\n"

        keyboard = [
                InlineKeyboardButton(
                    "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="my_recommendations"), InlineKeyboardButton(
                    "‚ö†Ô∏è –°–ª–∞–±—ã–µ —Ç–µ–º—ã", callback_data="weak_topics")], [
                InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥", callback_data="personalization_menu")]]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è.",
            parse_mode='Markdown'
        )

async def show_weak_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–∞–±—ã–µ —Ç–µ–º—ã"""
    try:
        query = update.callback_query
        await query.answer()

        user_id = context.user_data.get('user_id', 1)
        recommender = PersonalizedRecommendations(user_id)
        weak_topics = recommender.get_weak_topics()

        if not weak_topics:
            await query.edit_message_text(
                "‚ö†Ô∏è *–°–ª–∞–±—ã–µ —Ç–µ–º—ã*\n\n"
                "–û—Ç–ª–∏—á–Ω–æ! –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–∞–±—ã—Ö —Ç–µ–º. üéâ",
                parse_mode='Markdown'
            )
            return

        message = "‚ö†Ô∏è *–í–∞—à–∏ —Å–ª–∞–±—ã–µ —Ç–µ–º—ã*\n\n"

        for i, topic in enumerate(weak_topics[:3], 1):
            subject = topic.get('subject', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            failed_tasks = topic.get('failed_tasks', 0)
            avg_difficulty = topic.get('avg_difficulty', 0)

            message += "{i}. **{subject}**\n"
            message += "   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tasks}\n"
            message += "   üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {avg_difficulty}/5\n\n"

        message += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        message += "‚Ä¢ –†–µ—à–∏—Ç–µ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ —ç—Ç–∏–º —Ç–µ–º–∞–º\n"
        message += "‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç—ã—Ö –∏ —É—Å–ª–æ–∂–Ω—è–π—Ç–µ\n"

        keyboard = [
                InlineKeyboardButton(
                    "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="my_recommendations"), InlineKeyboardButton(
                    "üìö –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è", callback_data="study_plan")], [
                InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥", callback_data="personalization_menu")]]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–∞–±—ã—Ö —Ç–µ–º: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–∞–±—ã—Ö —Ç–µ–º.",
            parse_mode='Markdown'
        )

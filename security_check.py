#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ExamFlow
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏, SSL, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""

import requests
import subprocess
import sys
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_status(message, status="INFO"):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    if status == "SUCCESS":
        print(f"{Colors.GREEN}‚úÖ {message}{Colors.ENDC}")
    elif status == "ERROR":
        print(f"{Colors.RED}‚ùå {message}{Colors.ENDC}")
    elif status == "WARNING":
        print(f"{Colors.YELLOW}‚ö†Ô∏è  {message}{Colors.ENDC}")
    elif status == "INFO":
        print(f"{Colors.BLUE}‚ÑπÔ∏è  {message}{Colors.ENDC}")
    else:
        print(f"{message}")

def check_ssl_certificate(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    try:
        response = requests.get(url, timeout=10, verify=True)
        if response.status_code == 200:
            print_status(f"SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è {url}", "SUCCESS")
            return True
        else:
            print_status(f"SSL —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å {response.status_code}", "WARNING")
            return True
    except requests.exceptions.SSLError:
        print_status(f"SSL –æ—à–∏–±–∫–∞ –¥–ª—è {url}", "ERROR")
        return False
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL: {e}", "ERROR")
        return False

def check_security_headers(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        response = requests.get(url, timeout=10)
        headers = response.headers
        
        security_headers = {
            'Strict-Transport-Security': 'HSTS',
            'Content-Security-Policy': 'CSP',
            'X-Content-Type-Options': 'X-Content-Type-Options',
            'X-Frame-Options': 'X-Frame-Options',
            'X-XSS-Protection': 'X-XSS-Protection',
            'Referrer-Policy': 'Referrer-Policy',
            'Permissions-Policy': 'Permissions-Policy',
            'Cross-Origin-Opener-Policy': 'COOP',
            'Cross-Origin-Embedder-Policy': 'COEP'
        }
        
        print_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:", "INFO")
        for header, description in security_headers.items():
            if header in headers:
                print_status(f"  {description}: {headers[header]}", "SUCCESS")
            else:
                print_status(f"  {description}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", "WARNING")
        
        return True
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}", "ERROR")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
    try:
        print_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:", "INFO")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ safety
        try:
            subprocess.run([sys.executable, "-m", "safety", "check"], 
                         capture_output=True, text=True, check=True)
            print_status("  Safety: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "SUCCESS")
        except subprocess.CalledProcessError:
            print_status("  Safety: –Ω–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏", "WARNING")
        except FileNotFoundError:
            print_status("  Safety: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (pip install safety)", "WARNING")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
        requirements_file = Path("requirements.txt")
        if requirements_file.exists():
            print_status("  requirements.txt: –Ω–∞–π–¥–µ–Ω", "SUCCESS")
        else:
            print_status("  requirements.txt: –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
        
        return True
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}", "ERROR")
        return False

def check_django_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"""
    try:
        print_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django:", "INFO")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        middleware_file = Path("examflow_project/middleware.py")
        if middleware_file.exists():
            print_status("  SecurityHeadersMiddleware: –Ω–∞–π–¥–µ–Ω", "SUCCESS")
        else:
            print_status("  SecurityHeadersMiddleware: –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ settings.py
        settings_file = Path("examflow_project/settings.py")
        if settings_file.exists():
            content = settings_file.read_text()
            
            security_settings = [
                'PERMISSIONS_POLICY',
                'SECURE_REFERRER_POLICY',
                'SECURE_CROSS_ORIGIN_OPENER_POLICY',
                'SECURE_CROSS_ORIGIN_EMBEDDER_POLICY',
                'SECURE_CONTENT_TYPE_NOSNIFF',
                'SECURE_BROWSER_XSS_FILTER',
                'X_FRAME_OPTIONS'
            ]
            
            for setting in security_settings:
                if setting in content:
                    print_status(f"  {setting}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω", "SUCCESS")
                else:
                    print_status(f"  {setting}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", "WARNING")
        
        return True
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django: {e}", "ERROR")
        return False

def check_telegram_bot():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å Telegram –±–æ—Ç–∞"""
    try:
        print_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞:", "INFO")
        
        bot_files = [
            "telegram_bot/bot_main.py",
            "telegram_bot/views.py",
            "telegram_bot/bot_handlers.py"
        ]
        
        for file_path in bot_files:
            file = Path(file_path)
            if file.exists():
                content = file.read_text()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                security_checks = [
                    'verify_webhook',
                    'is_allowed_ip',
                    'rate_limit',
                    'input_validation'
                ]
                
                for check in security_checks:
                    if check in content:
                        print_status(f"  {file_path}: {check} –Ω–∞–π–¥–µ–Ω", "SUCCESS")
                    else:
                        print_status(f"  {file_path}: {check} –Ω–µ –Ω–∞–π–¥–µ–Ω", "WARNING")
            else:
                print_status(f"  {file_path}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
        
        return True
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –±–æ—Ç–∞: {e}", "ERROR")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print(f"{Colors.BOLD}üîí –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò EXAMFLOW{Colors.ENDC}")
    print("=" * 50)
    
    # URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    urls = [
        "https://examflow.ru",
        "https://www.examflow.ru"
    ]
    
    results = {
        'ssl': [],
        'headers': [],
        'dependencies': False,
        'django': False,
        'telegram_bot': False
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ URL
    for url in urls:
        print(f"\n{Colors.BOLD}–ü—Ä–æ–≤–µ—Ä–∫–∞ {url}:{Colors.ENDC}")
        results['ssl'].append(check_ssl_certificate(url))
        results['headers'].append(check_security_headers(url))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print(f"\n{Colors.BOLD}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:{Colors.ENDC}")
    results['dependencies'] = check_dependencies()
    results['django'] = check_django_settings()
    results['telegram_bot'] = check_telegram_bot()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\n{Colors.BOLD}–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:{Colors.ENDC}")
    print("=" * 50)
    
    total_checks = len(results['ssl']) + len(results['headers']) + 3
    passed_checks = sum(results['ssl']) + sum(results['headers']) + sum([
        results['dependencies'], results['django'], results['telegram_bot']
    ])
    
    security_score = (passed_checks / total_checks) * 100
    
    if security_score >= 90:
        print_status(f"–û–±—â–∏–π –±–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_score:.1f}% - –û–¢–õ–ò–ß–ù–û", "SUCCESS")
    elif security_score >= 70:
        print_status(f"–û–±—â–∏–π –±–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_score:.1f}% - –•–û–†–û–®–û", "WARNING")
    else:
        print_status(f"–û–±—â–∏–π –±–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_score:.1f}% - –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø", "ERROR")
    
    print(f"\n{Colors.BOLD}–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:{Colors.ENDC}")
    if not all(results['ssl']):
        print_status("  –ò—Å–ø—Ä–∞–≤–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", "ERROR")
    if not all(results['headers']):
        print_status("  –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "WARNING")
    if not results['dependencies']:
        print_status("  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏", "WARNING")
    if not results['django']:
        print_status("  –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å Django", "WARNING")
    if not results['telegram_bot']:
        print_status("  –£–ª—É—á—à–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å Telegram –±–æ—Ç–∞", "WARNING")

if __name__ == "__main__":
    main()

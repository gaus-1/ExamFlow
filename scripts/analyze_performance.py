#!/usr/bin/env python
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ExamFlow
–í—ã—è–≤–ª—è–µ—Ç —É–∑–∫–∏–µ –º–µ—Å—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import os
import sys
import time
import cProfile
import pstats
import io
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')

try:
    import django
    django.setup()

    from core.container import Container
    from learning.models import Subject, Task
    from django.test import RequestFactory
    from learning.views import home

except ImportError as e:
    print(f"‚ö†Ô∏è Django –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {e}")
    sys.exit(1)


class PerformanceAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ExamFlow"""

    def __init__(self):
        self.results = {}
        self.factory = RequestFactory()

    def analyze_ai_performance(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å AI —Å–∏—Å—Ç–µ–º—ã"""
        print("ü§ñ –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò AI:")

        try:
            ai_orchestrator = Container.ai_orchestrator()

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å AI –∑–∞–ø—Ä–æ—Å–æ–≤
            test_prompts = [
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è?",
                "–ö–∞–∫ —Ä–µ—à–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è?",
                "–û–±—ä—è—Å–Ω–∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª—ã"
            ]

            times = []
            for prompt in test_prompts:
                start_time = time.time()
                try:
                    response = ai_orchestrator.ask(prompt)
                    end_time = time.time()

                    if response and 'answer' in response:
                        duration = end_time - start_time
                        times.append(duration)
                        print(f"  ‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {duration:.2f}—Å")
                    else:
                        print("  ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")

                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")

            if times:
                avg_time = sum(times) / len(times)
                max_time = max(times)
                min_time = min(times)

                print(f"  üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å")
                print(f"  üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max_time:.2f}—Å")
                print(f"  üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {min_time:.2f}—Å")

                self.results['ai_avg_time'] = avg_time
                self.results['ai_max_time'] = max_time

                # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if avg_time < 2.0:
                    print("  üü¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å AI: –û–¢–õ–ò–ß–ù–ê–Ø")
                elif avg_time < 5.0:
                    print("  üü° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å AI: –•–û–†–û–®–ê–Ø")
                else:
                    print("  üî¥ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å AI: –¢–†–ï–ë–£–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")

        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AI: {e}")

    def analyze_view_performance(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π Django"""
        print("\nüåê –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–ô:")

        try:
            # –ü—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            request = self.factory.get('/')

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º cProfile –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            profiler = cProfile.Profile()

            start_time = time.time()
            profiler.enable()

            response = home(request)

            profiler.disable()
            end_time = time.time()

            total_time = end_time - start_time
            print(f"  ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {total_time:.3f}—Å")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            s = io.StringIO()
            ps = pstats.Stats(profiler, stream=s)
            ps.sort_stats('cumulative')
            ps.print_stats(10)  # –¢–æ–ø 10 —Ñ—É–Ω–∫—Ü–∏–π

            profile_output = s.getvalue()

            # –ò—â–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            slow_functions = []
            for line in profile_output.split('\n')[5:15]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if line.strip() and 'function calls' not in line:
                    parts = line.split()
                    if len(parts) >= 4:
                        try:
                            cumtime = float(parts[3])
                            if cumtime > 0.1:  # –§—É–Ω–∫—Ü–∏–∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ 100ms
                                slow_functions.append((parts[-1], cumtime))
                        except (ValueError, IndexError):
                            pass

            if slow_functions:
                print("  ‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
                for func_name, time_spent in slow_functions[:5]:
                    print(f"    - {func_name}: {time_spent:.3f}—Å")
            else:
                print("  ‚úÖ –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            self.results['view_time'] = total_time

            # –û—Ü–µ–Ω–∫–∞
            if total_time < 0.1:
                print("  üü¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: –û–¢–õ–ò–ß–ù–ê–Ø")
            elif total_time < 0.5:
                print("  üü° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: –•–û–†–û–®–ê–Ø")
            else:
                print("  üî¥ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: –¢–†–ï–ë–£–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")

        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: {e}")

    def analyze_database_queries(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î"""
        print("\nüóÑÔ∏è –ê–ù–ê–õ–ò–ó –ó–ê–ü–†–û–°–û–í –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•:")

        try:
            from django.db import connection
            from django.test.utils import override_settings

            # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
            with override_settings(LOGGING_CONFIG=None):
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
                connection.queries_log.clear()

                start_time = time.time()

                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                subjects = list(Subject.objects.filter(is_archived=False)[:10])
                tasks = list(Task.objects.select_related('subject')[:20])

                end_time = time.time()

                query_count = len(connection.queries)
                total_time = end_time - start_time

                print(f"  üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {query_count}")
                print(f"  üìä –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.3f}—Å")
                print(f"  üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: {total_time/query_count:.3f}—Å")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                slow_queries = []
                for query in connection.queries:
                    try:
                        query_time = float(query['time'])
                        if query_time > 0.01:  # –ó–∞–ø—Ä–æ—Å—ã –º–µ–¥–ª–µ–Ω–Ω–µ–µ 10ms
                            slow_queries.append((query['sql'][:100], query_time))
                    except (KeyError, ValueError):
                        pass

                if slow_queries:
                    print("  ‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")
                    for sql, query_time in slow_queries[:3]:
                        print(f"    - {sql}... : {query_time:.3f}—Å")
                else:
                    print("  ‚úÖ –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                self.results['db_queries'] = query_count
                self.results['db_time'] = total_time

                # –û—Ü–µ–Ω–∫–∞
                if query_count < 10 and total_time < 0.1:
                    print("  üü¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–î: –û–¢–õ–ò–ß–ù–ê–Ø")
                elif query_count < 20 and total_time < 0.5:
                    print("  üü° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–î: –•–û–†–û–®–ê–Ø")
                else:
                    print("  üî¥ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–î: –¢–†–ï–ë–£–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")

        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ë–î: {e}")

    def analyze_file_sizes(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("\nüìÅ –ê–ù–ê–õ–ò–ó –†–ê–ó–ú–ï–†–û–í –§–ê–ô–õ–û–í:")

        try:
            project_root = Path(__file__).parent.parent

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
            file_stats = {
                'python': {'count': 0, 'size': 0, 'extensions': ['.py']},
                'templates': {'count': 0, 'size': 0, 'extensions': ['.html']},
                'css': {'count': 0, 'size': 0, 'extensions': ['.css']},
                'javascript': {'count': 0, 'size': 0, 'extensions': ['.js']},
                'static': {'count': 0, 'size': 0, 'extensions': ['.png', '.jpg', '.svg', '.ico']},
            }

            for file_path in project_root.rglob('*'):
                if file_path.is_file() and not any(part.startswith('.') for part in file_path.parts):
                    file_size = file_path.stat().st_size
                    file_ext = file_path.suffix.lower()

                    for file_type, stats in file_stats.items():
                        if file_ext in stats['extensions']:
                            stats['count'] += 1
                            stats['size'] += file_size
                            break

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_size = sum(stats['size'] for stats in file_stats.values())

            for file_type, stats in file_stats.items():
                if stats['count'] > 0:
                    size_mb = stats['size'] / 1024 / 1024
                    percentage = (stats['size'] / total_size) * 100 if total_size > 0 else 0
                    print(f"  üìä {file_type.title()}: {stats['count']} —Ñ–∞–π–ª–æ–≤, {size_mb:.1f}MB ({percentage:.1f}%)")

            total_mb = total_size / 1024 / 1024
            print(f"  üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_mb:.1f}MB")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if total_mb > 100:
                print("  üî¥ –ü—Ä–æ–µ–∫—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞")
            elif total_mb > 50:
                print("  üü° –†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ —Å—Ä–µ–¥–Ω–∏–π - –º–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            else:
                print("  üü¢ –†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π")

        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤: {e}")

    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")

        # AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if 'ai_avg_time' in self.results:
            if self.results['ai_avg_time'] > 3.0:
                print("  üîß AI: –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
                print("  üîß AI: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")

        # –ë–î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if 'db_queries' in self.results:
            if self.results['db_queries'] > 15:
                print("  üîß –ë–î: –î–æ–±–∞–≤–∏—Ç—å select_related() –∏ prefetch_related()")
                print("  üîß –ë–î: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("  ‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("  ‚úÖ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤")
        print("  ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò EXAMFLOW")
        print("=" * 60)

        self.analyze_ai_performance()
        self.analyze_view_performance()
        self.analyze_database_queries()
        self.analyze_file_sizes()
        self.generate_recommendations()

        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = PerformanceAnalyzer()
    analyzer.run_full_analysis()


if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import subprocess
import sys
from pathlib import Path

def install_security_tools():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üîí –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    tools = [
        'safety',
        'bandit',
        'pip-audit',
        'django-csp',
        'django-ratelimit'
    ]
    
    for tool in tools:
        try:
            subprocess.run([sys.executable, '-m', 'pip', 'install', tool], check=True)
            print(f"‚úÖ {tool} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.CalledProcessError:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {tool}")

def update_dependencies():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏–π"""
    print("üì¶ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        subprocess.run([sys.executable, '-m', 'safety', 'check'], check=True)
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –æ–±–Ω–æ–≤–ª—è–µ–º...")
        subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'])
        subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', '-r', 'requirements.txt'])

def enable_csp():
    """–í–∫–ª—é—á–∞–µ—Ç Content Security Policy"""
    print("üõ°Ô∏è –í–∫–ª—é—á–∞–µ–º CSP...")
    
    settings_file = Path('examflow_project/settings.py')
    if not settings_file.exists():
        print("‚ùå –§–∞–π–ª settings.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with open(settings_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –î–æ–±–∞–≤–ª—è–µ–º CSP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    csp_config = '''
# Content Security Policy
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com")
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'", "https://fonts.googleapis.com")
CSP_IMG_SRC = ("'self'", "data:", "https:")
CSP_FONT_SRC = ("'self'", "https://fonts.gstatic.com")
CSP_CONNECT_SRC = ("'self'", "https://generativelanguage.googleapis.com")
CSP_FRAME_ANCESTORS = ("'none'",)
CSP_BASE_URI = ("'self'",)
CSP_OBJECT_SRC = ("'none'",)
'''
    
    if 'CSP_DEFAULT_SRC' not in content:
        # –î–æ–±–∞–≤–ª—è–µ–º CSP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ INSTALLED_APPS
        content = content.replace('INSTALLED_APPS = [', csp_config + '\nINSTALLED_APPS = [')
        
        # –í–∫–ª—é—á–∞–µ–º CSP middleware
        if "'csp.middleware.CSPMiddleware'" not in content:
            content = content.replace(
                "# 'csp.middleware.CSPMiddleware',  # CSP middleware - –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù",
                "'csp.middleware.CSPMiddleware',  # CSP middleware"
            )
        
        with open(settings_file, 'w', encoding='utf-8') as f:
            f.write(content)
        print("‚úÖ CSP –≤–∫–ª—é—á–µ–Ω")
    else:
        print("‚úÖ CSP —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

def add_security_headers():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üîê –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    middleware_file = Path('examflow_project/middleware.py')
    if not middleware_file.exists():
        # –°–æ–∑–¥–∞–µ–º middleware —Ñ–∞–π–ª
        middleware_content = '''"""
Middleware –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

class SecurityHeadersMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        response['X-Content-Type-Options'] = 'nosniff'
        response['X-Frame-Options'] = 'DENY'
        response['X-XSS-Protection'] = '1; mode=block'
        response['Referrer-Policy'] = 'strict-origin-when-cross-origin'
        response['Permissions-Policy'] = 'geolocation=(), microphone=(), camera=()'
        
        return response
'''
        with open(middleware_file, 'w', encoding='utf-8') as f:
            f.write(middleware_content)
        print("‚úÖ Middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω")
    else:
        print("‚úÖ Middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def add_input_validation():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    validators_file = Path('core/validators.py')
    if not validators_file.exists():
        validators_content = '''"""
–í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import re
from typing import Any, Dict
from django.core.exceptions import ValidationError

def validate_prompt(prompt: str) -> str:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è AI API
    
    Args:
        prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        
    Raises:
        ValidationError: –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
    """
    if not prompt or not prompt.strip():
        raise ValidationError("–ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    if len(prompt) > 2000:
        raise ValidationError("–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ XSS
    dangerous_patterns = [
        r'<script[^>]*>.*?</script>',
        r'javascript:',
        r'on\\w+\\s*=',
        r'<iframe[^>]*>',
        r'<object[^>]*>',
        r'<embed[^>]*>'
    ]
    
    for pattern in dangerous_patterns:
        if re.search(pattern, prompt, re.IGNORECASE):
            raise ValidationError("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ XSS –∞—Ç–∞–∫–∏")
    
    # –ë–∞–∑–æ–≤–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è
    prompt = prompt.replace('<', '&lt;').replace('>', '&gt;')
    prompt = prompt.replace('"', '&quot;').replace("'", '&#x27;')
    
    return prompt.strip()

def validate_user_input(data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    
    Args:
        data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
        
    Returns:
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
    Raises:
        ValidationError: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã
    """
    if not isinstance(data, dict):
        raise ValidationError("–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
    if 'prompt' in data:
        data['prompt'] = validate_prompt(data['prompt'])
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è user_id
    if 'user_id' in data:
        user_id = data['user_id']
        if not isinstance(user_id, int) or user_id < 1:
            raise ValidationError("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π user_id")
    
    return data
'''
        with open(validators_file, 'w', encoding='utf-8') as f:
            f.write(validators_content)
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã")
    else:
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")

def run_security_checks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    try:
        # Bandit –ø—Ä–æ–≤–µ—Ä–∫–∞
        subprocess.run([sys.executable, '-m', 'bandit', '-r', '.', '-f', 'json', '-o', 'bandit-report.json'], check=True)
        print("‚úÖ Bandit –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è Bandit –Ω–∞—à–µ–ª –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ bandit-report.json")
    
    try:
        # Safety –ø—Ä–æ–≤–µ—Ä–∫–∞
        subprocess.run([sys.executable, '-m', 'safety', 'check'], check=True)
        print("‚úÖ Safety –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è Safety –Ω–∞—à–µ–ª —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    install_security_tools()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    update_dependencies()
    
    # –í–∫–ª—é—á–∞–µ–º CSP
    enable_csp()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    add_security_headers()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    add_input_validation()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    run_security_checks()
    
    print("üéâ –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ bandit-report.json –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º")
    print("2. –û–±–Ω–æ–≤–∏—Ç–µ requirements.txt —Å –Ω–æ–≤—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: python manage.py migrate")

if __name__ == "__main__":
    main()

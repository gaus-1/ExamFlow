#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ ExamFlow
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤, –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import requests
import re
import time
from urllib.parse import urljoin

class FrontendTester:
    def __init__(self, base_url='http://localhost:8000'):
        self.base_url = base_url
        self.session = requests.Session()
        self.results = []
    
    def test_page_load(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        
        try:
            start_time = time.time()
            response = self.session.get(self.base_url, timeout=10)
            load_time = time.time() - start_time
            
            if response.status_code == 200:
                print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ {load_time:.2f}—Å")
                self.results.append(("page_load", True, f"{load_time:.2f}s"))
                return response.text
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                self.results.append(("page_load", False, f"HTTP {response.status_code}"))
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            self.results.append(("page_load", False, str(e)))
            return None
    
    def test_css_resources(self, html_content):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É CSS —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é CSS —Ä–µ—Å—É—Ä—Å—ã...")
        
        if not html_content:
            self.results.append(("css_resources", False, "No HTML content"))
            return
        
        # –ù–∞—Ö–æ–¥–∏–º CSS —Ñ–∞–π–ª—ã
        css_links = re.findall(r'href="([^"]*\.css[^"]*)"', html_content)
        
        success_count = 0
        total_count = len(css_links)
        
        for css_link in css_links:
            try:
                if css_link.startswith('/'):
                    full_url = urljoin(self.base_url, css_link)
                else:
                    full_url = css_link
                
                response = self.session.head(full_url, timeout=5)
                if response.status_code == 200:
                    success_count += 1
                    print(f"  ‚úÖ {css_link}")
                else:
                    print(f"  ‚ùå {css_link} (HTTP {response.status_code})")
                    
            except Exception as e:
                print(f"  ‚ùå {css_link} (–û—à–∏–±–∫–∞: {e})")
        
        if success_count == total_count and total_count > 0:
            print(f"‚úÖ –í—Å–µ CSS —Ä–µ—Å—É—Ä—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({success_count}/{total_count})")
            self.results.append(("css_resources", True, f"{success_count}/{total_count}"))
        else:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å CSS ({success_count}/{total_count})")
            self.results.append(("css_resources", False, f"{success_count}/{total_count}"))
    
    def test_js_resources(self, html_content):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É JavaScript —Ä–µ—Å—É—Ä—Å–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é JavaScript —Ä–µ—Å—É—Ä—Å—ã...")
        
        if not html_content:
            self.results.append(("js_resources", False, "No HTML content"))
            return
        
        # –ù–∞—Ö–æ–¥–∏–º JS —Ñ–∞–π–ª—ã
        js_links = re.findall(r'src="([^"]*\.js[^"]*)"', html_content)
        
        success_count = 0
        total_count = len(js_links)
        
        for js_link in js_links:
            try:
                if js_link.startswith('/'):
                    full_url = urljoin(self.base_url, js_link)
                else:
                    full_url = js_link
                
                response = self.session.head(full_url, timeout=5)
                if response.status_code == 200:
                    success_count += 1
                    print(f"  ‚úÖ {js_link}")
                else:
                    print(f"  ‚ùå {js_link} (HTTP {response.status_code})")
                    
            except Exception as e:
                print(f"  ‚ùå {js_link} (–û—à–∏–±–∫–∞: {e})")
        
        if success_count == total_count and total_count > 0:
            print(f"‚úÖ –í—Å–µ JS —Ä–µ—Å—É—Ä—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({success_count}/{total_count})")
            self.results.append(("js_resources", True, f"{success_count}/{total_count}"))
        else:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å JS ({success_count}/{total_count})")
            self.results.append(("js_resources", False, f"{success_count}/{total_count}"))
    
    def test_key_elements(self, html_content):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã...")
        
        if not html_content:
            self.results.append(("key_elements", False, "No HTML content"))
            return
        
        elements = [
            ('AI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', r'ai-input'),
            ('–ù–∞–≤–∏–≥–∞—Ü–∏—è', r'nav-link'),
            ('–ö–Ω–æ–ø–∫–∏', r'btn btn-primary'),
            ('–õ–æ–≥–æ—Ç–∏–ø', r'logo'),
            ('–§—É—Ç–µ—Ä', r'footer'),
            ('–ú–µ—Ç–∞-—Ç–µ–≥–∏', r'<meta.*description'),
            ('Telegram —Å—Å—ã–ª–∫–∞', r't\.me/examflow_bot'),
            ('CSRF —Ç–æ–∫–µ–Ω', r'csrfmiddlewaretoken'),
        ]
        
        success_count = 0
        for name, pattern in elements:
            if re.search(pattern, html_content, re.IGNORECASE):
                print(f"  ‚úÖ {name}")
                success_count += 1
            else:
                print(f"  ‚ùå {name}")
        
        total_count = len(elements)
        if success_count == total_count:
            print(f"‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã ({success_count}/{total_count})")
            self.results.append(("key_elements", True, f"{success_count}/{total_count}"))
        else:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã ({success_count}/{total_count})")
            self.results.append(("key_elements", False, f"{success_count}/{total_count}"))
    
    def test_ai_api(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI API"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é AI API...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
            response = self.session.get(self.base_url)
            csrf_match = re.search(r'csrfmiddlewaretoken[^>]*value=["\']([^"\']*)["\']', response.text)
            
            if not csrf_match:
                print("‚ùå CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.results.append(("ai_api", False, "No CSRF token"))
                return
            
            csrf_token = csrf_match.group(1)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∑–∞–ø—Ä–æ—Å
            ai_response = self.session.post(
                urljoin(self.base_url, '/ai/api/'),
                json={'prompt': '–¢–µ—Å—Ç AI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞'},
                headers={
                    'X-CSRFToken': csrf_token,
                    'Content-Type': 'application/json'
                },
                timeout=30
            )
            
            if ai_response.status_code == 200:
                data = ai_response.json()
                if 'answer' in data:
                    print("‚úÖ AI API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    self.results.append(("ai_api", True, "API responds"))
                else:
                    print("‚ùå AI API: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
                    self.results.append(("ai_api", False, "Invalid response format"))
            else:
                print(f"‚ùå AI API: HTTP {ai_response.status_code}")
                self.results.append(("ai_api", False, f"HTTP {ai_response.status_code}"))
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ AI API: {e}")
            self.results.append(("ai_api", False, str(e)))
    
    def test_responsive_breakpoints(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ breakpoints"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ breakpoints...")
        
        breakpoints = [
            ('Mobile', 375),
            ('Tablet', 768),
            ('Desktop', 1024),
            ('Large', 1440)
        ]
        
        success_count = 0
        for name, width in breakpoints:
            try:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ User-Agent
                headers = {
                    'User-Agent': f'Mozilla/5.0 (Test Device; {width}px) ExamFlowTester/1.0'
                }
                
                response = self.session.get(self.base_url, headers=headers, timeout=5)
                
                if response.status_code == 200:
                    print(f"  ‚úÖ {name} ({width}px)")
                    success_count += 1
                else:
                    print(f"  ‚ùå {name} ({width}px) - HTTP {response.status_code}")
                    
            except Exception as e:
                print(f"  ‚ùå {name} ({width}px) - –û—à–∏–±–∫–∞: {e}")
        
        total_count = len(breakpoints)
        if success_count == total_count:
            print(f"‚úÖ –í—Å–µ breakpoints —Ä–∞–±–æ—Ç–∞—é—Ç ({success_count}/{total_count})")
            self.results.append(("responsive", True, f"{success_count}/{total_count}"))
        else:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é ({success_count}/{total_count})")
            self.results.append(("responsive", False, f"{success_count}/{total_count}"))
    
    def test_telegram_integration(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram
            auth_response = self.session.get(urljoin(self.base_url, '/auth/telegram/login/'), timeout=5)
            
            if auth_response.status_code == 200:
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞")
                self.results.append(("telegram_auth", True, "Auth page accessible"))
            else:
                print(f"‚ùå Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: HTTP {auth_response.status_code}")
                self.results.append(("telegram_auth", False, f"HTTP {auth_response.status_code}"))
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            self.results.append(("telegram_auth", False, str(e)))
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ ExamFlow...\n")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        html_content = self.test_page_load()
        
        if html_content:
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            self.test_css_resources(html_content)
            self.test_js_resources(html_content)
            self.test_key_elements(html_content)
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.test_ai_api()
        self.test_responsive_breakpoints()
        self.test_telegram_integration()
        
        # –û—Ç—á–µ—Ç
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 70)
        
        passed = 0
        failed = 0
        
        for test_name, success, details in self.results:
            status = "‚úÖ –ü–†–û–®–Å–õ" if success else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"{test_name:<20} | {status:<12} | {details}")
            if success:
                passed += 1
            else:
                failed += 1
        
        print("=" * 70)
        print(f"üìà –ò–¢–û–ì–û: {passed} –ø—Ä–æ—à–ª–∏, {failed} –æ—à–∏–±–æ–∫")
        
        if failed == 0:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –§—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω.")
        else:
            print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.")
        
        return failed == 0

def main():
    tester = FrontendTester()
    success = tester.run_all_tests()
    
    if success:
        print("\nüöÄ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
    else:
        print("\nüîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

if __name__ == "__main__":
    main()

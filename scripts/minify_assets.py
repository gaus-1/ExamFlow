#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ ExamFlow
"""

import re
from pathlib import Path


def minify_css(css_content: str) -> str:
    """–ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è CSS"""
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    css_content = re.sub(r'/\*[\s\S]*?\*/', '', css_content)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    css_content = re.sub(r'\s+', ' ', css_content)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Å–∏–º–≤–æ–ª–æ–≤
    css_content = re.sub(r'\s*{\s*', '{', css_content)
    css_content = re.sub(r';\s*', ';', css_content)
    css_content = re.sub(r'}\s*', '}', css_content)
    css_content = re.sub(r':\s*', ':', css_content)
    css_content = re.sub(r',\s*', ',', css_content)
    
    return css_content.strip()


def minify_js(js_content: str) -> str:
    """–ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è JavaScript"""
    # –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    js_content = re.sub(r'//.*$', '', js_content, flags=re.MULTILINE)
    
    # –£–¥–∞–ª—è–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    js_content = re.sub(r'/\*[\s\S]*?\*/', '', js_content)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    js_content = re.sub(r'\s+', ' ', js_content)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    js_content = re.sub(r'\s*{\s*', '{', js_content)
    js_content = re.sub(r';\s*', ';', js_content)
    js_content = re.sub(r'}\s*', '}', js_content)
    
    return js_content.strip()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    base_dir = Path(__file__).parent.parent
    static_dir = base_dir / 'static'
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
    
    # –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è CSS
    css_files = [
        'css/examflow-2.0.css',
    ]
    
    for css_file in css_files:
        css_path = static_dir / css_file
        min_css_path = static_dir / css_file.replace('.css', '.min.css')
        
        if css_path.exists():
            with open(css_path, 'r', encoding='utf-8') as f:
                css_content = f.read()
            
            minified = minify_css(css_content)
            
            with open(min_css_path, 'w', encoding='utf-8') as f:
                f.write(minified)
            
            original_size = len(css_content)
            minified_size = len(minified)
            compression = (1 - minified_size / original_size) * 100
            
            print(f"‚úÖ CSS: {css_file} ‚Üí {min_css_path.name} ({compression:.1f}% —Å–∂–∞—Ç–∏–µ)")
    
    # –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è JS
    js_files = [
        'js/core-functions.js',
        'js/examflow-animations.js',
        'js/gamification.js',
    ]
    
    for js_file in js_files:
        js_path = static_dir / js_file
        min_js_path = static_dir / js_file.replace('.js', '.min.js')
        
        if js_path.exists():
            with open(js_path, 'r', encoding='utf-8') as f:
                js_content = f.read()
            
            minified = minify_js(js_content)
            
            with open(min_js_path, 'w', encoding='utf-8') as f:
                f.write(minified)
            
            original_size = len(js_content)
            minified_size = len(minified)
            compression = (1 - minified_size / original_size) * 100
            
            print(f"‚úÖ JS: {js_file} ‚Üí {min_js_path.name} ({compression:.1f}% —Å–∂–∞—Ç–∏–µ)")
    
    print("üéâ –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == '__main__':
    main()

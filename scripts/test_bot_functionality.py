#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –∏—Ö –æ—Ç–≤–µ—Ç—ã
"""

import os
import sys
import django
import asyncio
from unittest.mock import Mock, AsyncMock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

from telegram_bot.bot_handlers import (
    start, subjects_menu, show_stats, ai_help_handler,
    show_subject_topics, random_task, handle_ai_message
)
from telegram import Update, User, Message, CallbackQuery, Chat
from telegram.ext import ContextTypes
from asgiref.sync import sync_to_async


class BotTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.test_user_id = 123456789
        self.test_results = []
    
    def create_mock_update(self, message_text=None, callback_data=None):
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ Update –æ–±—ä–µ–∫—Ç"""
        update = Mock(spec=Update)
        
        # –ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = Mock(spec=User)
        user.id = self.test_user_id
        user.first_name = "Test"
        user.last_name = "User"
        user.username = "testuser"
        
        update.effective_user = user
        
        if message_text:
            # –ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = AsyncMock(spec=Message)
            message.text = message_text
            update.message = message
            update.callback_query = None
        elif callback_data:
            # –ú–æ–∫ callback query
            callback_query = AsyncMock(spec=CallbackQuery)
            callback_query.data = callback_data
            callback_query.answer = AsyncMock()
            callback_query.edit_message_text = AsyncMock()
            update.callback_query = callback_query
            update.message = None
        
        # –ú–æ–∫ —á–∞—Ç–∞
        chat = Mock(spec=Chat)
        chat.id = self.test_user_id
        update.effective_chat = chat
        
        return update
    
    def create_mock_context(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ Context –æ–±—ä–µ–∫—Ç"""
        context = Mock(spec=ContextTypes.DEFAULT_TYPE)
        context.bot = AsyncMock()
        context.bot.send_message = AsyncMock()
        return context
    
    async def test_start_command(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É /start...")
        
        update = self.create_mock_update(message_text="/start")
        context = self.create_mock_context()
        
        try:
            await start(update, context)
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results.append(("start", True, "OK"))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /start: {e}")
            self.test_results.append(("start", False, str(e)))
    
    async def test_subjects_button(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É '–ü—Ä–µ–¥–º–µ—Ç—ã'"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∫–Ω–æ–ø–∫—É '–ü—Ä–µ–¥–º–µ—Ç—ã'...")
        
        update = self.create_mock_update(callback_data="subjects")
        context = self.create_mock_context()
        
        try:
            await subjects_menu(update, context)
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ü—Ä–µ–¥–º–µ—Ç—ã' —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results.append(("subjects", True, "OK"))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ '–ü—Ä–µ–¥–º–µ—Ç—ã': {e}")
            self.test_results.append(("subjects", False, str(e)))
    
    async def test_stats_button(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≥—Ä–µ—Å—Å'"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≥—Ä–µ—Å—Å'...")
        
        update = self.create_mock_update(callback_data="stats")
        context = self.create_mock_context()
        
        try:
            await show_stats(update, context)
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–≥—Ä–µ—Å—Å' —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results.append(("stats", True, "OK"))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ '–ü—Ä–æ–≥—Ä–µ—Å—Å': {e}")
            self.test_results.append(("stats", False, str(e)))
    
    async def test_ai_button(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É '–°–ø—Ä–æ—Å–∏—Ç—å –ò–ò'"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∫–Ω–æ–ø–∫—É '–°–ø—Ä–æ—Å–∏—Ç—å –ò–ò'...")
        
        update = self.create_mock_update(callback_data="ai_chat")
        context = self.create_mock_context()
        
        try:
            await ai_help_handler(update, context)
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–°–ø—Ä–æ—Å–∏—Ç—å –ò–ò' —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results.append(("ai_chat", True, "OK"))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ '–°–ø—Ä–æ—Å–∏—Ç—å –ò–ò': {e}")
            self.test_results.append(("ai_chat", False, str(e)))
    
    async def test_subject_selection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞...")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
        from learning.models import Subject
        subject = await sync_to_async(Subject.objects.filter(is_archived=False).first)()  # type: ignore
        if not subject:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
            self.test_results.append(("subject_selection", False, "No subjects"))
            return
        
        update = self.create_mock_update(callback_data=f"subject_{subject.id}")
        context = self.create_mock_context()
        
        try:
            await show_subject_topics(update, context)
            print(f"‚úÖ –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject.name}' —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results.append(("subject_selection", True, f"Subject: {subject.name}"))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
            self.test_results.append(("subject_selection", False, str(e)))
    
    async def test_random_task(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ...")
        
        update = self.create_mock_update(callback_data="random_task")
        context = self.create_mock_context()
        
        try:
            await random_task(update, context)
            print("‚úÖ –°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results.append(("random_task", True, "OK"))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏: {e}")
            self.test_results.append(("random_task", False, str(e)))
    
    async def test_ai_message(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò...")
        
        update = self.create_mock_update(message_text="–ö–∞–∫ —Ä–µ—à–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è?")
        context = self.create_mock_context()
        
        try:
            await handle_ai_message(update, context)
            print("‚úÖ –ü—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results.append(("ai_message", True, "OK"))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä—è–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ò–ò: {e}")
            self.test_results.append(("ai_message", False, str(e)))
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞...\n")
        
        await self.test_start_command()
        await self.test_subjects_button()
        await self.test_stats_button()
        await self.test_ai_button()
        await self.test_subject_selection()
        await self.test_random_task()
        await self.test_ai_message()
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        
        passed = 0
        failed = 0
        
        for test_name, success, message in self.test_results:
            status = "‚úÖ –ü–†–û–®–Å–õ" if success else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"{test_name:<20} | {status:<10} | {message}")
            if success:
                passed += 1
            else:
                failed += 1
        
        print("=" * 60)
        print(f"üìà –ò–¢–û–ì–û: {passed} –ø—Ä–æ—à–ª–∏, {failed} –æ—à–∏–±–æ–∫")
        
        if failed == 0:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω.")
        else:
            print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BotTester()
    await tester.run_all_tests()


if __name__ == "__main__":
    asyncio.run(main())

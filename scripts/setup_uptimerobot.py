#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UptimeRobot –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ExamFlow 2.0
"""

import requests
import time
from typing import Dict, Any, Optional

class UptimeRobotSetup:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ UptimeRobot API"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.uptimerobot.com/v2"
        self.headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Cache-Control': 'no-cache'
        }
    
    def create_monitor(self, name: str, url: str, monitor_type: int = 1) -> Optional[Dict[str, Any]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä –≤ UptimeRobot
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
            url: URL –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitor_type: 1 = HTTP(s), 2 = Keyword, 3 = Ping, 4 = Port
        """
        data = {
            'api_key': self.api_key,
            'format': 'json',
            'type': monitor_type,
            'url': url,
            'friendly_name': name,
            'interval': 300,  # 5 –º–∏–Ω—É—Ç
            'timeout': 30,
            'keyword_type': 1 if monitor_type == 2 else None,
            'keyword_value': 'healthy' if monitor_type == 2 else None,
            'http_username': '',
            'http_password': '',
            'port': 80 if monitor_type == 4 else None,
            'ignore_ssl_errors': 0
        }
        
        # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
        data = {k: v for k, v in data.items() if v is not None}
        
        try:
            response = requests.post(
                f"{self.base_url}/newMonitor",
                data=data,
                headers=self.headers,
                timeout=30
            )
            
            result = response.json()
            
            if result.get('stat') == 'ok':
                print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä '{name}' —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return result.get('monitor')
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ '{name}': {result.get('error', {}).get('message', 'Unknown error')}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞ '{name}': {e}")
            return None
    
    def get_monitors(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤"""
        data = {
            'api_key': self.api_key,
            'format': 'json'
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/getMonitors",
                data=data,
                headers=self.headers,
                timeout=30
            )
            
            result = response.json()
            
            if result.get('stat') == 'ok':
                return result
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {result.get('error', {}).get('message', 'Unknown error')}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {e}")
            return None
    
    def delete_monitor(self, monitor_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä"""
        data = {
            'api_key': self.api_key,
            'format': 'json',
            'id': monitor_id
        }
        
        try:
            response = requests.post(
                f"{self.base_url}/deleteMonitor",
                data=data,
                headers=self.headers,
                timeout=30
            )
            
            result = response.json()
            
            if result.get('stat') == 'ok':
                print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä {monitor_id} —É–¥–∞–ª–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ {monitor_id}: {result.get('error', {}).get('message', 'Unknown error')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞ {monitor_id}: {e}")
            return False


def setup_examflow_monitoring(api_key: str):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è ExamFlow"""
    
    if not api_key:
        print("‚ùå API –∫–ª—é—á UptimeRobot –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        print("–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://uptimerobot.com/dashboard.php#mySettings")
        return False
    
    setup = UptimeRobotSetup(api_key)
    
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ExamFlow 2.0...")
    
    # –°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    monitors = [
        {
            'name': 'ExamFlow - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
            'url': 'https://examflow.ru/',
            'type': 1  # HTTP
        },
        {
            'name': 'ExamFlow - Health Check',
            'url': 'https://examflow.ru/health/',
            'type': 1  # HTTP
        },
        {
            'name': 'ExamFlow - Simple Health',
            'url': 'https://examflow.ru/health/simple/',
            'type': 1  # HTTP
        },
        {
            'name': 'ExamFlow - Telegram Bot',
            'url': 'https://examflow.ru/bot/webhook/',
            'type': 1  # HTTP
        },
        {
            'name': 'ExamFlow - API Subjects',
            'url': 'https://examflow.ru/api/subjects/',
            'type': 1  # HTTP
        },
        {
            'name': 'ExamFlow - AI Chat',
            'url': 'https://examflow.ru/ai/chat/',
            'type': 1  # HTTP
        }
    ]
    
    created_monitors = []
    
    for monitor_config in monitors:
        print(f"\nüìä –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä: {monitor_config['name']}")
        monitor = setup.create_monitor(
            name=monitor_config['name'],
            url=monitor_config['url'],
            monitor_type=monitor_config['type']
        )
        
        if monitor:
            created_monitors.append(monitor)
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_monitors)} –º–æ–Ω–∏—Ç–æ—Ä–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã
    print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—ã:")
    for monitor in created_monitors:
        print(f"   - {monitor.get('friendly_name')} (ID: {monitor.get('id')})")
    
    print("\nüîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞–º–∏:")
    print("   Dashboard: https://uptimerobot.com/dashboard")
    print("   Settings: https://uptimerobot.com/dashboard.php#mySettings")
    
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UptimeRobot –¥–ª—è ExamFlow 2.0")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = input("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á UptimeRobot (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    
    if not api_key:
        print("\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API –∫–ª—é—á–∞:")
        print("1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://uptimerobot.com")
        print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings: https://uptimerobot.com/dashboard.php#mySettings")
        print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ API Key")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ —Å API –∫–ª—é—á–æ–º")
        return
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    success = setup_examflow_monitoring(api_key)
    
    if success:
        print("\nüéâ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
        print("   - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ UptimeRobot Dashboard")
        print("   - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: Email + Telegram + Webhook")
        print("   - –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 5 –º–∏–Ω—É—Ç")
        print("   - Timeout: 30 —Å–µ–∫—É–Ω–¥")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")


if __name__ == "__main__":
    main()

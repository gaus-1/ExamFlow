#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã 24/7 ExamFlow 2.0
"""

import requests
import time
import json
from typing import Dict, Any, List
from datetime import datetime

class SystemTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ExamFlow 2.0"""
    
    def __init__(self, base_url: str = "https://examflow.ru"):
        self.base_url = base_url
        self.results = []
        self.start_time = time.time()
    
    def test_endpoint(self, name: str, url: str, expected_status: int = 200, timeout: int = 30) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
        try:
            start_time = time.time()
            response = requests.get(url, timeout=timeout)
            response_time = time.time() - start_time
            
            result = {
                'name': name,
                'url': url,
                'status_code': response.status_code,
                'response_time': response_time,
                'success': response.status_code == expected_status,
                'timestamp': datetime.now().isoformat()
            }
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    result['data'] = data
                except Exception:
                    result['data'] = response.text[:200]
            
            self.results.append(result)
            return result
            
        except requests.exceptions.Timeout:
            result = {
                'name': name,
                'url': url,
                'status_code': 0,
                'response_time': timeout,
                'success': False,
                'error': 'Timeout',
                'timestamp': datetime.now().isoformat()
            }
            self.results.append(result)
            return result
            
        except Exception as e:
            result = {
                'name': name,
                'url': url,
                'status_code': 0,
                'response_time': 0,
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }
            self.results.append(result)
            return result
    
    def test_all_endpoints(self) -> List[Dict[str, Any]]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ExamFlow 2.0...")
        print("=" * 50)
        
        endpoints = [
            ("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", f"{self.base_url}/"),
            ("Health Check", f"{self.base_url}/health/"),
            ("Simple Health Check", f"{self.base_url}/health/simple/"),
            ("Features", f"{self.base_url}/features/"),
            ("Pricing", f"{self.base_url}/pricing/"),
            ("Subjects", f"{self.base_url}/learning/subjects/"),
            ("AI Chat", f"{self.base_url}/ai/chat/"),
            ("Telegram Bot Webhook", f"{self.base_url}/bot/webhook/"),
            ("Bot API Status", f"{self.base_url}/bot/api/status/"),
            ("API Subjects", f"{self.base_url}/api/subjects/"),
            ("API Tasks", f"{self.base_url}/api/tasks/random/"),
            ("API Health", f"{self.base_url}/api/health/"),
        ]
        
        for name, url in endpoints:
            print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {name}...")
            result = self.test_endpoint(name, url)
            
            if result['success']:
                print(f"   ‚úÖ {name}: {result['status_code']} ({result['response_time']:.2f}s)")
            else:
                print(f"   ‚ùå {name}: {result.get('error', result['status_code'])}")
        
        return self.results
    
    def test_performance(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
        print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        response_times = []
        for i in range(5):
            result = self.test_endpoint(f"Performance Test {i+1}", f"{self.base_url}/")
            response_times.append(result['response_time'])
            time.sleep(1)
        
        avg_response_time = sum(response_times) / len(response_times)
        max_response_time = max(response_times)
        min_response_time = min(response_times)
        
        performance = {
            'average_response_time': avg_response_time,
            'max_response_time': max_response_time,
            'min_response_time': min_response_time,
            'response_times': response_times,
            'performance_grade': self._get_performance_grade(avg_response_time)
        }
        
        print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.2f}s")
        print(f"   üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_response_time:.2f}s")
        print(f"   üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_response_time:.2f}s")
        print(f"   üìä –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {performance['performance_grade']}")
        
        return performance
    
    def _get_performance_grade(self, response_time: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if response_time < 1:
            return "A+ (–û—Ç–ª–∏—á–Ω–æ)"
        elif response_time < 2:
            return "A (–•–æ—Ä–æ—à–æ)"
        elif response_time < 3:
            return "B (–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)"
        elif response_time < 5:
            return "C (–ú–µ–¥–ª–µ–Ω–Ω–æ)"
        else:
            return "D (–û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ)"
    
    def test_health_check_details(self) -> Dict[str, Any]:
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check"""
        print("\nüè• –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
        
        result = self.test_endpoint("Detailed Health Check", f"{self.base_url}/health/")
        
        if result['success'] and 'data' in result:
            health_data = result['data']
            
            print(f"   üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health_data.get('status', 'Unknown')}")
            print(f"   üìä –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {health_data.get('response_time', 0):.2f}s")
            
            if 'checks' in health_data:
                print("   üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
                for component, check in health_data['checks'].items():
                    status = check.get('status', 'Unknown')
                    status_icon = "‚úÖ" if status == 'healthy' else "‚ùå"
                    print(f"      {status_icon} {component}: {status}")
            
            if 'system_info' in health_data:
                sys_info = health_data['system_info']
                print(f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {sys_info.get('memory_usage_mb', 0):.1f}MB")
                print(f"   üìä –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {sys_info.get('uptime_seconds', 0):.0f}s")
        
        return result
    
    def generate_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        total_tests = len(self.results)
        successful_tests = sum(1 for r in self.results if r['success'])
        failed_tests = total_tests - successful_tests
        
        success_rate = (successful_tests / total_tests * 100) if total_tests > 0 else 0
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        healthy_components = []
        unhealthy_components = []
        
        for result in self.results:
            if result['success']:
                healthy_components.append(result['name'])
            else:
                unhealthy_components.append(result['name'])
        
        report = {
            'test_summary': {
                'total_tests': total_tests,
                'successful_tests': successful_tests,
                'failed_tests': failed_tests,
                'success_rate': success_rate,
                'test_duration': time.time() - self.start_time
            },
            'healthy_components': healthy_components,
            'unhealthy_components': unhealthy_components,
            'detailed_results': self.results,
            'timestamp': datetime.now().isoformat(),
            'recommendations': self._get_recommendations(success_rate, unhealthy_components)
        }
        
        return report
    
    def _get_recommendations(self, success_rate: float, unhealthy_components: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        recommendations = []
        
        if success_rate < 80:
            recommendations.append("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ú–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Render Dashboard.")
        
        if success_rate < 95:
            recommendations.append("üü° –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ.")
        
        if 'Health Check' in unhealthy_components:
            recommendations.append("üè• –ü—Ä–æ–≤–µ—Ä—å—Ç–µ health check endpoint - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        
        if 'Telegram Bot Webhook' in unhealthy_components:
            recommendations.append("ü§ñ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞ –∏ webhook.")
        
        if 'AI Chat' in unhealthy_components:
            recommendations.append("ü§ñ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò —Å–µ—Ä–≤–∏—Å–æ–≤ (Gemini API).")
        
        if success_rate >= 95:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
        
        return recommendations
    
    def print_report(self, report: Dict[str, Any]):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "=" * 60)
        print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –°–ò–°–¢–ï–ú–´ EXAMFLOW 2.0")
        print("=" * 60)
        
        summary = report['test_summary']
        print("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {summary['successful_tests']}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {summary['failed_tests']}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary['success_rate']:.1f}%")
        print(f"   –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {summary['test_duration']:.1f}s")
        
        print("\n‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (" + str(len(report['healthy_components'])) + "):")
        for component in report['healthy_components']:
            print("   - " + str(component))
        
        if report['unhealthy_components']:
            print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (" + str(len(report['unhealthy_components'])) + "):")
            for component in report['unhealthy_components']:
                print("   - " + str(component))
        
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for recommendation in report['recommendations']:
            print("   " + str(recommendation))
        
        print("\nüïê –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: " + str(report['timestamp']))
        print("=" * 60)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã ExamFlow 2.0")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ 24/7...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = SystemTester()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tester.test_all_endpoints()
    tester.test_performance()
    tester.test_health_check_details()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    report = tester.generate_report()
    tester.print_report(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    with open('system_test_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print("\nüìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: system_test_report.json")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if report['test_summary']['success_rate'] >= 95:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ 24/7!")
        exit(0)
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—ã—à–µ.")
        exit(1)


if __name__ == "__main__":
    main()

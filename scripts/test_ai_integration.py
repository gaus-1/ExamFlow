#!/usr/bin/env python
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ExamFlow
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ò–ò –Ω–∞ —Å–∞–π—Ç–µ, –≤ API –∏ –≤ Telegram –±–æ—Ç–µ
"""

import os
import sys
import requests
import json
import re
import time
import asyncio
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')

try:
    import django
    django.setup()
    
    from ai.orchestrator import AIOrchestrator
    from ai.clients.gemini_client import GeminiClient
    from core.container import Container
    from django.conf import settings
except ImportError as e:
    print(f"‚ö†Ô∏è  Django –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {e}")
    AIOrchestrator = None
    GeminiClient = None
    Container = None
    settings = None

class AITester:
    def __init__(self, base_url='http://localhost:8000'):
        self.base_url = base_url
        self.session = requests.Session()
        self.results = []
    
    def log_result(self, test_name: str, success: bool, details: str = ""):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        self.results.append((test_name, success, details))
        status = "‚úÖ" if success else "‚ùå"
        print(f"  {status} {test_name}: {details}")
    
    def test_website_ai_interface(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ —Å–∞–π—Ç–µ"""
        print("\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ò–ù–¢–ï–†–§–ï–ô–°–ê –ù–ê –°–ê–ô–¢–ï:")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            response = self.session.get(self.base_url, timeout=10)
            
            if response.status_code != 200:
                self.log_result("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–π—Ç–∞", False, f"HTTP {response.status_code}")
                return
            
            self.log_result("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–π—Ç–∞", True, f"HTTP {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —ç–ª–µ–º–µ–Ω—Ç—ã
            html = response.text
            ai_elements = [
                ("AI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "ai-interface"),
                ("AI –∏–Ω–ø—É—Ç", "ai-input"),
                ("AI –∫–Ω–æ–ø–∫–∞", "ai-send-btn"),
                ("AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "ai-suggestion"),
                ("AI —á–∞—Ç", "ai-chat"),
                ("AI –≤–∏–¥–∂–µ—Ç", "ai-widget"),
            ]
            
            for name, selector in ai_elements:
                found = selector in html
                self.log_result(name, found, "–Ω–∞–π–¥–µ–Ω" if found else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JavaScript
            js_found = "examflow-main.js" in html
            self.log_result("JavaScript", js_found, "–∑–∞–≥—Ä—É–∂–µ–Ω" if js_found else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
        except Exception as e:
            self.log_result("–°–∞–π—Ç AI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", False, str(e))
    
    def test_ai_api_endpoint(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI API endpoint"""
        print("\nüîå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI API:")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
            response = self.session.get(self.base_url)
            csrf_match = re.search(r'csrfmiddlewaretoken[^>]*value=["\']([^"\']*)["\']', response.text)
            
            if not csrf_match:
                self.log_result("CSRF —Ç–æ–∫–µ–Ω", False, "–Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            csrf_token = csrf_match.group(1)
            self.log_result("CSRF —Ç–æ–∫–µ–Ω", True, "–ø–æ–ª—É—á–µ–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            test_prompts = [
                "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è?",
                "–ö–∞–∫ —Ä–µ—à–∞—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è?"
            ]
            
            for i, prompt in enumerate(test_prompts, 1):
                try:
                    ai_response = self.session.post(
                        f"{self.base_url}/ai/api/",
                        json={'prompt': prompt},
                        headers={
                            'X-CSRFToken': csrf_token,
                            'Content-Type': 'application/json'
                        },
                        timeout=30
                    )
                    
                    if ai_response.status_code == 200:
                        try:
                            data = ai_response.json()
                            if 'answer' in data and data['answer']:
                                answer_preview = data['answer'][:50] + "..."
                                self.log_result(f"AI –∑–∞–ø—Ä–æ—Å {i}", True, f"–æ—Ç–≤–µ—Ç: {answer_preview}")
                            else:
                                self.log_result(f"AI –∑–∞–ø—Ä–æ—Å {i}", False, "–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                        except json.JSONDecodeError:
                            self.log_result(f"AI –∑–∞–ø—Ä–æ—Å {i}", False, "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
                    else:
                        self.log_result(f"AI –∑–∞–ø—Ä–æ—Å {i}", False, f"HTTP {ai_response.status_code}")
                        
                except Exception as e:
                    self.log_result(f"AI –∑–∞–ø—Ä–æ—Å {i}", False, str(e))
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(1)
                
        except Exception as e:
            self.log_result("AI API", False, str(e))
    
    def test_direct_ai_components(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é"""
        print("\n‚öôÔ∏è  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
        
        if not Container:
            self.log_result("Django setup", False, "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Container
            ai_orchestrator = Container.ai_orchestrator()
            if ai_orchestrator:
                self.log_result("AI Orchestrator", True, "—Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Container")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
                try:
                    response = ai_orchestrator.process_query("–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞")  # type: ignore
                    if response and isinstance(response, dict) and 'answer' in response:
                        answer_preview = response['answer'][:50] + "..."
                        self.log_result("–ü—Ä—è–º–æ–π AI –≤—ã–∑–æ–≤", True, f"–æ—Ç–≤–µ—Ç: {answer_preview}")
                    else:
                        self.log_result("–ü—Ä—è–º–æ–π AI –≤—ã–∑–æ–≤", False, "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")
                except Exception as e:
                    self.log_result("–ü—Ä—è–º–æ–π AI –≤—ã–∑–æ–≤", False, str(e))
            else:
                self.log_result("AI Orchestrator", False, "–Ω–µ —Å–æ–∑–¥–∞–Ω")
                
        except Exception as e:
            self.log_result("AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", False, str(e))
    
    def test_telegram_bot_ai(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI –≤ Telegram –±–æ—Ç–µ"""
        print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –í TELEGRAM –ë–û–¢–ï:")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –±–æ—Ç–∞
            from telegram_bot.services.ai_dialogs import get_ai_response
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å –±–æ—Ç–∞
            test_queries = [
                "–ü—Ä–∏–≤–µ—Ç!",
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª?",
                "–ü–æ–º–æ–≥–∏ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π"
            ]
            
            for i, query in enumerate(test_queries, 1):
                try:
                    response = get_ai_response(query, task_type='chat')
                    if response and not response.startswith('–û—à–∏–±–∫–∞'):
                        preview = response[:50] + "..."
                        self.log_result(f"–ë–æ—Ç AI –∑–∞–ø—Ä–æ—Å {i}", True, f"–æ—Ç–≤–µ—Ç: {preview}")
                    else:
                        self.log_result(f"–ë–æ—Ç AI –∑–∞–ø—Ä–æ—Å {i}", False, response or "–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                except Exception as e:
                    self.log_result(f"–ë–æ—Ç AI –∑–∞–ø—Ä–æ—Å {i}", False, str(e))
                
                time.sleep(0.5)
                
        except ImportError as e:
            self.log_result("–ò–º–ø–æ—Ä—Ç –±–æ—Ç –º–æ–¥—É–ª–µ–π", False, str(e))
        except Exception as e:
            self.log_result("Telegram AI", False, str(e))
    
    def test_ai_configuration(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI"""
        print("\nüîß –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò AI:")
        
        try:
            if settings:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
                gemini_key = getattr(settings, 'GEMINI_API_KEY', None)
                if gemini_key and gemini_key != '<set-in-env>':
                    self.log_result("GEMINI_API_KEY", True, "–Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                else:
                    self.log_result("GEMINI_API_KEY", False, "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                debug = getattr(settings, 'DEBUG', False)
                self.log_result("DEBUG —Ä–µ–∂–∏–º", debug, "–≤–∫–ª—é—á–µ–Ω" if debug else "–≤—ã–∫–ª—é—á–µ–Ω")
                
            else:
                self.log_result("Django settings", False, "–Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã")
                
        except Exception as e:
            self.log_result("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", False, str(e))
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI EXAMFLOW")
        print("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        self.test_ai_configuration()
        self.test_website_ai_interface()
        self.test_ai_api_endpoint()
        self.test_direct_ai_components()
        self.test_telegram_bot_ai()
        
        # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        
        passed = 0
        failed = 0
        
        for test_name, success, details in self.results:
            status = "‚úÖ –ü–†–û–®–Å–õ" if success else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"{test_name:<25} | {status:<12} | {details}")
            if success:
                passed += 1
            else:
                failed += 1
        
        print("=" * 60)
        print(f"üìà –ò–¢–û–ì–û: {passed} –ø—Ä–æ—à–ª–∏, {failed} –æ—à–∏–±–æ–∫")
        
        if failed == 0:
            print("üéâ –í–°–ï AI –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        elif failed <= 2:
            print("‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        else:
            print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI —Å–∏—Å—Ç–µ–º—ã.")
        
        return failed <= 2

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = AITester()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\nüöÄ AI —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\nüîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å AI.")
    
    return success

if __name__ == "__main__":
    main()

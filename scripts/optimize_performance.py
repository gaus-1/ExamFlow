#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import subprocess
import sys
from pathlib import Path


def install_performance_tools():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("‚ö° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    tools = [
        "django-compressor",
        "Pillow",
        "django-debug-toolbar",
        "memory-profiler",
        "django-extensions",
    ]

    for tool in tools:
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", tool], check=True)
            print("‚úÖ {tool} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {tool}")


def optimize_static_files():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"""
    print("üìÅ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã...")

    settings_file = Path("examflow_project/settings.py")
    if not settings_file.exists():
        print("‚ùå –§–∞–π–ª settings.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with open(settings_file, encoding="utf-8") as f:
        content = f.read()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è
    compression_config = """
# –°–∂–∞—Ç–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è
COMPRESS_ENABLED = True
COMPRESS_OFFLINE = True
COMPRESS_CSS_FILTERS = [
    'compressor.filters.css_default.CssAbsoluteFilter',
    'compressor.filters.cssmin.CSSMinFilter',
    ]
COMPRESS_JS_FILTERS = [
    'compressor.filters.jsmin.JSMinFilter',
    ]

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏
STATICFILES_DIRS = [
    BASE_DIR / "static",
    ]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WhiteNoise
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True
"""

    if "STATICFILES_STORAGE" not in content:
        content = content.replace(
            "STATICFILES_DIRS = [", compression_config + "\nSTATICFILES_DIRS = ["
        )

        with open(settings_file, "w", encoding="utf-8") as f:
            f.write(content)
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    else:
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∂–∞—Ç–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")


def add_lazy_loading():
    """–î–æ–±–∞–≤–ª—è–µ—Ç lazy loading –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("üñºÔ∏è –î–æ–±–∞–≤–ª—è–µ–º lazy loading...")

    # –û–±–Ω–æ–≤–ª—è–µ–º base.html
    base_template = Path("templates/base.html")
    if base_template.exists():
        with open(base_template, encoding="utf-8") as f:
            content = f.read()

        # –î–æ–±–∞–≤–ª—è–µ–º lazy loading –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        content = content.replace("<img src=", '<img loading="lazy" src=')

        with open(base_template, "w", encoding="utf-8") as f:
            f.write(content)
        print("‚úÖ Lazy loading –¥–æ–±–∞–≤–ª–µ–Ω")
    else:
        print("‚ö†Ô∏è –®–∞–±–ª–æ–Ω base.html –Ω–µ –Ω–∞–π–¥–µ–Ω")


def optimize_images():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("üñºÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_optimizer = Path("core/utils/image_optimizer.py")
    image_optimizer.parent.mkdir(parents=True, exist_ok=True)

    optimizer_content = '''"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import os
from PIL import Image
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

def optimize_image(image_path: str, max_width: int = 800, quality: int = 85) -> str:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–±

    Args:
        image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        max_width: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è (1-100)

    Returns:
        –ü—É—Ç—å –∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    """
    try:
        with Image.open(image_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.mode in ('RGBA', 'LA', 'P'):
                img = img.convert('RGB')

            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.width > max_width:
                ratio = max_width / img.width
                new_height = int(img.height * ratio)
                img = img.resize((max_width, new_height), Image.Resampling.LANCZOS)

            # –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏—é
            output_path = str(Path(image_path).with_suffix('.webp'))
            img.save(output_path, 'WebP', quality=quality, optimize=True)

            logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {output_path}")
            return output_path

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
        return image_path

def optimize_all_images(static_dir: str = 'static/images'):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

    Args:
        static_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
    """
    static_path = Path(static_dir)
    if not static_path.exists():
        logger.warning("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {static_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    image_extensions = {'.png', '.jpg', '.jpeg', '.gi', '.bmp'}

    for file_path in static_path.rglob('*'):
        if file_path.suffix.lower() in image_extensions:
            optimize_image(str(file_path))

if __name__ == "__main__":
    optimize_all_images()
'''

    with open(image_optimizer, "w", encoding="utf-8") as f:
        f.write(optimizer_content)

    print("‚úÖ –°–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω")


def add_caching():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("üíæ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ...")

    settings_file = Path("examflow_project/settings.py")
    if not settings_file.exists():
        print("‚ùå –§–∞–π–ª settings.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    with open(settings_file, encoding="utf-8") as f:
        content = f.read()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    cache_config = """
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/1'),
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        'KEY_PREFIX': 'examflow',
        'TIMEOUT': 300,  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
}

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
"""

    if "CACHES = {" not in content:
        content = content.replace(
            "INSTALLED_APPS = [", cache_config + "\nINSTALLED_APPS = ["
        )

        with open(settings_file, "w", encoding="utf-8") as f:
            f.write(content)
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    else:
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")


def add_database_optimization():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")

    # –°–æ–∑–¥–∞–µ–º management –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î
    management_dir = Path("core/management/commands")
    management_dir.mkdir(parents=True, exist_ok=True)

    optimize_db_file = management_dir / "optimize_database.py"

    optimize_content = '''"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

from django.core.management.base import BaseCommand
from django.db import connection
from django.core.management import call_command

class Command(BaseCommand):
    help = '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'

    def handle(self, *args, **options):
        self.stdout.write('üóÑÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

        with connection.cursor() as cursor:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("ANALYZE;")
            self.stdout.write('‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω')

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π
            indexes = [
                "CREATE INDEX IF NOT EXISTS idx_fipi_data_subject ON core_fipidata(subject);",
                "CREATE INDEX IF NOT EXISTS idx_fipi_data_processed ON core_fipidata(is_processed);",
                "CREATE INDEX IF NOT EXISTS idx_data_chunk_subject ON core_datachunk(subject);",
                "CREATE INDEX IF NOT EXISTS idx_data_chunk_fipi_data ON core_datachunk(fipi_data_id);",
                "CREATE INDEX IF NOT EXISTS idx_unified_profile_user ON core_unifiedprofile(user_id);",
                "CREATE INDEX IF NOT EXISTS idx_user_progress_user ON core_userprogress(user_id);",
            ]

            for index_sql in indexes:
                try:
                    cursor.execute(index_sql)
                    self.stdout.write('‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω: {index_sql.split()[5]}')
                except Exception as e:
                    self.stdout.write('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}')

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        call_command('collectstatic', '--noinput')
        self.stdout.write('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã')

        self.stdout.write('üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
'''

    with open(optimize_db_file, "w", encoding="utf-8") as f:
        f.write(optimize_content)

    print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î —Å–æ–∑–¥–∞–Ω–∞")


def create_performance_monitor():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üìä –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    monitor_file = Path("core/utils/performance_monitor.py")
    monitor_file.parent.mkdir(parents=True, exist_ok=True)

    monitor_content = '''"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import time
import logging
from functools import wraps
from django.core.cache import cache
from django.db import connection

logger = logging.getLogger(__name__)

def monitor_performance(func_name: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π

    Args:
        func_name: –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            start_time = time.time()
            start_queries = len(connection.queries)

            try:
                result = func(*args, **kwargs)
                return result
            finally:
                end_time = time.time()
                end_queries = len(connection.queries)

                execution_time = end_time - start_time
                query_count = end_queries - start_queries

                name = func_name or func.__name__

                logger.info("Performance: {name} - {execution_time:.3f}s, {query_count} queries")

                # –ö—ç—à–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                if execution_time > 1.0:
                    logger.warning("Slow operation: {name} took {execution_time:.3f}s")

        return wrapper
    return decorator

def get_performance_stats():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    stats = {
        'cache_hits': cache.get('cache_hits', 0),
        'cache_misses': cache.get('cache_misses', 0),
        'total_queries': len(connection.queries),
        'slow_queries': len([q for q in connection.queries if float(q['time']) > 0.1]),
    }

    return stats

def log_slow_queries():
    """–õ–æ–≥–∏—Ä—É–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
    slow_queries = [q for q in connection.queries if float(q['time']) > 0.1]

    if slow_queries:
        logger.warning("Found {len(slow_queries)} slow queries:")
        for query in slow_queries:
            logger.warning("  {query['time']}s: {query['sql']}")
'''

    with open(monitor_file, "w", encoding="utf-8") as f:
        f.write(monitor_content)

    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω")


def run_performance_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    test_file = Path("tests/test_performance.py")
    test_file.parent.mkdir(parents=True, exist_ok=True)

    test_content = '''"""
–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import time
from django.test import TestCase, Client
from django.urls import reverse

class PerformanceTests(TestCase):
    def setUp(self):
        self.client = Client()

    def test_home_page_load_time(self):
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        start_time = time.time()
        response = self.client.get('/')
        end_time = time.time()

        self.assertEqual(response.status_code, 200)
        self.assertLess(end_time - start_time, 2.0)  # –ú–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥

    def test_ai_api_response_time(self):
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ AI API"""
        start_time = time.time()
        response = self.client.post('/ai/chat/', {
            'prompt': 'Test question'
        }, content_type='application/json')
        end_time = time.time()

        self.assertEqual(response.status_code, 200)
        self.assertLess(end_time - start_time, 5.0)  # –ú–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
'''

    with open(test_file, "w", encoding="utf-8") as f:
        f.write(test_content)

    print("‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    install_performance_tools()

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    optimize_static_files()

    # –î–æ–±–∞–≤–ª—è–µ–º lazy loading
    add_lazy_loading()

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    optimize_images()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    add_caching()

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ë–î
    add_database_optimization()

    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    create_performance_monitor()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç—ã
    run_performance_tests()

    print("üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py optimize_database")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py collectstatic")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")


if __name__ == "__main__":
    main()

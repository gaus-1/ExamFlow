#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∞–π—Ç–∞ –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
"""

import os
import django
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

from core.models import FIPIData, FIPISourceMap  # noqa: E402
from core.data_ingestion.ingestion_engine import IngestionEngine, TaskPriority  # noqa: E402
from django.utils import timezone  # noqa: E402

def init_source_map():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    print("üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
    
    from core.data_ingestion.fipi_structure_map import get_fipi_structure_map
    structure_map = get_fipi_structure_map()
    sources = structure_map.get_all_sources()
    
    created_count = 0
    for source in sources:
        source_obj, created = FIPISourceMap.objects.get_or_create(  # type: ignore
            source_id=source.id,
            defaults={
                'name': source.name,
                'url': source.url,
                'data_type': source.data_type.value,
                'exam_type': source.exam_type.value,
                'subject': source.subject,
                'priority': source.priority.value,
                'update_frequency': source.update_frequency.value,
                'file_format': source.file_format,
                'description': source.description,
            }
        )
        if created:
            created_count += 1
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    return created_count

def start_ingestion_engine():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–≤–∏–∂–æ–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    engine = IngestionEngine()
    engine.start()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    high_priority_sources = FIPISourceMap.objects.filter(priority=1)  # type: ignore
    for source in high_priority_sources:
        from core.data_ingestion.ingestion_engine import IngestionTask
        task = IngestionTask(
            id=f"task_{source.source_id}_{int(time.time())}",
            source_id=source.source_id,
            url=source.url,
            priority=TaskPriority.HIGH,
            data_type=source.data_type,
            created_at=timezone.now()
        )
        engine.task_queue.add_task(task)
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {high_priority_sources.count()} –∑–∞–¥–∞—á –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")
    return engine

def monitor_progress(engine, max_wait_time=300):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
    
    start_time = time.time()
    last_count = 0
    
    while time.time() - start_time < max_wait_time:
        current_count = FIPIData.objects.count()  # type: ignore
        
        if current_count > last_count:
            print(f"üìà –°–æ–±—Ä–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {current_count} (+{current_count - last_count})")
            last_count = current_count
        
        if current_count >= 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã
            print("‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∞–π—Ç–∞!")
            break
            
        time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    
    return FIPIData.objects.count()  # type: ignore

def process_pdf_documents():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
    print("üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    from core.data_ingestion.pdf_processor import PDFProcessor, process_document
    _processor = PDFProcessor()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ PDF
    pdf_docs = FIPIData.objects.filter(  # type: ignore
        data_type__in=['demo_variant', 'specification', 'codefier', 'document'],
        is_processed=False,
        url__iendswith='.pdf'
    )[:5]
    
    processed_count = 0
    for doc in pdf_docs:
        try:
            result = process_document(doc.url, doc.id)  # type: ignore
            if isinstance(result, dict) and result.get('status') == 'completed':
                processed_count += 1
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {doc.title}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {doc.title}: {e}")
    
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    return processed_count

def create_sample_data():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    sample_docs = [
        {
            'title': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ï–ì–≠ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ 2024',
            'content': '–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π –ø–æ –∞–ª–≥–µ–±—Ä–µ, –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏ –Ω–∞—á–∞–ª–∞–º –∞–Ω–∞–ª–∏–∑–∞...',
            'data_type': 'demo_variant',
            'subject': 'mathematics',
            'exam_type': 'ege',
            'url': 'https://fipi.ru/ege/demo-varianty-po-matematike',
            'content_hash': 'sample_math_2024_hash',
            'collected_at': timezone.now()
        },
        {
            'title': '–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –ï–ì–≠ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É 2024',
            'content': '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–∫–∑–∞–º–µ–Ω–∞, –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è, —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π...',
            'data_type': 'specification',
            'subject': 'russian',
            'exam_type': 'ege',
            'url': 'https://fipi.ru/ege/specifikacii-po-russkomu-yazyku',
            'content_hash': 'sample_russian_2024_hash',
            'collected_at': timezone.now()
        },
        {
            'title': '–ö–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ï–ì–≠ –ø–æ —Ñ–∏–∑–∏–∫–µ 2024',
            'content': '–≠–ª–µ–º–µ–Ω—Ç—ã —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –Ω–∞ –ï–ì–≠ –ø–æ —Ñ–∏–∑–∏–∫–µ...',
            'data_type': 'codifier',
            'subject': 'physics',
            'exam_type': 'ege',
            'url': 'https://fipi.ru/ege/kodifikatory-po-fizike',
            'content_hash': 'sample_physics_2024_hash',
            'collected_at': timezone.now()
        }
    ]
    
    created_count = 0
    for doc_data in sample_docs:
        doc, created = FIPIData.objects.get_or_create(  # type: ignore
            url=doc_data['url'],
            defaults=doc_data
        )
        if created:
            created_count += 1
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {doc.title}")
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    return created_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∞–π—Ç–∞"""
    print("üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ù–ê–ü–û–õ–ù–ï–ù–ò–ï –°–ê–ô–¢–ê EXAMFLOW 2.0")
    print("=" * 60)
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        sources_created = init_source_map()
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        samples_created = create_sample_data()
        
        # 3. –ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        engine = start_ingestion_engine()
        
        # 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        docs_collected = monitor_progress(engine)
        
        # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        pdf_processed = process_pdf_documents()
        
        # 6. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–∫–∞
        engine.stop()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"üó∫Ô∏è  –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {sources_created}")
        print(f"üìù –ü—Ä–∏–º–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {samples_created}")
        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: {docs_collected}")
        print(f"üìÑ PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {pdf_processed}")
        print(f"üìã –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {FIPIData.objects.count()}")  # type: ignore
        
        if FIPIData.objects.count() > 0:  # type: ignore    
            print("\nüéâ –°–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω –¥–∞–Ω–Ω—ã–º–∏!")
            print("\nüìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python manage.py runserver")
            print("2. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç: http://localhost:8000")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
            print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏")
        else:
            print("\n‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∞–π—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()

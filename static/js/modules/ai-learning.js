/**
 * ü§ñ AI Learning System –¥–ª—è ExamFlow
 * 
 * –°–∏—Å—Ç–µ–º–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ JavaScript –¥–ª—è:
 * - –ê–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * - –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
 */

class AILearningSystem {
    constructor() {
        this.userBehavior = {};
        this.learningModel = null;
        this.recommendations = {};
        this.isInitialized = false;
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
     */
    async init() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.loadUserBehavior();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            await this.initLearningModel();
            
            // –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏
            this.startBehaviorTracking();
            
            this.isInitialized = true;
            console.log('ü§ñ AI Learning System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI Learning System:', error);
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
     */
    async initLearningModel() {
        try {
            // –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            this.learningModel = {
                // –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
                weights: {
                    subject_preference: 0.3,
                    difficulty_level: 0.25,
                    time_pattern: 0.2,
                    interaction_frequency: 0.15,
                    success_rate: 0.1
                },
                
                // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                thresholds: {
                    high_preference: 0.8,
                    medium_preference: 0.5,
                    low_preference: 0.3
                },
                
                // –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                predictionHistory: []
            };
            
            console.log('üìä –ú–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏:', error);
        }
    }
    
    /**
     * –ù–∞—á–∞–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    startBehaviorTracking() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫–∏
        this.trackClicks();
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        this.trackPageTime();
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥
        this.trackScrolling();
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ä–º–∞–º–∏
        this.trackFormInteractions();
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        this.trackNavigation();
        
        console.log('üëÅÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–æ');
    }
    
    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤
     */
    trackClicks() {
        document.addEventListener('click', (event) => {
            const target = event.target;
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
            if (target.closest('.subject-card')) {
                this.recordSubjectClick(target.closest('.subject-card'));
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
            if (target.closest('.task-item')) {
                this.recordTaskClick(target.closest('.task-item'));
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º
            if (target.closest('.btn')) {
                this.recordButtonClick(target.closest('.btn'));
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (target.closest('.nav-link')) {
                this.recordNavigationClick(target.closest('.nav-link'));
            }
        });
    }
    
    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
     */
    trackPageTime() {
        let startTime = Date.now();
        let isPageVisible = true;
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                isPageVisible = false;
                this.recordPageTime(startTime, Date.now());
            } else {
                isPageVisible = true;
                startTime = Date.now();
            }
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É—Ö–æ–¥ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            if (isPageVisible) {
                this.recordPageTime(startTime, Date.now());
            }
        });
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è
        setInterval(() => {
            if (isPageVisible) {
                this.recordPageTime(startTime, Date.now());
                startTime = Date.now();
            }
        }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }
    
    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
     */
    trackScrolling() {
        let scrollDepth = 0;
        let maxScrollDepth = 0;
        
        window.addEventListener('scroll', () => {
            const currentScroll = window.pageYOffset;
            const documentHeight = document.documentElement.scrollHeight - window.innerHeight;
            const scrollPercentage = (currentScroll / documentHeight) * 100;
            
            scrollDepth = scrollPercentage;
            maxScrollDepth = Math.max(maxScrollDepth, scrollPercentage);
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 25%
            if (Math.floor(scrollPercentage / 25) > Math.floor((scrollPercentage - 1) / 25)) {
                this.recordScrollDepth(scrollPercentage);
            }
        });
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            this.recordScrollDepth(maxScrollDepth, true);
        });
    }
    
    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–æ—Ä–º–∞–º–∏
     */
    trackFormInteractions() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
        document.addEventListener('focusin', (event) => {
            if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
                this.recordFormInteraction('focus', event.target);
            }
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        document.addEventListener('input', (event) => {
            if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
                this.recordFormInteraction('input', event.target);
            }
        });
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º
        document.addEventListener('submit', (event) => {
            this.recordFormInteraction('submit', event.target);
        });
    }
    
    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    trackNavigation() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        let currentUrl = window.location.href;
        
        setInterval(() => {
            if (window.location.href !== currentUrl) {
                this.recordPageNavigation(currentUrl, window.location.href);
                currentUrl = window.location.href;
            }
        }, 1000);
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞
        window.addEventListener('popstate', () => {
            this.recordPageNavigation(currentUrl, window.location.href);
            currentUrl = window.location.href;
        });
    }
    
    /**
     * –ó–∞–ø–∏—Å—å –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    recordBehavior(type, data) {
        if (!this.userBehavior[type]) {
            this.userBehavior[type] = [];
        }
        
        this.userBehavior[type].push(data);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        if (this.userBehavior[type].length > 100) {
            this.userBehavior[type] = this.userBehavior[type].slice(-50);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        this.saveUserBehavior();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
        if (this.userBehavior[type].length % 10 === 0) {
            this.analyzeBehavior();
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    saveUserBehavior() {
        try {
            localStorage.setItem('examflow_user_behavior', JSON.stringify(this.userBehavior));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è:', error);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    loadUserBehavior() {
        try {
            const saved = localStorage.getItem('examflow_user_behavior');
            if (saved) {
                this.userBehavior = JSON.parse(saved);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è:', error);
            this.userBehavior = {};
        }
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    analyzeBehavior() {
        try {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
            const subjectPreferences = this.analyzeSubjectPreferences();
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            const difficultyPreferences = this.analyzeDifficultyPreferences();
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏
            const timePatterns = this.analyzeTimePatterns();
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            const interactionPatterns = this.analyzeInteractionPatterns();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.updateUserProfile({
                subject_preferences: subjectPreferences,
                difficulty_preferences: difficultyPreferences,
                time_patterns: timePatterns,
                interaction_patterns: interactionPatterns,
                last_updated: Date.now()
            });
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            this.generateRecommendations();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è:', error);
        }
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
     */
    analyzeSubjectPreferences() {
        const subjectClicks = this.userBehavior.subject_click || [];
        const preferences = {};
        
        subjectClicks.forEach(click => {
            const subject = click.subject;
            if (!preferences[subject]) {
                preferences[subject] = {
                    clicks: 0,
                    last_click: 0,
                    exam_types: new Set()
                };
            }
            
            preferences[subject].clicks++;
            preferences[subject].last_click = Math.max(preferences[subject].last_click, click.timestamp);
            preferences[subject].exam_types.add(click.exam_type);
        });
        
        // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        const now = Date.now();
        Object.keys(preferences).forEach(subject => {
            const data = preferences[subject];
            const recency = Math.max(0, 1 - (now - data.last_click) / (7 * 24 * 60 * 60 * 1000)); // 7 –¥–Ω–µ–π
            const frequency = Math.min(1, data.clicks / 10); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 10 –∫–ª–∏–∫–∞–º
            
            data.preference_score = (frequency * 0.6) + (recency * 0.4);
            data.exam_types = Array.from(data.exam_types);
        });
        
        return preferences;
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
     */
    analyzeDifficultyPreferences() {
        const taskClicks = this.userBehavior.task_click || [];
        const preferences = {};
        
        taskClicks.forEach(click => {
            const difficulty = click.difficulty;
            if (!preferences[difficulty]) {
                preferences[difficulty] = {
                    clicks: 0,
                    last_click: 0
                };
            }
            
            preferences[difficulty].clicks++;
            preferences[difficulty].last_click = Math.max(preferences[difficulty].last_click, click.timestamp);
        });
        
        return preferences;
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
     */
    analyzeTimePatterns() {
        const pageTimes = this.userBehavior.page_time || [];
        const patterns = {
            total_time: 0,
            average_time: 0,
            preferred_hours: {},
            preferred_days: {}
        };
        
        pageTimes.forEach(timeData => {
            patterns.total_time += timeData.duration;
            
            const date = new Date(timeData.timestamp);
            const hour = date.getHours();
            const day = date.getDay();
            
            patterns.preferred_hours[hour] = (patterns.preferred_hours[hour] || 0) + 1;
            patterns.preferred_days[day] = (patterns.preferred_days[day] || 0) + 1;
        });
        
        if (pageTimes.length > 0) {
            patterns.average_time = patterns.total_time / pageTimes.length;
        }
        
        return patterns;
    }
    
    /**
     * –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
     */
    analyzeInteractionPatterns() {
        const buttonClicks = this.userBehavior.button_click || [];
        const formInteractions = this.userBehavior.form_interaction || [];
        const scrollDepths = this.userBehavior.scroll_depth || [];
        
        const patterns = {
            button_preferences: {},
            form_engagement: formInteractions.length,
            scroll_engagement: 0,
            interaction_frequency: buttonClicks.length + formInteractions.length
        };
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–∞–º
        buttonClicks.forEach(click => {
            const type = click.button_type;
            patterns.button_preferences[type] = (patterns.button_preferences[type] || 0) + 1;
        });
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥
        if (scrollDepths.length > 0) {
            const avgDepth = scrollDepths.reduce((sum, scroll) => sum + scroll.depth, 0) / scrollDepths.length;
            patterns.scroll_engagement = avgDepth;
        }
        
        return patterns;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    updateUserProfile(profile) {
        this.userBehavior.profile = profile;
        this.saveUserBehavior();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        this.sendProfileToServer(profile);
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    generateRecommendations() {
        try {
            const profile = this.userBehavior.profile;
            if (!profile) return;
            
            const recommendations = {
                subjects: this.recommendSubjects(profile),
                tasks: this.recommendTasks(profile),
                content: this.recommendContent(profile),
                timing: this.recommendTiming(profile)
            };
            
            this.recommendations = recommendations;
            this.applyRecommendations(recommendations);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
        }
    }
    
    /**
     * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
     */
    recommendSubjects(profile) {
        const subjectPrefs = profile.subject_preferences || {};
        const recommendations = [];
        
        // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ–º
        Object.entries(subjectPrefs)
            .sort(([,a], [,b]) => b.preference_score - a.preference_score)
            .slice(0, 3)
            .forEach(([subject, data]) => {
                recommendations.push({
                    subject: subject,
                    reason: `–í—ã —á–∞—Å—Ç–æ –∏–∑—É—á–∞–µ—Ç–µ ${subject} (${data.clicks} —Ä–∞–∑)`,
                    priority: 'high'
                });
            });
        
        return recommendations;
    }
    
    /**
     * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
     */
    recommendTasks(profile) {
        const difficultyPrefs = profile.difficulty_preferences || {};
        const recommendations = [];
        
        // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        const preferredDifficulty = Object.keys(difficultyPrefs)
            .sort((a, b) => difficultyPrefs[b].clicks - difficultyPrefs[a].clicks)[0];
        
        if (preferredDifficulty) {
            recommendations.push({
                difficulty: preferredDifficulty,
                reason: `–í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∑–∞–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ${preferredDifficulty}`,
                priority: 'medium'
            });
        }
        
        return recommendations;
    }
    
    /**
     * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
     */
    recommendContent(profile) {
        const interactionPatterns = profile.interaction_patterns || {};
        const recommendations = [];
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        if (interactionPatterns.scroll_engagement > 70) {
            recommendations.push({
                type: 'detailed_content',
                reason: '–í—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞–µ—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç',
                priority: 'high'
            });
        }
        
        if (interactionPatterns.form_engagement > 5) {
            recommendations.push({
                type: 'interactive_content',
                reason: '–í—ã –∞–∫—Ç–∏–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç–µ —Å —Ñ–æ—Ä–º–∞–º–∏',
                priority: 'medium'
            });
        }
        
        return recommendations;
    }
    
    /**
     * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    recommendTiming(profile) {
        const timePatterns = profile.time_patterns || {};
        const recommendations = [];
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if (timePatterns.preferred_hours) {
            const bestHour = Object.entries(timePatterns.preferred_hours)
                .sort(([,a], [,b]) => b - a)[0];
            
            if (bestHour) {
                recommendations.push({
                    type: 'optimal_time',
                    hour: parseInt(bestHour[0]),
                    reason: `–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: ${bestHour[0]}:00`,
                    priority: 'medium'
                });
            }
        }
        
        return recommendations;
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    applyRecommendations(recommendations) {
        try {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
            this.applySubjectRecommendations(recommendations.subjects);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
            this.applyTaskRecommendations(recommendations.tasks);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            this.applyContentRecommendations(recommendations.content);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            this.applyTimingRecommendations(recommendations.timing);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
     */
    applySubjectRecommendations(subjectRecommendations) {
        subjectRecommendations.forEach(rec => {
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            const subjectElements = document.querySelectorAll(`[data-subject="${rec.subject}"]`);
            subjectElements.forEach(element => {
                element.classList.add('recommended');
                element.setAttribute('title', rec.reason);
            });
        });
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
     */
    applyTaskRecommendations(taskRecommendations) {
        taskRecommendations.forEach(rec => {
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            const taskElements = document.querySelectorAll(`[data-difficulty="${rec.difficulty}"]`);
            taskElements.forEach(element => {
                element.classList.add('recommended-difficulty');
                element.setAttribute('title', rec.reason);
            });
        });
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
     */
    applyContentRecommendations(contentRecommendations) {
        contentRecommendations.forEach(rec => {
            if (rec.type === 'detailed_content') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π
                document.body.classList.add('show-detailed-content');
            }
            
            if (rec.type === 'interactive_content') {
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                document.body.classList.add('show-interactive-content');
            }
        });
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    applyTimingRecommendations(timingRecommendations) {
        timingRecommendations.forEach(rec => {
            if (rec.type === 'optimal_time') {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª—É—á—à–µ–º –≤—Ä–µ–º–µ–Ω–∏
                this.showOptimalTimeNotification(rec);
            }
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª—É—á—à–µ–º –≤—Ä–µ–º–µ–Ω–∏
     */
    showOptimalTimeNotification(timingRec) {
        const currentHour = new Date().getHours();
        const isOptimalTime = Math.abs(currentHour - timingRec.hour) <= 1;
        
        if (isOptimalTime) {
            this.showNotification(
                `üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!`,
                timingRec.reason,
                'success'
            );
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showNotification(title, message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notification = document.createElement('div');
        notification.className = `ai-notification ai-notification-${type}`;
        notification.innerHTML = `
            <div class="notification-header">
                <strong>${title}</strong>
                <button class="notification-close">&times;</button>
            </div>
            <div class="notification-body">${message}</div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#d4edda' : '#d1ecf1'};
            border: 1px solid ${type === 'success' ? '#c3e6cb' : '#bee5eb'};
            border-radius: 8px;
            padding: 15px;
            max-width: 300px;
            z-index: 10000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideInRight 0.3s ease-out;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(notification);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        notification.querySelector('.notification-close').addEventListener('click', () => {
            notification.remove();
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     */
    async sendProfileToServer(profile) {
        try {
            const response = await fetch('/api/update-user-profile/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCSRFToken()
                },
                body: JSON.stringify(profile)
            });
            
            if (response.ok) {
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞
     */
    getCSRFToken() {
        return document.querySelector('[name=csrfmiddlewaretoken]')?.value || '';
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
     */
    getRecommendations() {
        return this.recommendations;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getUserProfile() {
        return this.userBehavior.profile;
    }
    
    /**
     * –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    resetUserData() {
        this.userBehavior = {};
        this.recommendations = {};
        localStorage.removeItem('examflow_user_behavior');
        console.log('üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.aiLearningSystem = new AILearningSystem();
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = AILearningSystem;
}

/**
 * üîå ExamFlow API Client
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API (ES2025+)
 */

class APIClient {
  #baseURL;
  #defaultHeaders;
  #abortController;

  constructor(baseURL = '') {
    this.#baseURL = baseURL;
    this.#defaultHeaders = {
      'Content-Type': 'application/json',
    };
    this.#abortController = new AbortController();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç CSRF —Ç–æ–∫–µ–Ω –∏–∑ cookies –∏–ª–∏ meta-—Ç–µ–≥–æ–≤
   * @returns {string} CSRF —Ç–æ–∫–µ–Ω
   */
  #getCSRFToken() {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ cookies
    const cookies = document.cookie.split(';');
    for (const cookie of cookies) {
      const [name, value] = cookie.trim().split('=');
      if (name === 'csrftoken') {
        return decodeURIComponent(value);
      }
    }
    
    // Fallback: –ø–æ–∏—Å–∫ –≤ meta-—Ç–µ–≥–∞—Ö
    const csrfMeta = document.querySelector('meta[name="csrf-token"]');
    return csrfMeta?.getAttribute('content') ?? '';
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏
   * @param {string} endpoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
   * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {Promise<Object>} –û—Ç–≤–µ—Ç API
   */
  async #makeRequest(endpoint, options = {}) {
    const url = new URL(endpoint, this.#baseURL);
    
    const config = {
      headers: {
        ...this.#defaultHeaders,
        'X-CSRFToken': this.#getCSRFToken(),
        ...options.headers,
      },
      signal: this.#abortController.signal,
      ...options,
    };

    try {
      const response = await fetch(url, config);
      
      if (!response.ok) {
        throw new APIError(
          `HTTP ${response.status}: ${response.statusText}`,
          response.status,
          await response.text()
        );
      }
      
      const contentType = response.headers.get('content-type');
      if (contentType?.includes('application/json')) {
        return await response.json();
      }
      
      return await response.text();
      
    } catch (error) {
      if (error.name === 'AbortError') {
        throw new APIError('–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω', 0, 'Request aborted');
      }
      
      if (error instanceof APIError) {
        throw error;
      }
      
      throw new APIError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 0, error.message);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∫ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
   * @param {string} prompt - –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –û—Ç–≤–µ—Ç AI
   */
  async askAI(prompt) {
    if (!prompt?.trim()) {
      throw new APIError('–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å', 400, 'Prompt is required');
    }

    return await this.#makeRequest('/ai/api/', {
      method: 'POST',
      body: JSON.stringify({ prompt: prompt.trim() }),
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
   */
  async getSubjects() {
    return await this.#makeRequest('/api/subjects/');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É
   * @param {number} subjectId - ID –ø—Ä–µ–¥–º–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Promise<Object>} –ó–∞–¥–∞—á–∞
   */
  async getRandomTask(subjectId = null) {
    const endpoint = subjectId 
      ? `/api/tasks/random/?subject=${subjectId}`
      : '/api/tasks/random/';
    
    return await this.#makeRequest(endpoint);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É
   * @param {number} taskId - ID –∑–∞–¥–∞—á–∏
   * @param {string} answer - –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async submitAnswer(taskId, answer) {
    return await this.#makeRequest(`/api/tasks/${taskId}/submit/`, {
      method: 'POST',
      body: JSON.stringify({ answer }),
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getUserStats() {
    return await this.#makeRequest('/api/user/stats/');
  }

  /**
   * –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
   */
  abort() {
    this.#abortController.abort();
    this.#abortController = new AbortController();
  }
}

/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å –æ—à–∏–±–æ–∫ API
 */
class APIError extends Error {
  constructor(message, status = 0, details = '') {
    super(message);
    this.name = 'APIError';
    this.status = status;
    this.details = details;
  }

  toString() {
    return `${this.name}: ${this.message} (${this.status})`;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { APIClient, APIError };

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.examFlowAPI = new APIClient();

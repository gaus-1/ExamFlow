/* ========================================
 * –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è ExamFlow 2.0
 * 
  ======================================== */
class ExamFlowGamification {
  constructor() {
    this.userData = this.loadUserData();
    this.init();
  }
  
  init() {
    this.updateProgressDisplay();
    this.updateAchievementsDisplay();
    this.setupEventListeners();
  }
  
  loadUserData() {
    const saved = localStorage.getItem('examflow_user_data');
    if (saved) {
      return JSON.parse(saved);
    }
    
    // –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return {
      level: 5,
      xp: 750,
      totalXp: 1250,
      solvedTasks: 47,
      achievements: 12,
      achievementsList: [
        { id: 'first_task', name: '–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞', icon: 'üéØ', earned: true },
        { id: 'streak_5', name: '–°–µ—Ä–∏—è —É—Å–ø–µ—Ö–æ–≤', icon: 'üî•', earned: true },
        { id: 'ai_questions_10', name: '–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π', icon: 'üß†', earned: true },
        { id: 'speed_30s', name: '–°–∫–æ—Ä–æ—Å—Ç—å', icon: '‚ö°', earned: true },
        { id: 'master_100', name: '–ú–∞—Å—Ç–µ—Ä', icon: 'üèÜ', earned: false },
        { id: 'expert_level_10', name: '–≠–∫—Å–ø–µ—Ä—Ç', icon: 'üåü', earned: false },
        { id: 'all_subjects', name: '–≠—Ä—É–¥–∏—Ç', icon: 'üìö', earned: false },
        { id: 'all_achievements', name: '–õ–µ–≥–µ–Ω–¥–∞', icon: 'üíé', earned: false }
      ]
    };
  }
  
  saveUserData() {
    localStorage.setItem('examflow_user_data', JSON.stringify(this.userData));
  }
  
  addXP(amount, reason = '') {
    const oldLevel = this.userData.level;
    this.userData.xp += amount;
    this.userData.totalXp += amount;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    const newLevel = this.calculateLevel(this.userData.totalXp);
    if (newLevel > oldLevel) {
      this.userData.level = newLevel;
      this.showLevelUpNotification(newLevel);
    }
    
    this.saveUserData();
    this.updateProgressDisplay();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ XP
    this.showXPNotification(amount, reason);
  }
  
  calculateLevel(totalXp) {
    // –§–æ—Ä–º—É–ª–∞: –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç level * 200 XP
    return Math.floor(Math.sqrt(totalXp / 200)) + 1;
  }
  
  getLevelInfo(level) {
    const levelNames = {
      1: '–ù–æ–≤–∏—á–æ–∫',
      2: '–£—á–µ–Ω–∏–∫',
      3: '–°—Ç—É–¥–µ–Ω—Ç',
      4: '–ó–Ω–∞—Ç–æ–∫',
      5: '–û–ø—ã—Ç–Ω—ã–π —É—á–µ–Ω–∏–∫',
      6: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
      7: '–ú–∞—Å—Ç–µ—Ä',
      8: '–≠–∫—Å–ø–µ—Ä—Ç',
      9: '–ì—É—Ä—É',
      10: '–õ–µ–≥–µ–Ω–¥–∞'
    };
    
    return {
      name: levelNames[level] || `–£—Ä–æ–≤–µ–Ω—å ${level}`,
      xpRequired: level * level * 200,
      xpForNext: (level + 1) * (level + 1) * 200
    };
  }
  
  updateProgressDisplay() {
    const levelInfo = this.getLevelInfo(this.userData.level);
    const progressPercent = ((this.userData.totalXp - levelInfo.xpRequired) / (levelInfo.xpForNext - levelInfo.xpRequired)) * 100;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    const levelBadge = document.querySelector('.level-badge');
    const levelTitle = document.querySelector('.level-title');
    const levelSubtitle = document.querySelector('.level-subtitle');
    const progressBar = document.querySelector('.progress-bar');
    const progressText = document.querySelector('.progress-label span:last-child');
    
    if (levelBadge) levelBadge.textContent = `–£—Ä–æ–≤–µ–Ω—å ${this.userData.level}`;
    if (levelTitle) levelTitle.textContent = levelInfo.name;
    if (levelSubtitle) levelSubtitle.textContent = `–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${levelInfo.xpForNext - this.userData.totalXp} XP`;
    if (progressBar) progressBar.style.width = `${Math.min(progressPercent, 100)}%`;
    if (progressText) progressText.textContent = `${this.userData.totalXp} / ${levelInfo.xpForNext} XP`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const xpStat = document.querySelector('.stats-grid .stat-item:nth-child(1) .stat-number');
    const tasksStat = document.querySelector('.stats-grid .stat-item:nth-child(2) .stat-number');
    const achievementsStat = document.querySelector('.stats-grid .stat-item:nth-child(3) .stat-number');
    
    if (xpStat) xpStat.textContent = this.userData.totalXp.toLocaleString();
    if (tasksStat) tasksStat.textContent = this.userData.solvedTasks;
    if (achievementsStat) achievementsStat.textContent = this.userData.achievements;
  }
  
  updateAchievementsDisplay() {
    const achievementsGrid = document.querySelector('.achievements-grid');
    if (!achievementsGrid) return;
    
    achievementsGrid.innerHTML = '';
    
    this.userData.achievementsList.forEach(achievement => {
      const achievementEl = document.createElement('div');
      achievementEl.className = `achievement-item text-center p-4 rounded-lg ${
        achievement.earned 
          ? 'bg-success/10 border border-success/20' 
          : 'bg-gray-100 border border-gray-200 opacity-50'
      }`;
      
      achievementEl.innerHTML = `
        <div class="achievement-icon text-3xl mb-2">${achievement.icon}</div>
        <div class="achievement-title text-sm font-medium">${achievement.name}</div>
        <div class="achievement-desc text-xs text-muted">${this.getAchievementDescription(achievement.id)}</div>
      `;
      
      achievementsGrid.appendChild(achievementEl);
    });
  }
  
  getAchievementDescription(achievementId) {
    const descriptions = {
      'first_task': '–†–µ—à–∏—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É',
      'streak_5': '5 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥',
      'ai_questions_10': '–ó–∞–¥–∞–π—Ç–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ò–ò',
      'speed_30s': '–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É –∑–∞ 30 —Å–µ–∫—É–Ω–¥',
      'master_100': '–†–µ—à–∏—Ç–µ 100 –∑–∞–¥–∞—á',
      'expert_level_10': '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è',
      'all_subjects': '–ò–∑—É—á–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã',
      'all_achievements': '–ü–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
    };
    
    return descriptions[achievementId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ';
  }
  
  checkAchievements() {
    let newAchievements = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (this.userData.solvedTasks >= 1 && !this.hasAchievement('first_task')) {
      this.unlockAchievement('first_task');
      newAchievements++;
    }
    
    if (this.userData.solvedTasks >= 100 && !this.hasAchievement('master_100')) {
      this.unlockAchievement('master_100');
      newAchievements++;
    }
    
    if (this.userData.level >= 10 && !this.hasAchievement('expert_level_10')) {
      this.unlockAchievement('expert_level_10');
      newAchievements++;
    }
    
    if (newAchievements > 0) {
      this.showAchievementNotification(newAchievements);
      this.updateAchievementsDisplay();
    }
  }
  
  hasAchievement(achievementId) {
    const achievement = this.userData.achievementsList.find(a => a.id === achievementId);
    return achievement ? achievement.earned : false;
  }
  
  unlockAchievement(achievementId) {
    const achievement = this.userData.achievementsList.find(a => a.id === achievementId);
    if (achievement && !achievement.earned) {
      achievement.earned = true;
      this.userData.achievements++;
      this.saveUserData();
    }
  }
  
  showXPNotification(amount, reason) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-success text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-slide-in';
    notification.innerHTML = `
      <div class="flex items-center gap-2">
        <span class="text-lg">+${amount} XP</span>
        ${reason ? `<span class="text-sm opacity-90">(${reason})</span>` : ''}
      </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }
  
  showLevelUpNotification(level) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-primary text-white px-6 py-4 rounded-xl shadow-2xl z-50 animate-scale-in';
    notification.innerHTML = `
      <div class="text-center">
        <div class="text-4xl mb-2">üéâ</div>
        <div class="text-xl font-bold mb-1">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</div>
        <div class="text-lg">–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${level} —É—Ä–æ–≤–Ω—è!</div>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 4000);
  }
  
  showAchievementNotification(count) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 left-4 bg-accent text-white px-4 py-2 rounded-lg shadow-lg z-50 animate-slide-in';
    notification.innerHTML = `
      <div class="flex items-center gap-2">
        <span class="text-lg">üèÜ</span>
        <span>–ü–æ–ª—É—á–µ–Ω–æ ${count} –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</span>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }
  
  setupEventListeners() {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    document.addEventListener('aiQuestionAsked', () => {
      this.addXP(5, '–í–æ–ø—Ä–æ—Å –ò–ò');
      this.checkAchievements();
    });
    
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á
    document.addEventListener('taskSolved', (event) => {
      const { correct, time } = event.detail;
      if (correct) {
        this.userData.solvedTasks++;
        this.addXP(20, '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç');
        
        if (time && time < 30) {
          this.addXP(10, '–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç');
        }
      }
      this.checkAchievements();
    });
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
let gamification;
document.addEventListener('DOMContentLoaded', () => {
  gamification = new ExamFlowGamification();
});

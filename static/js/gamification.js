/**
 * –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è ExamFlow
 * –û—á–∫–∏, —É—Ä–æ–≤–Ω–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
 */

class ExamFlowGamification {
    constructor() {
        this.userData = this.loadUserData();
        this.achievements = this.getAchievements();
        this.init();
    }

    init() {
        this.setupProgressBars();
        this.setupAchievements();
        this.setupDailyChallenges();
        this.setupLeaderboard();
        this.updateUI();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
     */
    loadUserData() {
        const defaultData = {
            level: 1,
            experience: 0,
            totalScore: 0,
            tasksCompleted: 0,
            subjects: {},
            achievements: [],
            dailyChallenges: [],
            streak: 0,
            lastLogin: null
        };

        const saved = localStorage.getItem('examflow_user_data');
        if (saved) {
            try {
                return { ...defaultData, ...JSON.parse(saved) };
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
                return defaultData;
            }
        }
        return defaultData;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    saveUserData() {
        try {
            localStorage.setItem('examflow_user_data', JSON.stringify(this.userData));
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    getAchievements() {
        return {
            first_task: {
                id: 'first_task',
                title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
                description: '–†–µ—à–∏–ª –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É',
                icon: 'üéØ',
                points: 10,
                condition: () => this.userData.tasksCompleted >= 1
            },
            math_master: {
                id: 'math_master',
                title: '–ú–∞—Å—Ç–µ—Ä –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏',
                description: '–†–µ—à–∏–ª 50 –∑–∞–¥–∞—á –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ',
                icon: 'üìê',
                points: 100,
                condition: () => this.getSubjectProgress('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞') >= 50
            },
            streak_7: {
                id: 'streak_7',
                title: '–ù–µ–¥–µ–ª—è –æ–±—É—á–µ–Ω–∏—è',
                description: '–ó–∞–Ω–∏–º–∞–ª—Å—è 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
                icon: 'üî•',
                points: 50,
                condition: () => this.userData.streak >= 7
            },
            level_5: {
                id: 'level_5',
                title: '–û–ø—ã—Ç–Ω—ã–π —É—á–µ–Ω–∏–∫',
                description: '–î–æ—Å—Ç–∏–≥ 5 —É—Ä–æ–≤–Ω—è',
                icon: '‚≠ê',
                points: 200,
                condition: () => this.userData.level >= 5
            },
            subject_expert: {
                id: 'subject_expert',
                title: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É',
                description: '–†–µ—à–∏–ª 100 –∑–∞–¥–∞—á –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É',
                icon: 'üèÜ',
                points: 300,
                condition: () => Object.values(this.userData.subjects).some(progress => progress >= 100)
            }
        };
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∏ –æ—á–∫–æ–≤
     */
    addExperience(points, subject = null) {
        this.userData.experience += points;
        this.userData.totalScore += points;
        this.userData.tasksCompleted++;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
        if (subject) {
            if (!this.userData.subjects[subject]) {
                this.userData.subjects[subject] = 0;
            }
            this.userData.subjects[subject]++;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        this.checkLevelUp();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.checkAchievements();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        this.saveUserData();

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateUI();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification(`+${points} –æ—á–∫–æ–≤!`, 'success');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
     */
    checkLevelUp() {
        const currentLevel = this.userData.level;
        const requiredExp = currentLevel * 100; // 100 –æ—á–∫–æ–≤ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å

        if (this.userData.experience >= requiredExp) {
            this.userData.level++;
            this.showNotification(`üéâ –£—Ä–æ–≤–µ–Ω—å ${this.userData.level}!`, 'levelup');
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
            const bonus = this.userData.level * 10;
            this.userData.totalScore += bonus;
            this.showNotification(`+${bonus} –±–æ–Ω—É—Å–Ω—ã—Ö –æ—á–∫–æ–≤!`, 'bonus');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    checkAchievements() {
        Object.values(this.achievements).forEach(achievement => {
            if (!this.userData.achievements.includes(achievement.id) && achievement.condition()) {
                this.userData.achievements.push(achievement.id);
                this.userData.totalScore += achievement.points;
                this.showNotification(`üèÜ ${achievement.title}! +${achievement.points} –æ—á–∫–æ–≤`, 'achievement');
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
     */
    getSubjectProgress(subject) {
        return this.userData.subjects[subject] || 0;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
     */
    setupProgressBars() {
        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —É—Ä–æ–≤–Ω—è
        const levelProgress = document.querySelector('.level-progress');
        if (levelProgress) {
            const currentExp = this.userData.experience;
            const requiredExp = this.userData.level * 100;
            const progress = (currentExp % 100) / 100;
            
            levelProgress.style.width = `${progress * 100}%`;
        }

        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        document.querySelectorAll('.subject-progress').forEach(bar => {
            const subject = bar.dataset.subject;
            const progress = this.getSubjectProgress(subject);
            const maxProgress = 100; // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
            
            bar.style.width = `${Math.min(progress / maxProgress, 1) * 100}%`;
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
     */
    setupAchievements() {
        const achievementsContainer = document.querySelector('.achievements-container');
        if (achievementsContainer) {
            achievementsContainer.innerHTML = '';
            
            Object.values(this.achievements).forEach(achievement => {
                const isUnlocked = this.userData.achievements.includes(achievement.id);
                const achievementEl = this.createAchievementElement(achievement, isUnlocked);
                achievementsContainer.appendChild(achievementEl);
            });
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
     */
    createAchievementElement(achievement, isUnlocked) {
        const div = document.createElement('div');
        div.className = `achievement-item ${isUnlocked ? 'unlocked' : 'locked'}`;
        div.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-info">
                <h4>${achievement.title}</h4>
                <p>${achievement.description}</p>
                <span class="achievement-points">+${achievement.points} –æ—á–∫–æ–≤</span>
            </div>
            <div class="achievement-status">
                ${isUnlocked ? '‚úÖ' : 'üîí'}
            </div>
        `;
        return div;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
     */
    setupDailyChallenges() {
        const today = new Date().toDateString();
        
        if (this.userData.lastLogin !== today) {
            this.userData.lastLogin = today;
            this.generateDailyChallenges();
        }

        this.displayDailyChallenges();
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
     */
    generateDailyChallenges() {
        const challenges = [
            { id: 'solve_5_tasks', title: '–†–µ—à–∏—Ç—å 5 –∑–∞–¥–∞—á', target: 5, current: 0, reward: 25 },
            { id: 'practice_math', title: '–ü—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫—É', target: 3, current: 0, reward: 20 },
            { id: 'maintain_streak', title: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ—Ä–∏—é', target: 1, current: 0, reward: 15 }
        ];

        this.userData.dailyChallenges = challenges;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
     */
    displayDailyChallenges() {
        const container = document.querySelector('.daily-challenges');
        if (container && this.userData.dailyChallenges.length > 0) {
            container.innerHTML = '';
            
            this.userData.dailyChallenges.forEach(challenge => {
                const challengeEl = this.createChallengeElement(challenge);
                container.appendChild(challengeEl);
            });
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞–¥–∞–Ω–∏—è
     */
    createChallengeElement(challenge) {
        const div = document.createElement('div');
        div.className = 'challenge-item';
        const progress = Math.min(challenge.current / challenge.target, 1);
        
        div.innerHTML = `
            <div class="challenge-info">
                <h4>${challenge.title}</h4>
                <div class="challenge-progress">
                    <div class="challenge-bar" style="width: ${progress * 100}%"></div>
                </div>
                <span>${challenge.current}/${challenge.target}</span>
            </div>
            <div class="challenge-reward">
                +${challenge.reward} –æ—á–∫–æ–≤
            </div>
        `;
        return div;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
     */
    setupLeaderboard() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
        const leaderboard = document.querySelector('.leaderboard');
        if (leaderboard) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userRank = this.calculateUserRank();
            leaderboard.innerHTML = `
                <div class="user-rank">
                    <h3>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥</h3>
                    <div class="rank-info">
                        <span class="rank-number">#${userRank}</span>
                        <span class="rank-score">${this.userData.totalScore} –æ—á–∫–æ–≤</span>
                    </div>
                </div>
            `;
        }
    }

    /**
     * –†–∞—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
     */
    calculateUserRank() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const score = this.userData.totalScore;
        if (score >= 1000) return 1;
        if (score >= 500) return 2;
        if (score >= 200) return 3;
        if (score >= 100) return 4;
        if (score >= 50) return 5;
        return 6;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
     */
    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç
        const levelEl = document.querySelector('.user-level');
        if (levelEl) {
            levelEl.textContent = `–£—Ä–æ–≤–µ–Ω—å ${this.userData.level}`;
        }

        const expEl = document.querySelector('.user-experience');
        if (expEl) {
            expEl.textContent = `${this.userData.experience} –æ–ø—ã—Ç–∞`;
        }

        const scoreEl = document.querySelector('.user-score');
        if (scoreEl) {
            scoreEl.textContent = `${this.userData.totalScore} –æ—á–∫–æ–≤`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
        this.setupProgressBars();
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-message">${message}</span>
                <button class="notification-close">&times;</button>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
        document.body.appendChild(notification);

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.classList.add('show');
        }, 100);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = notification.querySelector('.notification-close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                notification.classList.remove('show');
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            });
        }
    }

    /**
     * –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    resetProgress() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?')) {
            localStorage.removeItem('examflow_user_data');
            location.reload();
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    exportUserData() {
        const dataStr = JSON.stringify(this.userData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = 'examflow_user_data.json';
        link.click();
        
        URL.revokeObjectURL(url);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.examFlowGamification = new ExamFlowGamification();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.ExamFlowGamification = ExamFlowGamification;

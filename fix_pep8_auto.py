#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫ PEP8
"""

import os
import re


def fix_pep8_file(file_path):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ PEP8 –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        original_content = content

        # 1. –£–¥–∞–ª—è–µ–º trailing whitespace
        content = re.sub(r'[ \t]+$', '', content, flags=re.MULTILINE)

        # 2. –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        content = re.sub(r'^\s+$', '', content, flags=re.MULTILINE)

        # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º f-strings –±–µ–∑ placeholders
        content = re.sub(r'f"([^"]*)"', r'"\1"', content)
        content = re.sub(r"f'([^']*)'", r"'\1'", content)

        # 4. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç—ã—Ö
        content = re.sub(r',([^\s])', r', \1', content)

        # 5. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
        lines = content.split('\n')
        fixed_lines = []

        for i, line in enumerate(lines):
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
            if line.strip().startswith(('(', '[', '{')):
                continue
            elif line.strip() and not line.startswith((' ', '\t')) and i > 0:
                prev_line = lines[i-1].strip()
                if prev_line.endswith(('(', '[', '{', ',')):
                    # –≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—Ç—É–ø
                    if '=' in prev_line and not prev_line.endswith('='):
                        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
                        indent = ' ' * 8
                    else:
                        # –û–±—ã—á–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
                        indent = ' ' * 4
                    line = indent + line.strip()

            fixed_lines.append(line)

        content = '\n'.join(fixed_lines)

        # 6. –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if content and not content.endswith('\n'):
            content += '\n'

        # 7. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        content = re.sub(r'\n\n\n+', '\n\n', content)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úì –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {file_path}")
            return True
        else:
            print(f"- –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {file_path}")
            return False

    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ {file_path}: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PEP8...")

    # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å
    exclude_dirs = {
        '.git', '__pycache__', 'node_modules', '.venv', 'venv',
        'staticfiles', 'media', 'migrations'
    }

    exclude_files = {
        'fix_pep8_auto.py', 'manage.py', 'wsgi.py', 'asgi.py'
    }

    fixed_count = 0
    total_count = 0

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º Python —Ñ–∞–π–ª–∞–º
    for root, dirs, files in os.walk('.'):
        # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs[:] = [d for d in dirs if d not in exclude_dirs]

        for file in files:
            if file.endswith('.py') and file not in exclude_files:
                file_path = os.path.join(root, file)
                total_count += 1

                if fix_pep8_file(file_path):
                    fixed_count += 1

    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_count}")
    print(f"  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {fixed_count}")
    print(f"  –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {total_count - fixed_count}")


if __name__ == '__main__':
    main()

<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="198" failures="0" skipped="0" tests="198" time="71.955" timestamp="2025-09-19T20:42:36.858776" hostname="M15-I3W302"><testcase classname="tests.unit.test_models.TestUserModel" name="test_create_user" time="3.411"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestUserModel" name="test_create_superuser" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestUserModel" name="test_user_str_representation" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestUserModel" name="test_user_telegram_id_unique" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestSubjectModel" name="test_create_subject" time="0.004"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestSubjectModel" name="test_subject_str_representation" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestSubjectModel" name="test_subject_code_unique" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestSubjectModel" name="test_subject_exam_types" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestTaskModel" name="test_create_task" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestTaskModel" name="test_task_str_representation" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestTaskModel" name="test_task_difficulty_levels" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestTaskModel" name="test_task_subject_relationship" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestUserProgressModel" name="test_create_user_progress" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestUserProgressModel" name="test_user_progress_str_representation" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestUserProgressModel" name="test_user_progress_update" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestUserProgressModel" name="test_unique_user_task_progress" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestUserProfileModel" name="test_create_user_profile" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestUserProfileModel" name="test_user_profile_str_representation" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestUserProfileModel" name="test_user_profile_unique_per_user" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestAiLimitModel" name="test_create_ai_limit" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestAiLimitModel" name="test_ai_limit_str_representation" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestAiLimitModel" name="test_ai_limit_is_exceeded" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestAiLimitModel" name="test_ai_limit_can_make_request" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestTopicModel" name="test_create_topic" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestTopicModel" name="test_topic_str_representation" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestTopicModel" name="test_topic_subject_relationship" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestAchievementModel" name="test_create_achievement" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_models.TestAchievementModel" name="test_achievement_str_representation" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_initialization" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_process_query_success" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_process_query_exception" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_find_relevant_sources_by_subject" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_find_relevant_sources_no_subject" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_is_relevant_positive" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_is_relevant_negative" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_build_context" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_build_context_empty_sources" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_search_similar_content_compatibility" time="0.004"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_get_context_for_query_compatibility" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_initialization" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_initialize_with_existing_tasks" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_add_document" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_add_document_empty_content" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_search_relevant_documents" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_search_empty_query" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_search_no_documents" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_search_by_subject" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_tokenize_text" time="0.004"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_calculate_similarity" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_calculate_similarity_no_common_tokens" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_calculate_similarity_empty_tokens" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_update_index" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_get_documents_by_metadata" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_get_stats" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_load_existing_tasks" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_load_existing_tasks_error" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestUnifiedProfileService" name="test_get_or_create_profile_existing" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestUnifiedProfileService" name="test_get_or_create_profile_new" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestUnifiedProfileService" name="test_get_or_create_profile_with_user" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestUnifiedProfileService" name="test_update_profile_activity" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestUnifiedProfileService" name="test_get_profile_progress" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestChatSessionService" name="test_create_session" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestChatSessionService" name="test_get_session" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestChatSessionService" name="test_update_session" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestChatSessionService" name="test_delete_session" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_ai_orchestrator_singleton" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_cache_singleton" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_notifier_singleton" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_ai_orchestrator_with_ai_service" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_ai_orchestrator_fallback" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_cache_with_django_cache" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_cache_fallback" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleAIOrchestrator" name="test_ask_with_valid_api_key" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleAIOrchestrator" name="test_ask_without_api_key" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleAIOrchestrator" name="test_ask_with_exception" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleAIOrchestrator" name="test_ask_empty_response" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleAIOrchestrator" name="test_ask_long_response_truncation" time="0.004"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestDummyCache" name="test_get_default_value" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestDummyCache" name="test_set_no_error" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestDummyCache" name="test_delete_no_error" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleNotifier" name="test_send_notification" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleNotifier" name="test_send_email" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestAIAPI" name="test_ai_api_get_method_not_allowed" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestAIAPI" name="test_ai_api_post_success" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestAIAPI" name="test_ai_api_post_without_authentication" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestAIAPI" name="test_ai_api_invalid_json" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestAIAPI" name="test_ai_api_missing_prompt" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestAIAPI" name="test_ai_api_with_rag_context" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestSubjectsAPI" name="test_subjects_list_api" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestSubjectsAPI" name="test_subject_detail_api" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestSubjectsAPI" name="test_subject_tasks_api" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestTasksAPI" name="test_tasks_list_api" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestTasksAPI" name="test_task_detail_api" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestTasksAPI" name="test_task_solve_correct_answer" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestTasksAPI" name="test_task_solve_incorrect_answer" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestTasksAPI" name="test_task_solve_without_authentication" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestUserProgressAPI" name="test_user_progress_api" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestUserProgressAPI" name="test_user_progress_statistics" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestTelegramWebhookAPI" name="test_telegram_webhook_post" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestTelegramWebhookAPI" name="test_telegram_webhook_get" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestTelegramWebhookAPI" name="test_telegram_webhook_invalid_data" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestRateLimiting" name="test_ai_api_rate_limiting" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestRateLimiting" name="test_task_solve_rate_limiting" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestCORS" name="test_cors_headers_present" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestCORS" name="test_cors_preflight_request" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestAPIDocumentation" name="test_swagger_ui_available" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestAPIDocumentation" name="test_openapi_schema_available" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestAPIDocumentation" name="test_redoc_available" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestAPIErrorHandling" name="test_404_not_found" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestAPIErrorHandling" name="test_400_bad_request" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_api.TestAPIErrorHandling" name="test_500_internal_server_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseConstraints" name="test_user_telegram_id_unique_constraint" time="0.005"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseConstraints" name="test_subject_code_unique_constraint" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseConstraints" name="test_user_progress_unique_constraint" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseConstraints" name="test_user_profile_telegram_id_unique_constraint" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseRelationships" name="test_subject_task_relationship" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseRelationships" name="test_user_progress_relationships" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseRelationships" name="test_user_profile_relationship" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseRelationships" name="test_topic_subject_relationship" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseQueries" name="test_user_filter_queries" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseQueries" name="test_subject_queries" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseQueries" name="test_task_queries" time="0.006"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseQueries" name="test_user_progress_queries" time="0.008"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseIndexes" name="test_user_telegram_id_index" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseIndexes" name="test_subject_code_index" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseIndexes" name="test_task_subject_index" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseValidation" name="test_user_email_validation" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseValidation" name="test_subject_name_validation" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseValidation" name="test_task_difficulty_validation" time="0.004"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabasePerformance" name="test_bulk_create_users" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabasePerformance" name="test_bulk_update_progress" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabasePerformance" name="test_select_related_optimization" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabasePerformance" name="test_prefetch_related_optimization" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_set_get" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_delete" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_timeout" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_default_value" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_clear" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_add_existing_key" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_add_new_key" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_get_many" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_set_many" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_delete_many" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_increment" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_decrement" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_incr_nonexistent_key" time="0.004"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisAICaching" name="test_ai_response_caching" time="0.003"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisAICaching" name="test_ai_context_caching" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisAICaching" name="test_user_session_caching" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisAICaching" name="test_task_progress_caching" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisFallback" name="test_locmem_fallback" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisFallback" name="test_cache_connection_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisFallback" name="test_cache_timeout_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisPerformance" name="test_cache_bulk_operations_performance" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisPerformance" name="test_cache_concurrent_access" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisPerformance" name="test_cache_memory_usage" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisIntegration" name="test_ai_service_with_cache" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisIntegration" name="test_rag_system_with_cache" time="0.004"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisIntegration" name="test_user_session_persistence" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisIntegration" name="test_cache_invalidation" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_start_command" time="0.004"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_help_command" time="0.004"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_subjects_command" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_invalid_command" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_empty_message" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_callback_query" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_invalid_json" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_missing_fields" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotHandlers" name="test_start_handler" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotHandlers" name="test_help_handler" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotHandlers" name="test_subjects_handler" time="0.004"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotHandlers" name="test_ai_handler" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotHandlers" name="test_task_handler" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotGamification" name="test_points_award" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotGamification" name="test_achievement_unlock" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotGamification" name="test_level_up" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotUserManagement" name="test_user_registration" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotUserManagement" name="test_user_profile_update" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotUserManagement" name="test_user_progress_tracking" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotAI" name="test_ai_response_generation" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotAI" name="test_ai_context_usage" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotAI" name="test_ai_error_handling" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotCommands" name="test_command_parsing" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotCommands" name="test_command_validation" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotCommands" name="test_command_arguments_validation" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotNotifications" name="test_send_notification" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotNotifications" name="test_send_achievement_notification" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotNotifications" name="test_send_daily_reminder" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotErrorHandling" name="test_bot_error_handling" time="0.002"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotErrorHandling" name="test_webhook_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotErrorHandling" name="test_ai_service_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotIntegration" name="test_full_user_journey" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotIntegration" name="test_bot_statistics_collection" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotIntegration" name="test_bot_performance_metrics" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseTransactions" name="test_user_creation_transaction" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseTransactions" name="test_user_deletion_transaction" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseTransactions" name="test_transaction_rollback" time="0.001"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseTransactions" name="test_nested_transactions" time="0.116"><error message="failed on setup with &quot;django.db.utils.ProgrammingError: отношение &quot;core_unifiedprofile&quot; не существует&#10;LINE 1: ...d_at&quot;, &quot;core_unifiedprofile&quot;.&quot;last_activity&quot; FROM &quot;core_unif...&#10;                                                             ^&quot;">self = &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;
sql = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = ()
ignored_wrapper_args = (False, {'connection': &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;, 'cursor': &lt;django.db.backends.utils.CursorWrapper object at 0x000002177DE39990&gt;})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
&gt;               return self.cursor.execute(sql, params)

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           psycopg.errors.UndefinedTable: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: UndefinedTable

The above exception was the direct cause of the following exception:

request = &lt;SubRequest 'django_db_setup' for &lt;Function test_create_user&gt;&gt;
django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x000002177A98AF50&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:94: in create_test_db
    self.connection._test_serialized_contents = self.serialize_db_to_string()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:142: in serialize_db_to_string
    serializers.serialize("json", get_objects(), indent=None, stream=out)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\__init__.py:134: in serialize
    s.serialize(queryset, **options)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\core\serializers\base.py:132: in serialize
    for count, obj in enumerate(queryset, start=1):
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\base\creation.py:138: in get_objects
    yield from queryset.iterator()
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:516: in _iterator
    yield from iterable
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\query.py:91: in __iter__
    results = compiler.execute_sql(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\models\sql\compiler.py:1562: in execute_sql
    cursor.execute(sql, params)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:84: in _execute
    with self.db.wrap_database_errors:
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\AppData\Local\Programs\Python\Python311\Lib\site-packages\django\db\backends\utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;psycopg.ServerCursor '_django_curs_43332_sync_9' [closed] [IDLE] (host=localhost user=postgres database=test_examflow_db) at 0x2177ddaaf80&gt;
query = 'SELECT "core_unifiedprofile"."id", "core_unifiedprofile"."user_id", "core_unifiedprofile"."telegram_id", "core_unifie..."updated_at", "core_unifiedprofile"."last_activity" FROM "core_unifiedprofile" ORDER BY "core_unifiedprofile"."id" ASC'
params = (), binary = None, kwargs = {}

    def execute(
        self,
        query: Query,
        params: Params | None = None,
        *,
        binary: bool | None = None,
        **kwargs: Any,
    ) -&gt; Self:
        """
        Open a cursor to execute a query to the database.
        """
        if kwargs:
            raise TypeError(f"keyword not supported: {list(kwargs)[0]}")
        if self._pgconn.pipeline_status:
            raise e.NotSupportedError(
                "server-side cursors not supported in pipeline mode"
            )
    
        try:
            with self._conn.lock:
                self._conn.wait(self._declare_gen(query, params, binary))
        except e._NO_TRACEBACK as ex:
&gt;           raise ex.with_traceback(None)
E           django.db.utils.ProgrammingError: отношение "core_unifiedprofile" не существует
E           LINE 1: ...d_at", "core_unifiedprofile"."last_activity" FROM "core_unif...
E                                                                        ^

..\AppData\Local\Programs\Python\Python311\Lib\site-packages\psycopg\server_cursor.py:294: ProgrammingError</error></testcase></testsuite></testsuites>
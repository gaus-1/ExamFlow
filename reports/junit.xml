<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="406" failures="0" skipped="0" tests="406" time="55.599" timestamp="2025-09-20T21:14:40.700557" hostname="M15-I3W302"><testcase classname="tests.simple_test.TestSimpleFunctionality" name="test_basic_math" time="0.975"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestSimpleFunctionality" name="test_string_operations" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestSimpleFunctionality" name="test_datetime_functionality" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestSimpleFunctionality" name="test_square_function[1-1]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestSimpleFunctionality" name="test_square_function[2-4]" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestSimpleFunctionality" name="test_square_function[3-9]" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestSimpleFunctionality" name="test_square_function[4-16]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestSimpleFunctionality" name="test_list_operations" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestSimpleFunctionality" name="test_dictionary_operations" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestSimpleFunctionality" name="test_exception_handling" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestExamFlowSpecific" name="test_math_subject_validation" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestExamFlowSpecific" name="test_russian_subject_validation" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestExamFlowSpecific" name="test_ege_format_validation" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestExamFlowSpecific" name="test_oge_format_validation" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestExamFlowSpecific" name="test_telegram_id_validation" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestSlowOperations" name="test_slow_calculation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.simple_test.TestSlowOperations" name="test_large_data_processing" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_ai_api.TestAIAssistantAPI" name="test_ai_chat_empty_prompt" time="0.014"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_ai_api.TestAIAssistantAPI" name="test_ai_chat_large_request" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_ai_api.TestAIAssistantAPI" name="test_ai_chat_long_prompt" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_ai_api.TestAIAssistantAPI" name="test_ai_chat_success" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_ai_api.TestProblemsAPI" name="test_check_answer_success" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_ai_api.TestProblemsAPI" name="test_get_problems_no_topic" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_ai_api.TestProblemsAPI" name="test_get_problems_success" time="0.007"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_ai_api.TestUserProfileAPI" name="test_get_profile_success" time="0.005"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_ai_api.TestUserProfileAPI" name="test_update_progress_success" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_ai_api.TestSecurity" name="test_sql_injection_protection" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_ai_api.TestSecurity" name="test_xss_protection" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_ai_api.TestPerformance" name="test_caching_works" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_frontend_standards.FrontendStandardsTestCase" name="test_css_minification_available" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_frontend_standards.FrontendStandardsTestCase" name="test_css_variables_updated" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_frontend_standards.FrontendStandardsTestCase" name="test_flat_buttons_design" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_frontend_standards.FrontendStandardsTestCase" name="test_js_minification_available" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_frontend_standards.FrontendStandardsTestCase" name="test_lazy_loading_images" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_frontend_standards.TelegramBotStandardsTestCase" name="test_standard_button_functions" time="0.006"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_frontend_standards.PerformanceTestCase" name="test_css_file_size" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_frontend_standards.PerformanceTestCase" name="test_js_file_size" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_gemini_integration" name="test_gemini_integration_real_api" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_solve_task_correct_answer" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_solve_task_incorrect_answer" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_subject_creation" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_subject_detail_view" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_subject_exam_types" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_subject_tasks_relationship" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_subjects_list_view" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_task_answer_validation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_task_creation" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_task_detail_view" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_task_difficulty_levels" time="0.005"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_user_progress_creation" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_user_progress_statistics" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_learning.TestLearning" name="test_user_progress_update" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system.TestRAGOrchestrator" name="test_build_context_empty" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system.TestRAGOrchestrator" name="test_build_context_with_results" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system.TestRAGOrchestrator" name="test_generate_prompt_no_user_context" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system.TestRAGOrchestrator" name="test_generate_prompt_optimized" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system.TestRAGOrchestrator" name="test_get_ai_response_success" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system.TestRAGOrchestrator" name="test_get_fallback_response" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system.TestRAGOrchestrator" name="test_get_user_context_empty" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system.TestRAGOrchestrator" name="test_process_query_success" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system.TestVectorStore" name="test_cosine_similarity" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system.TestVectorStore" name="test_create_embedding_success" time="0.005"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system.TestVectorStore" name="test_find_similar_chunks" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system.TestVectorStore" name="test_search_success" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system.TestIntegration" name="test_full_pipeline" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system_advanced.TestRAGOrchestratorCaching" name="test_ai_response_caching" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system_advanced.TestRAGOrchestratorCaching" name="test_cache_key_generation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system_advanced.TestRAGOrchestratorCaching" name="test_cache_ttl_configuration" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system_advanced.TestRAGOrchestratorCaching" name="test_process_query_with_caching" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system_advanced.TestRAGOrchestratorCaching" name="test_search_results_caching" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system_advanced.TestRAGOrchestratorIntegration" name="test_configuration_loading" time="0.005"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_rag_system_advanced.TestRAGOrchestratorIntegration" name="test_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot.TestTelegramBot" name="test_bot_commands" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot.TestTelegramBot" name="test_bot_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot.TestTelegramBot" name="test_bot_initialization" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot.TestTelegramBot" name="test_bot_response_format" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot.TestTelegramBot" name="test_subject_creation" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot.TestTelegramBot" name="test_subject_tasks_relationship" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot.TestTelegramBot" name="test_task_creation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot.TestTelegramBot" name="test_task_difficulty_levels" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot.TestTelegramBot" name="test_task_solving" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot.TestTelegramBot" name="test_user_authentication" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot.TestTelegramBot" name="test_user_creation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot.TestTelegramBot" name="test_user_progress_tracking" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot.TestTelegramBot" name="test_user_session_management" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot_advanced.TestBotHandlers" name="test_error_handling" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot_advanced.TestBotHandlers" name="test_fipi_command" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot_advanced.TestBotHandlers" name="test_handle_message_non_text" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot_advanced.TestBotHandlers" name="test_handle_message_text" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot_advanced.TestBotHandlers" name="test_help_command" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot_advanced.TestBotHandlers" name="test_search_command" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot_advanced.TestBotHandlers" name="test_start_command" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot_advanced.TestBotIntegration" name="test_bot_initialization" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot_advanced.TestBotIntegration" name="test_command_parsing" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.test_telegram_bot_advanced.TestBotIntegration" name="test_message_formatting" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_start_command" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_help_command" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_subjects_command" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_invalid_command" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_empty_message" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_callback_query" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_invalid_json" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramWebhook" name="test_webhook_missing_fields" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotHandlers" name="test_start_handler" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotHandlers" name="test_help_handler" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotHandlers" name="test_subjects_handler" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotHandlers" name="test_ai_handler" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotHandlers" name="test_task_handler" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotGamification" name="test_points_award" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotGamification" name="test_achievement_unlock" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotGamification" name="test_level_up" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotUserManagement" name="test_user_registration" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotUserManagement" name="test_user_profile_update" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotUserManagement" name="test_user_progress_tracking" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotAI" name="test_ai_response_generation" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotAI" name="test_ai_context_usage" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotAI" name="test_ai_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotCommands" name="test_command_parsing" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotCommands" name="test_command_validation" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotCommands" name="test_command_arguments_validation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotNotifications" name="test_send_notification" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotNotifications" name="test_send_achievement_notification" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotNotifications" name="test_send_daily_reminder" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotErrorHandling" name="test_bot_error_handling" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotErrorHandling" name="test_webhook_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotErrorHandling" name="test_ai_service_error_handling" time="0.005"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotIntegration" name="test_full_user_journey" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotIntegration" name="test_bot_statistics_collection" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.bots.test_telegram_bot.TestTelegramBotIntegration" name="test_bot_performance_metrics" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_homepage_loads_in_all_browsers[chrome]" time="0.179"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_homepage_loads_in_all_browsers[firefox]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_homepage_loads_in_all_browsers[edge]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_navigation_works_in_all_browsers[chrome]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_navigation_works_in_all_browsers[firefox]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_navigation_works_in_all_browsers[edge]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_responsive_design_in_all_browsers[chrome]" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_responsive_design_in_all_browsers[firefox]" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_responsive_design_in_all_browsers[edge]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_javascript_execution_in_all_browsers[chrome]" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_javascript_execution_in_all_browsers[firefox]" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_javascript_execution_in_all_browsers[edge]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_css_rendering_in_all_browsers[chrome]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_css_rendering_in_all_browsers[firefox]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_css_rendering_in_all_browsers[edge]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_form_functionality_in_all_browsers[chrome]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_form_functionality_in_all_browsers[firefox]" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_form_functionality_in_all_browsers[edge]" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_image_loading_in_all_browsers[chrome]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_image_loading_in_all_browsers[firefox]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_image_loading_in_all_browsers[edge]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_error_handling_in_all_browsers[chrome]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_error_handling_in_all_browsers[firefox]" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_error_handling_in_all_browsers[edge]" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_performance_comparison_across_browsers[chrome]" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_performance_comparison_across_browsers[firefox]" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_performance_comparison_across_browsers[edge]" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_accessibility_features_in_all_browsers[chrome]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_accessibility_features_in_all_browsers[firefox]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_accessibility_features_in_all_browsers[edge]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_mobile_viewport_in_all_browsers[chrome]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_mobile_viewport_in_all_browsers[firefox]" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_mobile_viewport_in_all_browsers[edge]" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.cross_browser.test_browser_compatibility.TestBrowserCompatibility" name="test_cross_browser_consistency" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestAIAPI" name="test_ai_api_get_method_not_allowed" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestAIAPI" name="test_ai_api_post_success" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestAIAPI" name="test_ai_api_post_without_authentication" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestAIAPI" name="test_ai_api_invalid_json" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestAIAPI" name="test_ai_api_missing_prompt" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestAIAPI" name="test_ai_api_with_rag_context" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestSubjectsAPI" name="test_subjects_list_api" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestSubjectsAPI" name="test_subject_detail_api" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestSubjectsAPI" name="test_subject_tasks_api" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestTasksAPI" name="test_tasks_list_api" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestTasksAPI" name="test_task_detail_api" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestTasksAPI" name="test_task_solve_correct_answer" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestTasksAPI" name="test_task_solve_incorrect_answer" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestTasksAPI" name="test_task_solve_without_authentication" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestUserProgressAPI" name="test_user_progress_api" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestUserProgressAPI" name="test_user_progress_statistics" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestTelegramWebhookAPI" name="test_telegram_webhook_post" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestTelegramWebhookAPI" name="test_telegram_webhook_get" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestTelegramWebhookAPI" name="test_telegram_webhook_invalid_data" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestRateLimiting" name="test_ai_api_rate_limiting" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestRateLimiting" name="test_task_solve_rate_limiting" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestCORS" name="test_cors_headers_present" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestCORS" name="test_cors_preflight_request" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestAPIDocumentation" name="test_swagger_ui_available" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestAPIDocumentation" name="test_openapi_schema_available" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestAPIDocumentation" name="test_redoc_available" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestAPIErrorHandling" name="test_404_not_found" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestAPIErrorHandling" name="test_400_bad_request" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_api.TestAPIErrorHandling" name="test_500_internal_server_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseConstraints" name="test_user_telegram_id_unique_constraint" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseConstraints" name="test_subject_code_unique_constraint" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseConstraints" name="test_user_progress_unique_constraint" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseConstraints" name="test_user_profile_telegram_id_unique_constraint" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseRelationships" name="test_subject_task_relationship" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseRelationships" name="test_user_progress_relationships" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseRelationships" name="test_user_profile_relationship" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseRelationships" name="test_topic_subject_relationship" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseQueries" name="test_user_filter_queries" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseQueries" name="test_subject_queries" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseQueries" name="test_task_queries" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseQueries" name="test_user_progress_queries" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseIndexes" name="test_user_telegram_id_index" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseIndexes" name="test_subject_code_index" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseIndexes" name="test_task_subject_index" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseValidation" name="test_user_email_validation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseValidation" name="test_subject_name_validation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseValidation" name="test_task_difficulty_validation" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabasePerformance" name="test_bulk_create_users" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabasePerformance" name="test_bulk_update_progress" time="0.007"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabasePerformance" name="test_select_related_optimization" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabasePerformance" name="test_prefetch_related_optimization" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_set_get" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_delete" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_timeout" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_default_value" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_clear" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_add_existing_key" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_add_new_key" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_get_many" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_set_many" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_delete_many" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_increment" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_decrement" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisCache" name="test_cache_incr_nonexistent_key" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisAICaching" name="test_ai_response_caching" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisAICaching" name="test_ai_context_caching" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisAICaching" name="test_user_session_caching" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisAICaching" name="test_task_progress_caching" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisFallback" name="test_locmem_fallback" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisFallback" name="test_cache_connection_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisFallback" name="test_cache_timeout_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisPerformance" name="test_cache_bulk_operations_performance" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisPerformance" name="test_cache_concurrent_access" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisPerformance" name="test_cache_memory_usage" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisIntegration" name="test_ai_service_with_cache" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisIntegration" name="test_rag_system_with_cache" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisIntegration" name="test_user_session_persistence" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_redis.TestRedisIntegration" name="test_cache_invalidation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.load.test_advanced_load.TestAdvancedLoadTesting" name="test_sustained_load" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.load.test_advanced_load.TestAdvancedLoadTesting" name="test_peak_load" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.load.test_advanced_load.TestAdvancedLoadTesting" name="test_stress_test" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.load.test_advanced_load.TestAdvancedLoadTesting" name="test_spike_test" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.load.test_advanced_load.TestAdvancedLoadTesting" name="test_endurance_test" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.load.test_advanced_load.TestAdvancedLoadTesting" name="test_memory_leak_detection" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.load.test_advanced_load.TestAdvancedLoadTesting" name="test_concurrent_users_scalability" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_authentication_bypass" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_command_injection_protection" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_cors_security" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_csrf_protection" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_data_exposure" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_file_upload_security" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_https_enforcement" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_input_validation" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_json_bomb_protection" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_password_security" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_path_traversal_protection" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_rate_limiting" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_session_security" time="0.006"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_sql_injection_protection" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestSecurityVulnerabilities" name="test_xss_protection" time="0.005"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestCryptographicSecurity" name="test_password_hashing" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestCryptographicSecurity" name="test_session_token_security" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.security.test_security_vulnerabilities.TestCryptographicSecurity" name="test_telegram_hash_verification" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_css_styles.TestCSSStyles" name="test_responsive_design_breakpoints" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_css_styles.TestCSSStyles" name="test_color_scheme_consistency" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_css_styles.TestCSSStyles" name="test_typography_hierarchy" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_css_styles.TestCSSStyles" name="test_button_styles" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_css_styles.TestCSSStyles" name="test_form_styles" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_css_styles.TestCSSStyles" name="test_card_component_styles" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_css_styles.TestCSSStyles" name="test_loading_states" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_css_styles.TestCSSStyles" name="test_accessibility_colors" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_css_styles.TestCSSStyles" name="test_hover_effects" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_css_styles.TestCSSStyles" name="test_focus_styles" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_css_styles.TestCSSStyles" name="test_animation_performance" time="0.005"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_css_styles.TestCSSStyles" name="test_print_styles" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestHomePage" name="test_home_page_loads" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestHomePage" name="test_navigation_menu" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestHomePage" name="test_responsive_design_mobile" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestHomePage" name="test_responsive_design_tablet" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestHomePage" name="test_responsive_design_desktop" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestAIInterface" name="test_ai_interface_elements" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestAIInterface" name="test_ai_suggestions_click" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestAIInterface" name="test_ai_input_and_send" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestAIInterface" name="test_ai_chat_history" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestSubjectsPage" name="test_subjects_page_loads" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestSubjectsPage" name="test_subject_card_click" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestSubjectsPage" name="test_subject_filtering" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestTaskPage" name="test_task_page_loads" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestTaskPage" name="test_task_solve_correct_answer" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestTaskPage" name="test_task_solve_incorrect_answer" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestTaskPage" name="test_task_hint_system" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestUserInterface" name="test_telegram_login_widget" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestUserInterface" name="test_qr_code_display" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestUserInterface" name="test_statistics_display" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestAccessibility" name="test_keyboard_navigation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestAccessibility" name="test_alt_text_for_images" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestAccessibility" name="test_heading_structure" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestAccessibility" name="test_color_contrast" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestErrorHandling" name="test_404_page" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestErrorHandling" name="test_500_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestErrorHandling" name="test_network_error_handling" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestPerformance" name="test_page_load_time" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.ui.test_frontend.TestPerformance" name="test_resource_loading" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestUserModel" name="test_create_user" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestUserModel" name="test_create_superuser" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestUserModel" name="test_user_str_representation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestUserModel" name="test_user_telegram_id_unique" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestSubjectModel" name="test_create_subject" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestSubjectModel" name="test_subject_str_representation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestSubjectModel" name="test_subject_code_unique" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestSubjectModel" name="test_subject_exam_types" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestTaskModel" name="test_create_task" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestTaskModel" name="test_task_str_representation" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestTaskModel" name="test_task_difficulty_levels" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestTaskModel" name="test_task_subject_relationship" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestUserProgressModel" name="test_create_user_progress" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestUserProgressModel" name="test_user_progress_str_representation" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestUserProgressModel" name="test_user_progress_update" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestUserProgressModel" name="test_unique_user_task_progress" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestUserProfileModel" name="test_create_user_profile" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestUserProfileModel" name="test_user_profile_str_representation" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestUserProfileModel" name="test_user_profile_unique_per_user" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestAiLimitModel" name="test_create_ai_limit" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestAiLimitModel" name="test_ai_limit_str_representation" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestAiLimitModel" name="test_ai_limit_is_exceeded" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestAiLimitModel" name="test_ai_limit_can_make_request" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestTopicModel" name="test_create_topic" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestTopicModel" name="test_topic_str_representation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestTopicModel" name="test_topic_subject_relationship" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestAchievementModel" name="test_create_achievement" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_models.TestAchievementModel" name="test_achievement_str_representation" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_initialization" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_process_query_success" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_process_query_exception" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_find_relevant_sources_by_subject" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_find_relevant_sources_no_subject" time="0.010"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_is_relevant_positive" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_is_relevant_negative" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_build_context" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_build_context_empty_sources" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_search_similar_content_compatibility" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestRAGOrchestrator" name="test_get_context_for_query_compatibility" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_initialization" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_initialize_with_existing_tasks" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_add_document" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_add_document_empty_content" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_search_relevant_documents" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_search_empty_query" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_search_no_documents" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_search_by_subject" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_tokenize_text" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_calculate_similarity" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_calculate_similarity_no_common_tokens" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_calculate_similarity_empty_tokens" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_update_index" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_get_documents_by_metadata" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_get_stats" time="0.005"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_load_existing_tasks" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_rag_system.TestVectorStore" name="test_load_existing_tasks_error" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestUnifiedProfileService" name="test_get_or_create_profile_existing" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestUnifiedProfileService" name="test_get_or_create_profile_new" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestUnifiedProfileService" name="test_get_or_create_profile_with_user" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestUnifiedProfileService" name="test_update_profile_activity" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestUnifiedProfileService" name="test_get_profile_progress" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestChatSessionService" name="test_create_session" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestChatSessionService" name="test_get_session" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestChatSessionService" name="test_update_session" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestChatSessionService" name="test_delete_session" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_ai_orchestrator_singleton" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_cache_singleton" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_notifier_singleton" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_ai_orchestrator_with_ai_service" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_ai_orchestrator_fallback" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_cache_with_django_cache" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestContainerService" name="test_cache_fallback" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleAIOrchestrator" name="test_ask_with_valid_api_key" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleAIOrchestrator" name="test_ask_without_api_key" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleAIOrchestrator" name="test_ask_with_exception" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleAIOrchestrator" name="test_ask_empty_response" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleAIOrchestrator" name="test_ask_long_response_truncation" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestDummyCache" name="test_get_default_value" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestDummyCache" name="test_set_no_error" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestDummyCache" name="test_delete_no_error" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleNotifier" name="test_send_notification" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.unit.test_services.TestSimpleNotifier" name="test_send_email" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.database.test_sql_queries.TestSQLQueries" name="test_aggregate_functions" time="0.004"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.database.test_sql_queries.TestSQLQueries" name="test_complex_join_query" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.database.test_sql_queries.TestSQLQueries" name="test_difficulty_distribution" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.database.test_sql_queries.TestSQLQueries" name="test_index_usage_query" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.database.test_sql_queries.TestSQLQueries" name="test_subject_performance_query" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.database.test_sql_queries.TestSQLQueries" name="test_subject_statistics_query" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.database.test_sql_queries.TestSQLQueries" name="test_task_search_query" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.database.test_sql_queries.TestSQLQueries" name="test_user_activity_query" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.database.test_sql_queries.TestSQLQueries" name="test_user_progress_analytics" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.database.test_sql_queries.TestSQLQueries" name="test_window_functions" time="0.003"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.database.test_sql_queries.TestDatabaseTransactions" name="test_nested_transactions" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.database.test_sql_queries.TestDatabaseTransactions" name="test_select_for_update" time="0.005"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.database.test_sql_queries.TestDatabaseTransactions" name="test_transaction_rollback" time="0.001"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseTransactions" name="test_user_creation_transaction" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseTransactions" name="test_user_deletion_transaction" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseTransactions" name="test_transaction_rollback" time="0.002"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error></testcase><testcase classname="tests.integration.test_database.TestDatabaseTransactions" name="test_nested_transactions" time="0.364"><error message="failed on setup with &quot;django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.&quot;">request = &lt;SubRequest 'django_db_setup' for &lt;Function test_basic_math&gt;&gt;, django_test_environment = None
django_db_blocker = &lt;pytest_django.plugin.DjangoDbBlocker object at 0x0000023B8DD9E410&gt;
django_db_use_migrations = True, django_db_keepdb = False, django_db_createdb = False
django_db_modify_db_settings = None

    @pytest.fixture(scope="session")
    def django_db_setup(
        request: pytest.FixtureRequest,
        django_test_environment: None,
        django_db_blocker: DjangoDbBlocker,
        django_db_use_migrations: bool,
        django_db_keepdb: bool,
        django_db_createdb: bool,
        django_db_modify_db_settings: None,
    ) -&gt; Generator[None, None, None]:
        """Top level fixture to ensure test databases are available"""
        from django.test.utils import setup_databases, teardown_databases
    
        setup_databases_args = {}
    
        if not django_db_use_migrations:
            _disable_migrations()
    
        if django_db_keepdb and not django_db_createdb:
            setup_databases_args["keepdb"] = True
    
        with django_db_blocker.unblock():
&gt;           db_cfg = setup_databases(
                verbosity=request.config.option.verbose,
                interactive=False,
                **setup_databases_args,
            )

.venv\Lib\site-packages\pytest_django\fixtures.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\django\test\utils.py:221: in setup_databases
    connection.creation.create_test_db(
.venv\Lib\site-packages\django\db\backends\base\creation.py:64: in create_test_db
    self.connection.close()
.venv\Lib\site-packages\django\utils\asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv\Lib\site-packages\django\db\backends\base\base.py:356: in close
    self.validate_thread_sharing()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;DatabaseWrapper vendor='postgresql' alias='default'&gt;

    def validate_thread_sharing(self):
        """
        Validate that the connection isn't accessed by another thread than the
        one which originally created it, unless the connection was explicitly
        authorized to be shared between threads (via the `inc_thread_sharing()`
        method). Raise an exception if the validation fails.
        """
        if not (self.allow_thread_sharing or self._thread_ident == _thread.get_ident()):
&gt;           raise DatabaseError(
                "DatabaseWrapper objects created in a "
                "thread can only be used in that same thread. The object "
                "with alias '%s' was created in thread id %s and this is "
                "thread id %s." % (self.alias, self._thread_ident, _thread.get_ident())
            )
E           django.db.utils.DatabaseError: DatabaseWrapper objects created in a thread can only be used in that same thread. The object with alias 'default' was created in thread id 44596 and this is thread id 2454889021120.

.venv\Lib\site-packages\django\db\backends\base\base.py:655: DatabaseError</error><error message="failed on teardown with &quot;gevent.exceptions.LoopExit: This operation would block forever&#10;&#09;Hub: &lt;Hub '' at 0x23b93609080 backend=default ptr=&lt;cdata 'struct uv_loop_s *' 0x00007FF956897240&gt; default pending=0 ref=0 callbacks=0 resolver=&lt;gevent.resolver.thread.Resolver at 0x23b9369e790 pool=&lt;ThreadPool at 0x23b9368dc40 tasks=0 size=0 maxsize=10 hub=&lt;Hub at 0x23b93609080 thread_ident=0xae34&gt;&gt;&gt; threadpool=&lt;ThreadPool at 0x23b9368dc40 tasks=0 size=0 maxsize=10 hub=&lt;Hub at 0x23b93609080 thread_ident=0xae34&gt;&gt; thread_ident=0xae34&gt;&#10;&#09;Handles:&#10;[HandleState(handle=&lt;cdata 'struct uv_handle_s *' 0x0000023B8D2D1678&gt;, type=b'check', watcher=&lt;gevent.libuv.loop.loop at 0x23b93604bd0 backend=default ptr=&lt;cdata 'struct uv_loop_s *' 0x00007FF956897240&gt; default pending=0 ref=0 callbacks=0&gt;, ref=0, active=1, closing=0),&#10; HandleState(handle=&lt;cdata 'struct uv_handle_s *' 0x0000023B8F84CF68&gt;, type=b'timer', watcher=&lt;gevent.libuv.loop.loop at 0x23b93604bd0 backend=default ptr=&lt;cdata 'struct uv_loop_s *' 0x00007FF956897240&gt; default pending=0 ref=0 callbacks=0&gt;, ref=0, active=1, closing=0),&#10; HandleState(handle=&lt;cdata 'struct uv_handle_s *' 0x0000023B8D2D0B78&gt;, type=b'prepare', watcher=&lt;gevent.libuv.loop.loop at 0x23b93604bd0 backend=default ptr=&lt;cdata 'struct uv_loop_s *' 0x00007FF956897240&gt; default pending=0 ref=0 callbacks=0&gt;, ref=0, active=1, closing=0),&#10; HandleState(handle=&lt;cdata 'struct uv_handle_s *' 0x0000023B8D2D1A98&gt;, type=b'check', watcher=&lt;gevent.libuv.loop.loop at 0x23b93604bd0 backend=default ptr=&lt;cdata 'struct uv_loop_s *' 0x00007FF956897240&gt; default pending=0 ref=0 callbacks=0&gt;, ref=1, active=0, closing=0),&#10; HandleState(handle=&lt;cdata 'struct uv_handle_s *' 0x0000023B8FB10E78&gt;, type=b'async', watcher=&lt;async_ at 0x23b9369e350 callback=&lt;function AbstractLoop._init_loop_and_aux_watchers.&lt;locals&gt;.&lt;lambda&gt; at 0x0000023B93698EA0&gt; args=() watcher=&lt;cdata 'struct uv_async_s *' owning 224 bytes&gt; handle=&lt;cdata 'void *' 0x0000023B9368B780&gt; ref=False&gt;, ref=0, active=1, closing=0),&#10; HandleState(handle=&lt;cdata 'struct uv_handle_s *' 0x0000023B8FB10B48&gt;, type=b'async', watcher=&lt;async_ at 0x23b936b8ed0 callback=&lt;bound method ThreadPool._on_fork of &lt;ThreadPool at 0x23b9368dc40 tasks=0 size=0 maxsize=10 hub=&lt;Hub at 0x23b93609080 thread_ident=0xae34&gt;&gt;&gt; args=() watcher=&lt;cdata 'struct uv_async_s *' owning 224 bytes&gt; handle=&lt;cdata 'void *' 0x0000023B936CFE00&gt; ref=False&gt;, ref=0, active=1, closing=0)]&quot;">request = &lt;SubRequest 'live_server' for &lt;Function test_homepage_loads_in_all_browsers[chrome]&gt;&gt;

    @pytest.fixture(scope="session")
    def live_server(request: pytest.FixtureRequest):
        """Run a live Django server in the background during tests
    
        The address the server is started from is taken from the
        --liveserver command line option or if this is not provided from
        the DJANGO_LIVE_TEST_SERVER_ADDRESS environment variable.  If
        neither is provided ``localhost`` is used.  See the Django
        documentation for its full syntax.
    
        NOTE: If the live server needs database access to handle a request
              your test will have to request database access.  Furthermore
              when the tests want to see data added by the live-server (or
              the other way around) transactional database access will be
              needed as data inside a transaction is not shared between
              the live server and test code.
    
              Static assets will be automatically served when
              ``django.contrib.staticfiles`` is available in INSTALLED_APPS.
        """
        skip_if_no_django()
    
        addr = (
            request.config.getvalue("liveserver")
            or os.getenv("DJANGO_LIVE_TEST_SERVER_ADDRESS")
            or "localhost"
        )
    
        server = live_server_helper.LiveServer(addr)
        yield server
&gt;       server.stop()

.venv\Lib\site-packages\pytest_django\fixtures.py:573: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\pytest_django\live_server_helper.py:75: in stop
    self.thread.terminate()
.venv\Lib\site-packages\django\test\testcases.py:1807: in terminate
    self.join()
..\AppData\Local\Programs\Python\Python311\Lib\threading.py:1119: in join
    self._wait_for_tstate_lock()
..\AppData\Local\Programs\Python\Python311\Lib\threading.py:1139: in _wait_for_tstate_lock
    if lock.acquire(block, timeout):
.venv\Lib\site-packages\gevent\thread.py:302: in acquire
    acquired = BoundedSemaphore.acquire(self, blocking, timeout)
src/gevent/_semaphore.py:184: in gevent._gevent_c_semaphore.Semaphore.acquire
    ???
src/gevent/_semaphore.py:263: in gevent._gevent_c_semaphore.Semaphore.acquire
    ???
src/gevent/_semaphore.py:253: in gevent._gevent_c_semaphore.Semaphore.acquire
    ???
src/gevent/_abstract_linkable.py:529: in gevent._gevent_c_abstract_linkable.AbstractLinkable._wait
    ???
src/gevent/_abstract_linkable.py:495: in gevent._gevent_c_abstract_linkable.AbstractLinkable._wait_core
    ???
src/gevent/_abstract_linkable.py:498: in gevent._gevent_c_abstract_linkable.AbstractLinkable._wait_core
    ???
src/gevent/_abstract_linkable.py:450: in gevent._gevent_c_abstract_linkable.AbstractLinkable._AbstractLinkable__wait_to_be_notified
    ???
src/gevent/_abstract_linkable.py:459: in gevent._gevent_c_abstract_linkable.AbstractLinkable._switch_to_hub
    ???
src/gevent/_greenlet_primitives.py:61: in gevent._gevent_c_greenlet_primitives.SwitchOutGreenletWithLoop.switch
    ???
src/gevent/_greenlet_primitives.py:65: in gevent._gevent_c_greenlet_primitives.SwitchOutGreenletWithLoop.switch
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

&gt;   ???
E   gevent.exceptions.LoopExit: This operation would block forever
E   	Hub: &lt;Hub '' at 0x23b93609080 backend=default ptr=&lt;cdata 'struct uv_loop_s *' 0x00007FF956897240&gt; default pending=0 ref=0 callbacks=0 resolver=&lt;gevent.resolver.thread.Resolver at 0x23b9369e790 pool=&lt;ThreadPool at 0x23b9368dc40 tasks=0 size=0 maxsize=10 hub=&lt;Hub at 0x23b93609080 thread_ident=0xae34&gt;&gt;&gt; threadpool=&lt;ThreadPool at 0x23b9368dc40 tasks=0 size=0 maxsize=10 hub=&lt;Hub at 0x23b93609080 thread_ident=0xae34&gt;&gt; thread_ident=0xae34&gt;
E   	Handles:
E   [HandleState(handle=&lt;cdata 'struct uv_handle_s *' 0x0000023B8D2D1678&gt;, type=b'check', watcher=&lt;gevent.libuv.loop.loop at 0x23b93604bd0 backend=default ptr=&lt;cdata 'struct uv_loop_s *' 0x00007FF956897240&gt; default pending=0 ref=0 callbacks=0&gt;, ref=0, active=1, closing=0),
E    HandleState(handle=&lt;cdata 'struct uv_handle_s *' 0x0000023B8F84CF68&gt;, type=b'timer', watcher=&lt;gevent.libuv.loop.loop at 0x23b93604bd0 backend=default ptr=&lt;cdata 'struct uv_loop_s *' 0x00007FF956897240&gt; default pending=0 ref=0 callbacks=0&gt;, ref=0, active=1, closing=0),
E    HandleState(handle=&lt;cdata 'struct uv_handle_s *' 0x0000023B8D2D0B78&gt;, type=b'prepare', watcher=&lt;gevent.libuv.loop.loop at 0x23b93604bd0 backend=default ptr=&lt;cdata 'struct uv_loop_s *' 0x00007FF956897240&gt; default pending=0 ref=0 callbacks=0&gt;, ref=0, active=1, closing=0),
E    HandleState(handle=&lt;cdata 'struct uv_handle_s *' 0x0000023B8D2D1A98&gt;, type=b'check', watcher=&lt;gevent.libuv.loop.loop at 0x23b93604bd0 backend=default ptr=&lt;cdata 'struct uv_loop_s *' 0x00007FF956897240&gt; default pending=0 ref=0 callbacks=0&gt;, ref=1, active=0, closing=0),
E    HandleState(handle=&lt;cdata 'struct uv_handle_s *' 0x0000023B8FB10E78&gt;, type=b'async', watcher=&lt;async_ at 0x23b9369e350 callback=&lt;function AbstractLoop._init_loop_and_aux_watchers.&lt;locals&gt;.&lt;lambda&gt; at 0x0000023B93698EA0&gt; args=() watcher=&lt;cdata 'struct uv_async_s *' owning 224 bytes&gt; handle=&lt;cdata 'void *' 0x0000023B9368B780&gt; ref=False&gt;, ref=0, active=1, closing=0),
E    HandleState(handle=&lt;cdata 'struct uv_handle_s *' 0x0000023B8FB10B48&gt;, type=b'async', watcher=&lt;async_ at 0x23b936b8ed0 callback=&lt;bound method ThreadPool._on_fork of &lt;ThreadPool at 0x23b9368dc40 tasks=0 size=0 maxsize=10 hub=&lt;Hub at 0x23b93609080 thread_ident=0xae34&gt;&gt;&gt; args=() watcher=&lt;cdata 'struct uv_async_s *' owning 224 bytes&gt; handle=&lt;cdata 'void *' 0x0000023B936CFE00&gt; ref=False&gt;, ref=0, active=1, closing=0)]

src/gevent/_gevent_c_greenlet_primitives.pxd:35: LoopExit</error></testcase></testsuite></testsuites>
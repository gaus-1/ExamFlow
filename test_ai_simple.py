#!/usr/bin/env python
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç AI —Å–∏—Å—Ç–µ–º—ã
"""

import requests
import json
import re
import sys

def main():
    print("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ AI –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    base_url = "http://localhost:8000"
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç
        print("\nüì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞...")
        response = requests.get(base_url, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞: {response.status_code}")
        
        if response.status_code != 200:
            print("‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —ç–ª–µ–º–µ–Ω—Ç—ã
        html = response.text
        ai_elements = [
            "ai-interface",
            "ai-input", 
            "ai-send-btn",
            "examflow-main.js"
        ]
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
        for element in ai_elements:
            found = element in html
            status = "‚úÖ" if found else "‚ùå"
            print(f"  {status} {element}")
        
        # 3. –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
        print("\nüîê –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞...")
        csrf_match = re.search(r'csrfmiddlewaretoken[^>]*value=["\']([^"\']*)["\']', html)
        
        if not csrf_match:
            print("‚ùå CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        csrf_token = csrf_match.group(1)
        print("‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º AI API
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI API...")
        session = requests.Session()
        
        # –ö–æ–ø–∏—Ä—É–µ–º cookies –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        session.cookies.update(response.cookies)
        
        ai_response = session.post(
            f"{base_url}/ai/api/",
            json={"prompt": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç AI —Å–∏—Å—Ç–µ–º—ã."},
            headers={
                "X-CSRFToken": csrf_token,
                "Content-Type": "application/json",
                "Referer": base_url
            },
            timeout=30
        )
        
        print(f"AI API —Å—Ç–∞—Ç—É—Å: {ai_response.status_code}")
        
        if ai_response.status_code == 200:
            try:
                data = ai_response.json()
                if "answer" in data and data["answer"]:
                    answer_preview = data["answer"][:100] + "..." if len(data["answer"]) > 100 else data["answer"]
                    print(f"‚úÖ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {answer_preview}")
                    return True
                else:
                    print("‚ùå AI –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
                    print(f"–î–∞–Ω–Ω—ã–µ: {data}")
                    return False
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"–û—Ç–≤–µ—Ç: {ai_response.text[:200]}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ AI API: {ai_response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {ai_response.text[:200]}")
            return False
            
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ AI –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢!")
    else:
        print("\nüîß –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    
    sys.exit(0 if success else 1)

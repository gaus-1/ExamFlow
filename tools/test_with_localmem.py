#!/usr/bin/env python
"""
–¢–µ—Å—Ç AI —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∫—ç—à–µ–º (–±–µ–∑ Redis)
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∫—ç—à–µ–º
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
os.environ['USE_LOCMEM_CACHE'] = 'True'  # –§–æ—Ä—Å–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
django.setup()

from core.container import Container
from telegram_bot.services.ai_dialogs import get_ai_response

def test_ai_direct():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI –Ω–∞–ø—Ä—è–º—É—é"""
    print("ü§ñ –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI:")
    
    try:
        ai_orchestrator = Container.ai_orchestrator()
        
        test_queries = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è?",
            "–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è"
        ]
        
        for i, query in enumerate(test_queries, 1):
            try:
                print(f"  üîÑ –ó–∞–ø—Ä–æ—Å {i}: {query}")
                response = ai_orchestrator.ask(query)
                
                if response and isinstance(response, dict) and 'answer' in response:
                    answer = response['answer']
                    preview = answer[:100] + "..." if len(answer) > 100 else answer
                    print(f"  ‚úÖ –û—Ç–≤–µ—Ç {i}: {preview}")
                else:
                    print(f"  ‚ùå –ó–∞–ø—Ä–æ—Å {i}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç - {response}")
                    
            except Exception as e:
                print(f"  ‚ùå –ó–∞–ø—Ä–æ—Å {i}: –æ—à–∏–±–∫–∞ - {e}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ AI Orchestrator: {e}")
        return False

def test_bot_ai():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI –≤ –±–æ—Ç–µ"""
    print("\nüì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –í –ë–û–¢–ï:")
    
    try:
        test_queries = [
            "–ü—Ä–∏–≤–µ—Ç –∏–∑ –±–æ—Ç–∞!",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª?",
            "–ü–æ–º–æ–≥–∏ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π"
        ]
        
        for i, query in enumerate(test_queries, 1):
            try:
                print(f"  üîÑ –ë–æ—Ç –∑–∞–ø—Ä–æ—Å {i}: {query}")
                response = get_ai_response(query, task_type='chat')
                
                if response and not response.startswith('–û—à–∏–±–∫–∞'):
                    preview = response[:100] + "..." if len(response) > 100 else response
                    print(f"  ‚úÖ –ë–æ—Ç –æ—Ç–≤–µ—Ç {i}: {preview}")
                else:
                    print(f"  ‚ùå –ë–æ—Ç –∑–∞–ø—Ä–æ—Å {i}: {response}")
                    
            except Exception as e:
                print(f"  ‚ùå –ë–æ—Ç –∑–∞–ø—Ä–æ—Å {i}: –æ—à–∏–±–∫–∞ - {e}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç AI: {e}")
        return False

def main():
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –° –õ–û–ö–ê–õ–¨–ù–´–ú –ö–≠–®–ï–ú")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    ai_success = test_ai_direct()
    bot_success = test_bot_ai()
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 50)
    print(f"AI Orchestrator: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if ai_success else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"Telegram Bot AI: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if bot_success else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if ai_success and bot_success:
        print("\nüéâ –í–°–ï AI –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢!")
        print("üí° –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à IP –≤ Redis whitelist –Ω–∞ Render.com")
    else:
        print("\nüîß –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° AI –°–ò–°–¢–ï–ú–û–ô")
    
    return ai_success and bot_success

if __name__ == "__main__":
    main()

import requests
import json
import re

def test_ai_website():
    print("=== –¢–ï–°–¢ AI –ù–ê –°–ê–ô–¢–ï ===")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç
        r = requests.get('http://localhost:8000/', timeout=10)
        print(f"–°–∞–π—Ç: {r.status_code}")
        
        if r.status_code != 200:
            return False
            
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —ç–ª–µ–º–µ–Ω—Ç—ã
        html = r.text
        ai_elements = ['ai-interface', 'ai-input', 'ai-send-btn', 'examflow-main.js']
        
        for element in ai_elements:
            found = element in html
            print(f"{element}: {'‚úì' if found else '‚úó'}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º AI API
        session = requests.Session()
        session.get('http://localhost:8000/')  # –ü–æ–ª—É—á–∞–µ–º cookies
        
        csrf_match = re.search(r'name="csrfmiddlewaretoken" value="([^"]+)"', html)
        if not csrf_match:
            print("CSRF: ‚úó")
            return False
        
        csrf = csrf_match.group(1)
        print("CSRF: ‚úì")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∑–∞–ø—Ä–æ—Å
        ai_resp = session.post('http://localhost:8000/ai/api/',
            json={'prompt': '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –ò–ò.'},
            headers={
                'X-CSRFToken': csrf,
                'Content-Type': 'application/json',
                'Referer': 'http://localhost:8000/'
            },
            timeout=30
        )
        
        print(f"AI API: {ai_resp.status_code}")
        
        if ai_resp.status_code == 200:
            try:
                data = ai_resp.json()
                if 'answer' in data and data['answer']:
                    print(f"AI –æ—Ç–≤–µ—Ç: ‚úì ({len(data['answer'])} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return True
                else:
                    print("AI –æ—Ç–≤–µ—Ç: ‚úó (–ø—É—Å—Ç–æ–π)")
                    return False
            except:
                print("AI –æ—Ç–≤–µ—Ç: ‚úó (–Ω–µ JSON)")
                return False
        else:
            print(f"AI –æ—à–∏–±–∫–∞: {ai_resp.status_code}")
            return False
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return False

def test_responsive():
    print("\n=== –¢–ï–°–¢ –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–ò ===")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ User-Agent –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices = [
            ('Mobile', 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)'),
            ('Tablet', 'Mozilla/5.0 (iPad; CPU OS 14_0 like Mac OS X)'),
            ('Desktop', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)')
        ]
        
        for device, ua in devices:
            resp = requests.get('http://localhost:8000/', 
                headers={'User-Agent': ua}, 
                timeout=5
            )
            
            if resp.status_code == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                html = resp.text
                responsive_elements = [
                    'mobile-menu',
                    'container',
                    'grid',
                    'flex'
                ]
                
                found_elements = sum(1 for elem in responsive_elements if elem in html)
                print(f"{device}: ‚úì ({found_elements}/{len(responsive_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
            else:
                print(f"{device}: ‚úó (HTTP {resp.status_code})")
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        return False

def test_telegram_bot():
    print("\n=== –¢–ï–°–¢ AI –í –ë–û–¢–ï ===")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram auth
        resp = requests.get('http://localhost:8000/auth/telegram/login/', timeout=5)
        print(f"Telegram auth: {'‚úì' if resp.status_code == 200 else '‚úó'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç endpoint
        resp = requests.get('http://localhost:8000/bot/', timeout=5)
        print(f"Bot endpoint: {'‚úì' if resp.status_code in [200, 404, 405] else '‚úó'}")
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –†–£–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EXAMFLOW")
    print("=" * 40)
    
    results = []
    results.append(("AI –Ω–∞ —Å–∞–π—Ç–µ", test_ai_website()))
    results.append(("–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å", test_responsive()))
    results.append(("Telegram –±–æ—Ç", test_telegram_bot()))
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 40)
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–®–Å–õ" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{test_name:<15} | {status}")
        if success:
            passed += 1
    
    print("=" * 40)
    print(f"–ò–¢–û–ì–û: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")

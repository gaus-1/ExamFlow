#!/usr/bin/env python
"""–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

import requests
import time

def test_website():
    """–¢–µ—Å—Ç –≤–µ–±-—Å–∞–π—Ç–∞"""
    print("üåê –¢–µ—Å—Ç –≤–µ–±-—Å–∞–π—Ç–∞:")
    try:
        r = requests.get('http://localhost:8000/', timeout=5)
        print(f"  –°—Ç–∞—Ç—É—Å: {r.status_code}")
        
        if r.status_code == 200:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            elements = {
                'AI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å': 'ai-interface' in r.text,
                'CSS –∑–∞–≥—Ä—É–∂–µ–Ω': 'examflow-unified.css' in r.text,
                'JS –∑–∞–≥—Ä—É–∂–µ–Ω': 'examflow-main.js' in r.text,
                '–õ–æ–≥–æ—Ç–∏–ø': 'logo-icon' in r.text,
                'QR-–∫–æ–¥': 'telegram-qr' in r.text,
            }
            
            for name, found in elements.items():
                status = "‚úÖ" if found else "‚ùå"
                print(f"  {status} {name}")
            
            return True
        return False
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_ai_api():
    """–¢–µ—Å—Ç AI API"""
    print("\nü§ñ –¢–µ—Å—Ç AI API:")
    try:
        # –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        r = requests.get('http://localhost:8000/ai/', timeout=5)
        print(f"  AI –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω: {r.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º AI endpoints
        endpoints = [
            '/ai/api/',
            '/ai/chat/',
        ]
        
        for endpoint in endpoints:
            try:
                resp = requests.get(f'http://localhost:8000{endpoint}', timeout=3)
                status = "‚úÖ" if resp.status_code in [200, 405, 302] else "‚ùå"
                print(f"  {status} {endpoint}: HTTP {resp.status_code}")
            except:
                print(f"  ‚ùå {endpoint}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_telegram_auth():
    """–¢–µ—Å—Ç Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüì± –¢–µ—Å—Ç Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    try:
        r = requests.get('http://localhost:8000/auth/telegram/login/', timeout=5)
        status = "‚úÖ" if r.status_code == 200 else "‚ùå"
        print(f"  {status} Telegram Login: HTTP {r.status_code}")
        return r.status_code == 200
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("üöÄ –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EXAMFLOW")
    print("=" * 40)
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(3)
    
    results = []
    results.append(("–í–µ–±-—Å–∞–π—Ç", test_website()))
    results.append(("AI API", test_ai_api()))
    results.append(("Telegram Auth", test_telegram_auth()))
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 40)
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–®–Å–õ" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{test_name:<15} | {status}")
        if success:
            passed += 1
    
    print("=" * 40)
    print(f"–ò–¢–û–ì–û: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == len(results):
        print("üéâ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –†–ê–ë–û–¢–ê–Æ–¢!")
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")

if __name__ == "__main__":
    main()

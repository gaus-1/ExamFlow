#!/usr/bin/env python3
"""
üîç –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ExamFlow
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç: Django —Å–µ—Ä–≤–µ—Ä, –±–æ—Ç–∞, –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
"""

import os
import sys
import django
import requests
import subprocess
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

from django.conf import settings  # noqa: E402
from django.db import connection  # noqa: E402

def check_django_server():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Django —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ Django —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        response = requests.get('http://127.0.0.1:8000/', timeout=5)
        if response.status_code == 200:
            print("‚úÖ Django —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥: 200)")
            return True
        else:
            print("‚ö†Ô∏è Django —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print("‚ùå Django —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            cursor.fetchone()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
        return True
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def check_static_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...")
    static_dir = Path(settings.STATIC_ROOT or 'staticfiles')
    if static_dir.exists():
        css_files = list(static_dir.rglob('*.css'))
        js_files = list(static_dir.rglob('*.js'))
        print("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã: {len(css_files)} CSS, {len(js_files)} JS")
        return True
    else:
        print("‚ùå –ü–∞–ø–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

def check_models():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π Django"""
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π...")
    try:
        from learning.models import Subject, Task, Topic

        subjects_count = Subject.objects.count()  # type: ignore
        topics_count = Topic.objects.count()  # type: ignore
        tasks_count = Task.objects.count()  # type: ignore

        print("‚úÖ –ú–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç:")
        print("   üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {subjects_count}")
        print("   üéØ –¢–µ–º: {topics_count}")
        print("   üìù –ó–∞–¥–∞–Ω–∏–π: {tasks_count}")
        return True
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def check_telegram_bot():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞"""
    print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω
        result = subprocess.run(['tasklist', '/FI', 'IMAGENAME eq python.exe'],
                              capture_output=True, text=True, shell=True)
        if 'python.exe' in result.stdout:
            print("‚úÖ Python –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç)")
            return True
        else:
            print("‚ö†Ô∏è Python –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return False

def check_github_actions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub Actions"""
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub Actions...")
    workflows_dir = Path('.github/workflows')
    if workflows_dir.exists():
        workflow_files = list(workflows_dir.glob('*.yml'))
        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(workflow_files)} workflow —Ñ–∞–π–ª–æ–≤:")
        for workflow in workflow_files:
            print("   üìÑ {workflow.name}")
        return True
    else:
        print("‚ùå –ü–∞–ø–∫–∞ .github/workflows –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ ExamFlow")
    print("=" * 50)

    checks = [
        check_django_server,
        check_database,
        check_static_files,
        check_models,
        check_telegram_bot,
        check_github_actions
    ]

    results = []
    for check in checks:
        try:
            result = check()
            results.append(result)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ {check.__name__}: {e}")
            results.append(False)
        print()

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    passed = sum(results)
    total = len(results)

    print("‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}/{total}")
    print("‚ùå –û—à–∏–±–æ–∫: {total - passed}")

    if passed == total:
        print("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    elif passed >= total * 0.8:
        print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç, –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏!")

    return passed == total

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)

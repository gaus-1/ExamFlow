#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ keepalive —Å–µ—Ä–≤–∏—Å–∞ ExamFlow 2.0 –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
"""

import os
import sys
import django
import subprocess
import time
import signal
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
django.setup()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('keepalive.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class KeepaliveManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è keepalive –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"""

    def __init__(self):
        self.processes = {}
        self.running = False

    def start_keepalive(self, interval=300):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç keepalive —Å–µ—Ä–≤–∏—Å"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ keepalive —Å–µ—Ä–≤–∏—Å–∞ ExamFlow 2.0...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º Django –∫–æ–º–∞–Ω–¥—É keepalive
            cmd = [
                sys.executable, 'manage.py', 'keepalive',
                '--interval', str(interval)
            ]

            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                bufsize=1,
                universal_newlines=True
            )

            self.processes['keepalive'] = process
            self.running = True

            logger.info("‚úÖ Keepalive —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            logger.info("‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {interval} —Å–µ–∫—É–Ω–¥")

            return process

        except Exception:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ keepalive: {e}")
            return None

    def stop_keepalive(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç keepalive —Å–µ—Ä–≤–∏—Å"""
        if 'keepalive' in self.processes:
            process = self.processes['keepalive']
            try:
                process.terminate()
                process.wait(timeout=10)
                logger.info("‚úÖ Keepalive —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                process.kill()
                logger.warning("‚ö†Ô∏è Keepalive —Å–µ—Ä–≤–∏—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ keepalive: {e}")

            del self.processes['keepalive']
            self.running = False

    def check_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å keepalive —Å–µ—Ä–≤–∏—Å–∞"""
        if 'keepalive' in self.processes:
            process = self.processes['keepalive']
            if process.poll() is None:
                logger.info("üü¢ Keepalive —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω (PID: {process.pid})")
                return True
            else:
                logger.warning("üî¥ Keepalive —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return False
        else:
            logger.warning("üî¥ Keepalive —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False

    def run_foreground(self, interval=300):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç keepalive –≤ foreground —Ä–µ–∂–∏–º–µ"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ keepalive –≤ foreground —Ä–µ–∂–∏–º–µ...")
            logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
            def signal_handler(signum, frame):
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                self.stop_keepalive()
                sys.exit(0)

            signal.signal(signal.SIGINT, signal_handler)
            signal.signal(signal.SIGTERM, signal_handler)

            # –ó–∞–ø—É—Å–∫–∞–µ–º keepalive
            process = self.start_keepalive(interval)
            if not process:
                return

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            while self.running:
                if process.poll() is not None:
                    logger.error("‚ùå Keepalive –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                    break
                time.sleep(1)

        except KeyboardInterrupt:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            self.stop_keepalive()
        except Exception:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ foreground —Ä–µ–∂–∏–º–µ: {e}")
            self.stop_keepalive()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description='Keepalive —Å–µ—Ä–≤–∏—Å ExamFlow 2.0')
    parser.add_argument(
        '--interval',
        type=int,
        default=300,
        help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300)'
    )
    parser.add_argument(
        '--foreground',
        action='store_true',
        help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ foreground —Ä–µ–∂–∏–º–µ'
    )
    parser.add_argument(
        '--status',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å keepalive —Å–µ—Ä–≤–∏—Å–∞'
    )
    parser.add_argument(
        '--stop',
        action='store_true',
        help='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å keepalive —Å–µ—Ä–≤–∏—Å'
    )

    args = parser.parse_args()

    manager = KeepaliveManager()

    if args.status:
        manager.check_status()
    elif args.stop:
        manager.stop_keepalive()
    elif args.foreground:
        manager.run_foreground(args.interval)
    else:
        # –ó–∞–ø—É—Å–∫ –≤ background —Ä–µ–∂–∏–º–µ
        manager.start_keepalive(args.interval)
        logger.info("‚úÖ Keepalive —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –≤ background —Ä–µ–∂–∏–º–µ")
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

if __name__ == '__main__':
    main()

"""
–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ExamFlow
"""

import os
import shutil
import tempfile
from unittest.mock import Mock, patch

import django
import pytest
from django.conf import settings
from django.contrib.auth import get_user_model
from django.test import Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –¥–ª—è —Ç–µ—Å—Ç–æ–≤
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "examflow_project.settings")
django.setup()

User = get_user_model()


@pytest.fixture(scope="session")
def django_db_setup(django_db_setup, django_db_blocker):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    with django_db_blocker.unblock():
        pass


@pytest.fixture
def client():
    """Django test client"""
    return Client()


@pytest.fixture
def user():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = User.objects.create_user(
        telegram_id=123456789,
        telegram_username="testuser",
        telegram_first_name="Test",
        telegram_last_name="User",
    )
    return user


@pytest.fixture
def admin_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    admin = User.objects.create_superuser(
        telegram_id=987654321, telegram_username="admin", telegram_first_name="Admin"
    )
    return admin


@pytest.fixture
def authenticated_client(client, user):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"""
    client.force_login(user)
    return client


@pytest.fixture
def authenticated_admin_client(client, admin_user):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω-–∫–ª–∏–µ–Ω—Ç"""
    client.force_login(admin_user)
    return client


@pytest.fixture
def temp_media_root():
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
    temp_dir = tempfile.mkdtemp()
    old_media_root = settings.MEDIA_ROOT
    settings.MEDIA_ROOT = temp_dir
    yield temp_dir
    settings.MEDIA_ROOT = old_media_root
    shutil.rmtree(temp_dir)


@pytest.fixture
def mock_redis():
    """–ú–æ–∫ Redis –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    with patch("django.core.cache.cache") as mock_cache:
        mock_cache.get.return_value = None
        mock_cache.set.return_value = True
        mock_cache.delete.return_value = True
        yield mock_cache


@pytest.fixture
def mock_ai_service():
    """–ú–æ–∫ AI —Å–µ—Ä–≤–∏—Å–∞"""
    with patch("core.container.Container.ai_orchestrator") as mock_ai:
        mock_orchestrator = Mock()
        mock_orchestrator.ask.return_value = {
            "answer": "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI",
            "sources": [
                {"title": "–¢–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫", "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"}
            ],
        }
        mock_ai.return_value = mock_orchestrator
        yield mock_orchestrator


@pytest.fixture
def mock_telegram_bot():
    """–ú–æ–∫ Telegram –±–æ—Ç–∞"""
    with patch("telegram_bot.bot_main.get_bot") as mock_bot:
        mock_bot_instance = Mock()
        mock_bot.return_value = mock_bot_instance
        yield mock_bot_instance


@pytest.fixture
def math_subject():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"""
    from learning.models import Subject

    return Subject.objects.create(  # type: ignore
        name="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)",
        code="MATH_PRO",
        exam_type="–ï–ì–≠",
        description="–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ï–ì–≠",
        icon="üìê",
        is_primary=True,
    )


@pytest.fixture
def russian_subject():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
    from learning.models import Subject

    return Subject.objects.create(  # type: ignore
        name="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
        code="RUSSIAN",
        exam_type="–ï–ì–≠",
        description="–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ï–ì–≠",
        icon="üìù",
        is_primary=True,
    )


@pytest.fixture
def math_task(math_subject):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ"""
    from learning.models import Task

    return Task.objects.create(  # type: ignore
        title="–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ",
        description="–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x + 5 = 13",
        answer="4",
        subject=math_subject,
        difficulty=2,
    )


@pytest.fixture
def russian_task(russian_subject):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É"""
    from learning.models import Task

    return Task.objects.create(  # type: ignore
        title="–í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é –±—É–∫–≤—É",
        description='–í —Å–ª–æ–≤–µ "–≤...—Ä–æ–Ω–∞" –ø—Ä–æ–ø—É—â–µ–Ω–∞ –±—É–∫–≤–∞:',
        answer="–æ",
        subject=russian_subject,
        difficulty=1,
    )


@pytest.fixture
def user_profile(user):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from core.models import UserProfile

    return UserProfile.objects.create(  # type: ignore
        user=user, telegram_id=123456789, telegram_username="testuser"
    )


@pytest.fixture
def ai_limits(user):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ AI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from ai.models import UserAILimits  # type: ignore

    return UserAILimits.objects.create(
        user=user,
        daily_requests=100,
        monthly_requests=3000,
        requests_used_today=0,
        requests_used_this_month=0,
    )


@pytest.fixture(autouse=True)
def enable_db_access_for_all_tests(db):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ë–î –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    pass


@pytest.fixture
def mock_fipi_monitor():
    """–ú–æ–∫ FIPI –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    with patch("core.fipi_monitor.FIPIMonitor") as mock_monitor:
        mock_instance = Mock()
        mock_instance.check_updates.return_value = False
        mock_instance.get_new_tasks.return_value = []
        mock_monitor.return_value = mock_instance
        yield mock_instance


@pytest.fixture
def mock_rag_system():
    """–ú–æ–∫ RAG —Å–∏—Å—Ç–µ–º—ã"""
    with patch("core.rag_system.orchestrator.RAGOrchestrator") as mock_rag:
        mock_instance = Mock()
        mock_instance.process_query.return_value = {
            "context": "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI",
            "sources": [
                {"title": "–ó–∞–¥–∞–Ω–∏–µ 1", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è 1"},
                {"title": "–ó–∞–¥–∞–Ω–∏–µ 2", "content": "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è 2"},
            ],
            "context_chunks": 2,
        }
        mock_rag.return_value = mock_instance
        yield mock_instance


@pytest.fixture
def selenium_driver():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è Selenium WebDriver"""
    from selenium import webdriver
    from selenium.webdriver.chrome.options import Options

    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")

    driver = webdriver.Chrome(options=options)
    yield driver
    driver.quit()


@pytest.fixture
def telegram_webhook_data():
    """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram webhook"""
    return {
        "update_id": 123456789,
        "message": {
            "message_id": 1,
            "from": {
                "id": 123456789,
                "is_bot": False,
                "first_name": "–¢–µ—Å—Ç",
                "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "username": "testuser",
                "language_code": "ru",
            },
            "chat": {
                "id": 123456789,
                "first_name": "–¢–µ—Å—Ç",
                "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "username": "testuser",
                "type": "private",
            },
            "date": 1695123456,
            "text": "/start",
        },
    }


# –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest –º–∞—Ä–∫–µ—Ä–æ–≤"""
    config.addinivalue_line("markers", "unit: mark test as unit test")
    config.addinivalue_line("markers", "integration: mark test as integration test")
    config.addinivalue_line("markers", "ui: mark test as UI test")
    config.addinivalue_line("markers", "bot: mark test as bot test")
    config.addinivalue_line("markers", "load: mark test as load test")
    config.addinivalue_line("markers", "slow: mark test as slow running")

"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ ExamFlow –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
"""

from django.test import TestCase, Client
from django.urls import reverse
from django.conf import settings
from learning.models import Subject, Topic, Task
from core.ai.priority_manager import AIPriorityManager
from core.fipi_monitor import FIPIMonitor
import json

class MathRussianFocusTestCase(TestCase):
    """–¢–µ—Å—Ç—ã —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.client = Client()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user = User.objects.create_user( # type: ignore
            username='testuser',
            email='test@example.com',
            password='testpass123'
        )

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        self.math_prof = Subject.objects.create( # type: ignore
            name='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)',
            code='math_pro',
            exam_type='–ï–ì–≠',
            description='–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ï–ì–≠ - –∑–∞–¥–∞–Ω–∏—è 1-19',
            icon='üìê',
            is_primary=True
        )

        self.math_base = Subject.objects.create( # type: ignore
            name='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–Ω–µ–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)',
            code='math_base',
            exam_type='–ï–ì–≠',
            description='–ë–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ï–ì–≠ - –∑–∞–¥–∞–Ω–∏—è 1-20',
            icon='üìä',
            is_primary=True
        )

        self.math_oge = Subject.objects.create( # type: ignore
            name='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–û–ì–≠)',
            code='math_oge',
            exam_type='–û–ì–≠',
            description='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –û–ì–≠ - –∑–∞–¥–∞–Ω–∏—è 1-26',
            icon='üî¢',
            is_primary=True
        )

        self.russian_ege = Subject.objects.create( # type: ignore
            name='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–ï–ì–≠)',
            code='russian_ege',
            exam_type='–ï–ì–≠',
            description='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ï–ì–≠ - —Å–æ—á–∏–Ω–µ–Ω–∏–µ, —Ç–µ—Å—Ç—ã, –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞',
            icon='üìù',
            is_primary=True
        )

        self.russian_oge = Subject.objects.create( # type: ignore
            name='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–û–ì–≠)',
            code='russian_oge',
            exam_type='–û–ì–≠',
            description='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –û–ì–≠ - –∏–∑–ª–æ–∂–µ–Ω–∏–µ, —Å–æ—á–∏–Ω–µ–Ω–∏–µ, —Ç–µ—Å—Ç—ã',
            icon='üìñ',
            is_primary=True
        )

        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        self.physics = Subject.objects.create( # type: ignore
            name='–§–∏–∑–∏–∫–∞',
            code='physics',
            exam_type='–ï–ì–≠',
            is_archived=True
        )

        self.chemistry = Subject.objects.create( # type: ignore
            name='–•–∏–º–∏—è',
            code='chemistry',
            exam_type='–ï–ì–≠',
            is_archived=True
        )

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—ã
        self.math_topic = Topic.objects.create( # type: ignore
            name='–ê–ª–≥–µ–±—Ä–∞',
            subject=self.math_prof,
            description='–ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è'
        )

        self.russian_topic = Topic.objects.create( # type: ignore
            name='–°–æ—á–∏–Ω–µ–Ω–∏–µ',
            subject=self.russian_ege,
            description='–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ—á–∏–Ω–µ–Ω–∏—è –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É'
        )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
        self.math_task = Task.objects.create( # type: ignore
            title='–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ',
            description='–†–µ—à–∏—Ç–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ - 5x + 6 = 0',
            subject=self.math_prof,
            topic=self.math_topic,
            difficulty='medium'
        )

        self.russian_task = Task.objects.create( # type: ignore     
            title='–°–æ—á–∏–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É',
            description='–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É',
            subject=self.russian_ege,
            topic=self.russian_topic,
            difficulty='hard'
        )

    def test_subjects_list_shows_only_primary(self):
        """–¢–µ—Å—Ç: —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ"""
        response = self.client.get(reverse('learning:subjects_list'))

        self.assertEqual(response.status_code, 200) # type: ignore

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        self.assertContains(response, '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)')
        self.assertContains(response, '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–Ω–µ–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)')
        self.assertContains(response, '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–û–ì–≠)')
        self.assertContains(response, '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–ï–ì–≠)')
        self.assertContains(response, '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–û–ì–≠)')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        self.assertNotContains(response, '–§–∏–∑–∏–∫–∞')
        self.assertNotContains(response, '–•–∏–º–∏—è')

    def test_math_subject_detail(self):
        """–¢–µ—Å—Ç: –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏"""
        response = self.client.get(reverse('learning:math_subject_detail', args=[self.math_prof.id]))

        self.assertEqual(response.status_code, 200) # type: ignore
        self.assertContains(response, '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)')
        self.assertContains(response, '–ê–ª–≥–µ–±—Ä–∞')

    def test_russian_subject_detail(self):
        """–¢–µ—Å—Ç: –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
        response = self.client.get(reverse('learning:russian_subject_detail', args=[self.russian_ege.id]))

        self.assertEqual(response.status_code, 200) # type: ignore
        self.assertContains(response, '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–ï–ì–≠)')
        self.assertContains(response, '–°–æ—á–∏–Ω–µ–Ω–∏–µ')

    def test_focused_search_math(self):
        """–¢–µ—Å—Ç: —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ"""
        response = self.client.get(reverse('learning:focused_search'), {'q': '—É—Ä–∞–≤–Ω–µ–Ω–∏–µ'})

        self.assertEqual(response.status_code, 200) # type: ignore

        data = json.loads(response.content) # type: ignore
        self.assertGreater(len(data['results']), 0) # type: ignore

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
        math_results = [r for r in data['results'] if r['type'] == 'math']
        self.assertGreater(len(math_results), 0)

    def test_focused_search_russian(self):
        """–¢–µ—Å—Ç: —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É"""
        response = self.client.get(reverse('learning:focused_search'), {'q': '—Å–æ—á–∏–Ω–µ–Ω–∏–µ'})

        self.assertEqual(response.status_code, 200) # type: ignore

        data = json.loads(response.content) # type: ignore
        self.assertGreater(len(data['results']), 0) # type: ignore

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É
        russian_results = [r for r in data['results'] if r['type'] == 'russian']
        self.assertGreater(len(russian_results), 0)

    def test_subject_statistics(self):
        """–¢–µ—Å—Ç: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º"""
        response = self.client.get(reverse('learning:subject_statistics'))

        self.assertEqual(response.status_code, 200) # type: ignore

        data = json.loads(response.content) # type: ignore

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        self.assertIn('math', data)
        self.assertIn('russian', data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
        self.assertEqual(data['math']['subjects_count'], 3)  # 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
        self.assertGreater(data['math']['total_tasks'], 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É
        self.assertEqual(data['russian']['subjects_count'], 2)  # 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        self.assertGreater(data['russian']['total_tasks'], 0) # type: ignore

class AIPriorityManagerTestCase(TestCase):
    """–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ò–ò"""

    def setUp(self):
        self.priority_manager = AIPriorityManager()

    def test_math_question_analysis(self):
        """–¢–µ—Å—Ç: –∞–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ"""
        question = "–ö–∞–∫ —Ä–µ—à–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ - 5x + 6 = 0?"

        analysis = self.priority_manager.analyze_question(question)

        self.assertEqual(analysis['subject'], '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞')
        self.assertEqual(analysis['priority'], 'high')
        self.assertIn('–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', analysis['prompt'].lower())

    def test_russian_question_analysis(self):
        """–¢–µ—Å—Ç: –∞–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É"""
        question = "–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É?"

        analysis = self.priority_manager.analyze_question(question)

        self.assertEqual(analysis['subject'], '—Ä—É—Å—Å–∫–∏–π')
        self.assertEqual(analysis['priority'], 'high')
        self.assertIn('—Ä—É—Å—Å–∫–∏–π', analysis['prompt'].lower())

    def test_physics_question_analysis(self):
        """–¢–µ—Å—Ç: –∞–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —Ñ–∏–∑–∏–∫–µ (–≤—Ç–æ—Ä–∏—á–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç)"""
        question = "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–∏–ª–∞ —Ç—è–∂–µ—Å—Ç–∏?"

        analysis = self.priority_manager.analyze_question(question)

        self.assertEqual(analysis['subject'], 'unknown')
        self.assertEqual(analysis['priority'], 'medium')
        self.assertIn('—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å', analysis['prompt'].lower())

    def test_high_priority_response_config(self):
        """–¢–µ—Å—Ç: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        config = self.priority_manager._get_response_config('high')

        self.assertTrue(config['include_examples'])
        self.assertTrue(config['include_steps'])
        self.assertTrue(config['include_tips'])
        self.assertTrue(config['use_formulas'])
        self.assertEqual(config['max_length'], 2000)

    def test_low_priority_response_config(self):
        """–¢–µ—Å—Ç: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∏–∑–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        config = self.priority_manager._get_response_config('low')

        self.assertFalse(config['include_examples'])
        self.assertFalse(config['include_steps'])
        self.assertTrue(config['redirect'])
        self.assertEqual(config['max_length'], 500)

    def test_redirect_message(self):
        """–¢–µ—Å—Ç: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        message = self.priority_manager.get_redirect_message('—Ñ–∏–∑–∏–∫–∞')

        self.assertIn('–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', message.lower())
        self.assertIn('—Ä—É—Å—Å–∫–∏–π', message.lower())
        self.assertIn('—Ñ–∏–∑–∏–∫–∞', message.lower())

class FIPIMonitorTestCase(TestCase):
    """–¢–µ—Å—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –§–ò–ü–ò"""

    def setUp(self):
        self.monitor = FIPIMonitor()

    def test_subject_detection(self):
        """–¢–µ—Å—Ç: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        math_question = "–ö–∞–∫ —Ä–µ—à–∏—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏–µ?"
        russian_question = "–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ?"
        unknown_question = "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø–æ–≥–æ–¥–∞?"

        self.assertEqual(self.monitor._detect_subject(math_question), '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞') # type: ignore
        self.assertEqual(self.monitor._detect_subject(russian_question), '—Ä—É—Å—Å–∫–∏–π') # type: ignore
        self.assertEqual(self.monitor._detect_subject(unknown_question), 'unknown') # type: ignore

    def test_exam_type_detection(self):
        """–¢–µ—Å—Ç: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞"""
        ege_question = "–ó–∞–¥–∞—á–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –ï–ì–≠"
        oge_question = "–ó–∞–¥–∞–Ω–∏–µ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –û–ì–≠"
        unknown_question = "–ü—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å"

        self.assertEqual(self.monitor._detect_exam_type(ege_question), 'ege') # type: ignore
        self.assertEqual(self.monitor._detect_exam_type(oge_question), 'oge') # type: ignore
        self.assertEqual(self.monitor._detect_exam_type(unknown_question), 'unknown') # type: ignore

    def test_priority_detection(self):
        """–¢–µ—Å—Ç: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        self.assertEqual(self.monitor._get_priority('–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'ege'), 'high') # type: ignore
        self.assertEqual(self.monitor._get_priority('—Ä—É—Å—Å–∫–∏–π', 'oge'), 'high') # type: ignore
        self.assertEqual(self.monitor._get_priority('—Ñ–∏–∑–∏–∫–∞', 'ege'), 'low') # type: ignore
        self.assertEqual(self.monitor._get_priority('unknown', 'ege'), 'medium') # type: ignore

    def test_prompt_selection(self):
        """–¢–µ—Å—Ç: –≤—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞"""
        math_ege_prompt = self.monitor._get_prompt('–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'ege') # type: ignore
        math_oge_prompt = self.monitor._get_prompt('–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'oge') # type: ignore
        russian_ege_prompt = self.monitor._get_prompt('—Ä—É—Å—Å–∫–∏–π', 'ege') # type: ignore
        redirect_prompt = self.monitor._get_prompt('unknown', 'ege') # type: ignore

        self.assertIn('–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', math_ege_prompt.lower())
        self.assertIn('–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', math_oge_prompt.lower())
        self.assertIn('—Ä—É—Å—Å–∫–∏–π', russian_ege_prompt.lower())
        self.assertIn('—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å', redirect_prompt.lower())

class IntegrationTestCase(TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""

    def setUp(self):
        self.client = Client()

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        self.math_prof = Subject.objects.create( # type: ignore
            name='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)',
            code='math_pro',
            exam_type='–ï–ì–≠',
            is_primary=True
        )

        self.russian_ege = Subject.objects.create( # type: ignore
            name='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–ï–ì–≠)',
            code='russian_ege',
            exam_type='–ï–ì–≠',
            is_primary=True
        )

    def test_full_workflow(self):
        """–¢–µ—Å—Ç: –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å"""
        # 1. –ó–∞—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        response = self.client.get('/')
        self.assertEqual(response.status_code, 200) # type: ignore

        # 2. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        response = self.client.get(reverse('learning:subjects_list'))
        self.assertEqual(response.status_code, 200) # type: ignore

        # 3. –ò—â–µ–º –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ
        response = self.client.get(reverse('learning:focused_search'), {'q': '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞'})
        self.assertEqual(response.status_code, 200) # type: ignore

        # 4. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        response = self.client.get(reverse('learning:subject_statistics'))
        self.assertEqual(response.status_code, 200) # type: ignore

        data = json.loads(response.content) # type: ignore
        self.assertIn('math', data)
        self.assertIn('russian', data)

    def test_mobile_responsiveness(self):
        """–¢–µ—Å—Ç: –º–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
        response = self.client.get(
            reverse('learning:subjects_list'),
            HTTP_USER_AGENT='Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)'
        )

        self.assertEqual(response.status_code, 200) # type: ignore
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        self.assertContains(response, 'subjects-grid')

    def test_performance(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        import time

        start_time = time.time()
        response = self.client.get(reverse('learning:subjects_list'))
        load_time = time.time() - start_time

        self.assertEqual(response.status_code, 200) # type: ignore
        self.assertLess(load_time, 2.0)  # –ú–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥

        start_time = time.time()
        response = self.client.get(reverse('learning:focused_search'), {'q': '—Ç–µ—Å—Ç'})
        search_time = time.time() - start_time

        self.assertEqual(response.status_code, 200) # type: ignore  
        self.assertLess(search_time, 1.0)  # –ú–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã

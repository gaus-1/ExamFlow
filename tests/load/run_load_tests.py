"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ load —Ç–µ—Å—Ç–æ–≤ ExamFlow
"""

import os
import sys
import subprocess
import time
from pathlib import Path


def run_load_tests():
    """–ó–∞–ø—É—Å–∫ load —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
    project_root = Path(__file__).parent.parent.parent
    sys.path.insert(0, str(project_root))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Django
    import django
    django.setup()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ load —Ç–µ—Å—Ç–æ–≤ –¥–ª—è ExamFlow")
    print("=" * 50)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    test_configs = [
        {
            'name': '–û–±—ã—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞',
            'users': 10,
            'spawn_rate': 2,
            'duration': '2m',
            'class': 'WebsiteUser'
        },
        {
            'name': 'API –Ω–∞–≥—Ä—É–∑–∫–∞',
            'users': 20,
            'spawn_rate': 5,
            'duration': '3m',
            'class': 'APIUser'
        },
        {
            'name': '–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç',
            'users': 50,
            'spawn_rate': 10,
            'duration': '5m',
            'class': 'HeavyUser'
        }
    ]
    
    for config in test_configs:
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {config['name']}")
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {config['users']}")
        print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è: {config['spawn_rate']}/—Å–µ–∫")
        print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {config['duration']}")
        print("-" * 30)
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ locust
        cmd = [
            'locust',
            '-f', 'tests/load/locustfile.py',
            '--host', 'http://localhost:8000',  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
            '--users', str(config['users']),
            '--spawn-rate', str(config['spawn_rate']),
            '--run-time', config['duration'],
            '--headless',
            '--html', f'reports/load_test_{config["class"]}.html',
            '--csv', f'reports/load_test_{config["class"]}',
            '--class', config['class']
        ]
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
            
            if result.returncode == 0:
                print(f"‚úÖ {config['name']} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå {config['name']} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
                print(f"–û—à–∏–±–∫–∞: {result.stderr}")
                
        except subprocess.TimeoutExpired:
            print(f"‚è∞ {config['name']} –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {config['name']}: {e}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        time.sleep(10)
    
    print("\nüéâ –í—Å–µ load —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("üìÅ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ reports/")


def run_single_test(users=10, duration='2m', test_class='WebsiteUser'):
    """–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ load —Ç–µ—Å—Ç–∞: {test_class}")
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}")
    print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")
    
    cmd = [
        'locust',
        '-f', 'tests/load/locustfile.py',
        '--host', 'http://localhost:8000',
        '--users', str(users),
        '--spawn-rate', '5',
        '--run-time', duration,
        '--headless',
        '--html', f'reports/load_test_{test_class}.html',
        '--csv', f'reports/load_test_{test_class}',
        '--class', test_class
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print("üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫–µ reports/")
        else:
            print("‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞: {e}")


if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ load —Ç–µ—Å—Ç–æ–≤ ExamFlow')
    parser.add_argument('--users', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    parser.add_argument('--duration', default='2m', help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞')
    parser.add_argument('--class', dest='test_class', default='WebsiteUser', 
                       choices=['WebsiteUser', 'APIUser', 'HeavyUser'],
                       help='–ö–ª–∞—Å—Å —Ç–µ—Å—Ç–∞')
    parser.add_argument('--all', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã')
    
    args = parser.parse_args()
    
    if args.all:
        run_load_tests()
    else:
        run_single_test(args.users, args.duration, args.test_class)

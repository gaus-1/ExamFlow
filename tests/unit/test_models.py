"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π ExamFlow
"""

import pytest
from django.core.exceptions import ValidationError
from django.db import IntegrityError
from django.contrib.auth import get_user_model
from learning.models import Subject, Task, Topic, UserProgress
from core.models import UserProfile
from learning.models import Achievement
from ai.models import AiLimit

User = get_user_model()


@pytest.mark.unit
@pytest.mark.django_db
class TestUserModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def test_create_user(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = User.objects.create_user(
            telegram_id=123456789,
            telegram_username='testuser',
            telegram_first_name='Test',
            telegram_last_name='User'
        )
        
        assert user.telegram_id == 123456789
        assert user.telegram_username == 'testuser'
        assert user.telegram_first_name == 'Test'
        assert user.telegram_last_name == 'User'
        assert user.is_active is True
        assert user.is_staff is False
        assert user.is_superuser is False
    
    def test_create_superuser(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        admin = User.objects.create_superuser(
            telegram_id=987654321,
            telegram_username='admin',
            telegram_first_name='Admin'
        )
        
        assert admin.is_superuser is True
        assert admin.is_staff is True
        assert admin.is_active is True
        assert admin.telegram_id == 987654321
    
    def test_user_str_representation(self, user):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        assert 'testuser' in str(user) or str(user.telegram_id) in str(user)
    
    def test_user_telegram_id_unique(self):
        """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ telegram_id"""
        User.objects.create_user(
            username='user1',
            email='user1@examflow.ru',
            password='pass1',
            telegram_id=123456789
        )
        
        with pytest.raises(IntegrityError):
            User.objects.create_user(
                username='user2',
                email='user2@examflow.ru',
                password='pass2',
                telegram_id=123456789  # –î—É–±–ª–∏—Ä—É—é—â–∏–π telegram_id
            )


@pytest.mark.unit
@pytest.mark.django_db
class TestSubjectModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    
    def test_create_subject(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        subject = Subject.objects.create( # type: ignore
            name='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)',
            code='MATH_PRO',
            exam_type='–ï–ì–≠',
            description='–ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ï–ì–≠',
            icon='üìê'
        )
        
        assert subject.name == '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø—Ä–æ—Ñ–∏–ª—å–Ω–∞—è)'
        assert subject.code == 'MATH_PRO'
        assert subject.exam_type == '–ï–ì–≠'
    
    def test_subject_str_representation(self, math_subject):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        assert str(math_subject) == f'{math_subject.name} ({math_subject.get_exam_type_display()})'
    
    def test_subject_code_unique(self):
        """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        Subject.objects.create( # type: ignore
            name='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 1',
            code='MATH',
            exam_type='–ï–ì–≠'
        )
        
        with pytest.raises(IntegrityError):
            Subject.objects.create( # type: ignore
                name='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 2',
                code='MATH',  # –î—É–±–ª–∏—Ä—É—é—â–∏–π –∫–æ–¥
                exam_type='–û–ì–≠'
            )
    
    def test_subject_exam_types(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–∫–∑–∞–º–µ–Ω–æ–≤"""
        ege_subject = Subject.objects.create( # type: ignore
            name='–§–∏–∑–∏–∫–∞ –ï–ì–≠',
            code='PHYS_EGE',
            exam_type='–ï–ì–≠'
        )
        
        oge_subject = Subject.objects.create(  # type: ignore
            name='–§–∏–∑–∏–∫–∞ –û–ì–≠',
            code='PHYS_OG–ï',
            exam_type='–û–ì–≠'
        )
        
        assert ege_subject.exam_type == '–ï–ì–≠'
        assert oge_subject.exam_type == '–û–ì–≠'


@pytest.mark.unit
@pytest.mark.django_db
class TestTaskModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ –∑–∞–¥–∞–Ω–∏—è"""
    
    def test_create_task(self, math_subject):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        task = Task.objects.create( # type: ignore
            title='–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ',
            description='–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x + 5 = 13',
            answer='4',
            subject=math_subject,
            difficulty=2
        )
        
        assert task.title == '–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ'
        assert task.description == '–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x + 5 = 13'
        assert task.answer == '4'
        assert task.subject == math_subject
        assert task.difficulty == 2
    
    def test_task_str_representation(self, math_task):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        assert str(math_task) == math_task.title
    
    def test_task_difficulty_levels(self, math_subject):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        easy_task = Task.objects.create( # type: ignore
            title='–õ–µ–≥–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
            description='–ü—Ä–æ—Å—Ç–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ',
            answer='1',
            subject=math_subject,
            difficulty=1
        )
        
        hard_task = Task.objects.create( # type: ignore
            title='–°–ª–æ–∂–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
            description='–°–ª–æ–∂–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ',
            answer='3',
            subject=math_subject,
            difficulty=3
        )
        
        assert easy_task.difficulty == 1
        assert hard_task.difficulty == 3
    
    def test_task_subject_relationship(self, math_subject, russian_subject):
        """–¢–µ—Å—Ç —Å–≤—è–∑–∏ –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º"""
        math_task = Task.objects.create( # type: ignore
            title='–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
            description='2 + 2 = ?',
            answer='4',
            subject=math_subject,
            difficulty=1
        )
        
        russian_task = Task.objects.create( # type: ignore
            title='–ó–∞–¥–∞–Ω–∏–µ –ø–æ —Ä—É—Å—Å–∫–æ–º—É',
            description='–í—Å—Ç–∞–≤—å—Ç–µ –±—É–∫–≤—É',
            answer='–æ',
            subject=russian_subject,
            difficulty=1
        )
        
        assert math_task.subject == math_subject
        assert russian_task.subject == russian_subject


@pytest.mark.unit
@pytest.mark.django_db
class TestUserProgressModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def test_create_user_progress(self, user, math_task):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        progress = UserProgress.objects.create( # type: ignore
            user=user,
            task=math_task,
            user_answer='4',
            is_correct=True,
            attempts=1
        )
        
        assert progress.user == user
        assert progress.task == math_task
        assert progress.user_answer == '4'
        assert progress.is_correct is True
        assert progress.attempts == 1
    
    def test_user_progress_str_representation(self, user, math_task):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        progress = UserProgress.objects.create( # type: ignore
            user=user,
            task=math_task,
            is_correct=True,
            attempts=1
        )
        
        expected = f"{user.username} - {math_task.subject.name}"
        assert str(progress) == expected
    
    def test_user_progress_update(self, user, math_task):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        progress = UserProgress.objects.create( # type: ignore
            user=user,
            task=math_task,
            is_correct=False,
            attempts=1
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress.is_correct = True
        progress.attempts = 2
        progress.save()
        
        updated_progress = UserProgress.objects.get(id=progress.id) # type: ignore
        assert updated_progress.is_correct is True
        assert updated_progress.attempts == 2
    
    def test_unique_user_task_progress(self, user, math_task):
        """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞–¥–∞–Ω–∏—é"""
        UserProgress.objects.create( # type: ignore
            user=user,
            task=math_task,
            is_correct=True,
            attempts=1
        )
        
        with pytest.raises(IntegrityError):
            UserProgress.objects.create( # type: ignore 
                user=user,
                task=math_task,  # –î—É–±–ª–∏—Ä—É—é—â–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è user-task
                is_correct=False,
                attempts=2
            )


@pytest.mark.unit
@pytest.mark.django_db
class TestUserProfileModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def test_create_user_profile(self, user):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile = UserProfile.objects.create( # type: ignore
            user=user
        )
        
        assert profile.user == user
    
    def test_user_profile_str_representation(self, user):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        profile = UserProfile.objects.create( # type: ignore
            user=user
        )
        
        assert str(profile) == f'–ü—Ä–æ—Ñ–∏–ª—å {user.username}'
    
    def test_user_profile_unique_per_user(self, user):
        """–¢–µ—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        UserProfile.objects.create( # type: ignore
            user=user
        )
        
        with pytest.raises(IntegrityError):
            UserProfile.objects.create( # type: ignore
                user=user  # –î—É–±–ª–∏—Ä—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            )


@pytest.mark.unit
@pytest.mark.django_db
class TestAiLimitModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ –ª–∏–º–∏—Ç–æ–≤ AI"""
    
    def test_create_ai_limit(self, user):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ AI"""
        limit = AiLimit.objects.create( # type: ignore
            user=user,
            limit_type='daily',
            current_usage=0,
            max_limit=100
        )
        
        assert limit.user == user
        assert limit.limit_type == 'daily'
        assert limit.current_usage == 0
        assert limit.max_limit == 100
    
    def test_ai_limit_str_representation(self, user):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞"""
        limit = AiLimit.objects.create( # type: ignore
            user=user,
            limit_type='daily',
            current_usage=5,
            max_limit=100
        )
        
        expected = f'{user.username} - daily: 5/100'
        assert str(limit) == expected
    
    def test_ai_limit_is_exceeded(self, user):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞"""
        limit = AiLimit.objects.create( # type: ignore
            user=user,
            limit_type='daily',
            current_usage=100,
            max_limit=100
        )
        
        assert limit.is_exceeded() is True
        
        limit.current_usage = 50
        assert limit.is_exceeded() is False
    
    def test_ai_limit_can_make_request(self, user):
        """–¢–µ—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
        limit = AiLimit.objects.create( # type: ignore
            user=user,
            limit_type='daily',
            current_usage=50,
            max_limit=100
        )
        
        assert limit.can_make_request() is True
        
        limit.current_usage = 100
        assert limit.can_make_request() is False


@pytest.mark.unit
@pytest.mark.django_db
class TestTopicModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ —Ç–µ–º—ã"""
    
    def test_create_topic(self, math_subject):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã"""
        topic = Topic.objects.create( # type: ignore
            name='–ê–ª–≥–µ–±—Ä–∞',
            subject=math_subject,
            code='ALGEBRA'
        )
        
        assert topic.name == '–ê–ª–≥–µ–±—Ä–∞'
        assert topic.subject == math_subject
        assert topic.code == 'ALGEBRA'
    
    def test_topic_str_representation(self, math_subject):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã"""
        topic = Topic.objects.create( # type: ignore
            name='–ê–ª–≥–µ–±—Ä–∞',
            subject=math_subject,
            code='ALGEBRA'
        )
        
        assert str(topic) == f'{math_subject.name} - –ê–ª–≥–µ–±—Ä–∞'
    
    def test_topic_subject_relationship(self, math_subject, russian_subject):
        """–¢–µ—Å—Ç —Å–≤—è–∑–∏ —Ç–µ–º—ã —Å –ø—Ä–µ–¥–º–µ—Ç–æ–º"""
        math_topic = Topic.objects.create( # type: ignore
            name='–ê–ª–≥–µ–±—Ä–∞',
            subject=math_subject,
            code='ALGEBRA'
        )
        
        russian_topic = Topic.objects.create( # type: ignore
            name='–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è',
            subject=russian_subject,
            code='ORPHO'
        )
        
        assert math_topic.subject == math_subject
        assert russian_topic.subject == russian_subject


@pytest.mark.unit
@pytest.mark.django_db
class TestAchievementModel:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    
    def test_create_achievement(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        achievement = Achievement.objects.create( # type: ignore
            name='–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
            description='–†–µ—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
            icon='üéØ',
            points_required=10
        )
        
        assert achievement.name == '–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ'
        assert achievement.description == '–†–µ—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ'
        assert achievement.icon == 'üéØ'
        assert achievement.points_required == 10
    
    def test_achievement_str_representation(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        achievement = Achievement.objects.create( # type: ignore
            name='–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
            description='–†–µ—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ'
        )
        
        assert str(achievement) == '–ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ'

#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è ExamFlow Bot - –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –†–ê–ë–û–¢–ê–ï–¢
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
"""

import os
import sys
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'examflow_project.settings')

import django
django.setup()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
BOT_TOKEN = getattr(settings, 'TELEGRAM_BOT_TOKEN', '')
if not BOT_TOKEN:
    print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    sys.exit(1)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–µ–¥–º–µ—Ç—ã", callback_data="subjects")],
        [InlineKeyboardButton("ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", callback_data="ai_help")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """üéØ **ExamFlow Bot**

–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ –ï–ì–≠ –∏ –û–ì–≠!

üìö **–ü—Ä–µ–¥–º–µ—Ç—ã** - –∏–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
ü§ñ **–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫** - –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã  
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    try:
        if update.message:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        elif update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            await update.callback_query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")

async def subjects_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–µ–¥–º–µ—Ç—ã"""
    try:
        from learning.models import Subject
        subjects = list(Subject.objects.filter(is_archived=False)[:6])  # type: ignore
        
        text = f"üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã ({len(subjects)}):**\n\n"
        keyboard = []
        
        if subjects:
            for subject in subjects:
                text += f"üìñ {subject.name}\n"
                keyboard.append([InlineKeyboardButton(f"üìñ {subject.name}", callback_data=f"subject_{subject.id}")])
        else:
            text += "–ü—Ä–µ–¥–º–µ—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è..."
        
        keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        await update.callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ subjects_callback: {e}")
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")

async def ai_help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ò–ò"""
    try:
        from core.container import Container
        ai_orchestrator = Container.ai_orchestrator()
        response = ai_orchestrator.ask("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        
        answer = response.get('answer', '–ò–ò –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!')
        text = f"ü§ñ **–ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç**\n\n{answer}\n\nüí° –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!"
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        await update.callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ai_help_callback: {e}")
        await update.callback_query.answer("‚ùå –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

async def stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        from learning.models import Subject, Task
        from telegram_auth.models import TelegramUser
        
        subjects_count = Subject.objects.count()  # type: ignore
        tasks_count = Task.objects.count()  # type: ignore
        users_count = TelegramUser.objects.count()  # type: ignore
        
        text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ExamFlow**

üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {subjects_count}
üìù –ó–∞–¥–∞—á: {tasks_count}  
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}

üéØ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç!"""
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        await update.callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats_callback: {e}")
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return
    
    text = update.message.text
    if text.startswith('/'):
        return
    
    try:
        from core.container import Container
        ai_orchestrator = Container.ai_orchestrator()
        response = ai_orchestrator.ask(text)
        
        answer = response.get('answer', '–ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å.')
        if len(answer) > 4000:
            answer = answer[:4000] + "..."
        
        await update.message.reply_text(f"ü§ñ {answer}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ text_handler: {e}")
        await update.message.reply_text("‚ùå –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

async def unknown_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ callback"""
    if update.callback_query:
        await update.callback_query.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        await start_command(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

# ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ ExamFlow Bot (Final Version)")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('help', start_command))
    
    # Callback handlers
    app.add_handler(CallbackQueryHandler(start_command, pattern=r'^start$'))
    app.add_handler(CallbackQueryHandler(subjects_callback, pattern=r'^subjects$'))
    app.add_handler(CallbackQueryHandler(ai_help_callback, pattern=r'^ai_help$'))
    app.add_handler(CallbackQueryHandler(stats_callback, pattern=r'^stats$'))
    app.add_handler(CallbackQueryHandler(unknown_callback))
    
    # Text messages
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    
    # Error handler
    app.add_error_handler(error_handler)  # type: ignore
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try:
        me = await app.bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} (ID: {me.id})")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    try:
        logger.info("‚úÖ –ó–∞–ø—É—Å–∫ polling...")
        await app.run_polling(drop_pending_updates=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
